
import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import { dashboardService } from '@/services/dashboardService'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog'
import { AlertTriangle, Clock, CheckCircle, TrendingUp, Zap, Calendar, ArrowRight, Eye, ThumbsUp, X, Package, Truck, ShoppingCart, FileText, Building2, Download } from 'lucide-react'
import ExcelJS from 'exceljs'

// Import modals
import PurchaseDetailModal from '@/components/purchase/PurchaseDetailModal'
import PurchaseStatusModal from '@/components/dashboard/PurchaseStatusModal'
import { toast } from 'sonner'
import type { DashboardData, UrgentRequest, MyRequestStatus } from '@/types/purchase'
import { useNavigate } from 'react-router-dom'

export default function DashboardMain() {
  const [data, setData] = useState<DashboardData | null>(null)
  const [loading, setLoading] = useState(true)
  const [actionLoading, setActionLoading] = useState<string | null>(null)
  const [selectedApprovalId, setSelectedApprovalId] = useState<number | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [currentUserRoles, setCurrentUserRoles] = useState<string[]>([])
  const [undownloadedOrders, setUndownloadedOrders] = useState<any[]>([])
  const [downloadingIds, setDownloadingIds] = useState<Set<string>>(new Set())
  const [selectedOrder, setSelectedOrder] = useState<any>(null)
  const [isOrderModalOpen, setIsOrderModalOpen] = useState(false)
  
  // Íµ¨Îß§/ÏûÖÍ≥† ÏÉÅÏÑ∏ Î™®Îã¨ ÏÉÅÌÉú
  const [selectedStatusItem, setSelectedStatusItem] = useState<any>(null)
  const [statusModalType, setStatusModalType] = useState<'purchase' | 'delivery' | 'completed' | null>(null)
  const [isStatusModalOpen, setIsStatusModalOpen] = useState(false)
  
  const navigate = useNavigate()
  const supabase = createClient()

  useEffect(() => {
    loadDashboardData()
  }, [])

  const loadDashboardData = async (showLoading = true) => {
    try {
      if (showLoading) {
        setLoading(true)
      } else {
        // Î°úÎî© ÌëúÏãú ÏóÜÏù¥ ÏÉàÎ°úÍ≥†Ïπ®Ìï† ÎïåÎäî Í∏∞Ï°¥ dataÎ•º Ïú†ÏßÄ
        // dataÍ∞Ä nullÏù¥ ÎêòÎäî Í≤ÉÏùÑ Î∞©ÏßÄ
      }
      
      // Ï∫êÏãú ÌÅ¥Î¶¨Ïñ¥ (ÏûÑÏãú)
      if (typeof window !== 'undefined') {
        localStorage.removeItem('dashboard-cache')
        sessionStorage.clear()
      }
      
      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setData(null)
      const supabase = createClient()
      
      const { data: { user }, error: authError } = await supabase.auth.getUser()
      
      if (authError) {
        console.error('Auth error:', authError)
        toast.error('Ïù∏Ï¶ù Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.')
        return
      }
      
      if (!user) {
        console.error('No user found in auth')
        toast.error('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.')
        return
      }

      const { data: employee, error: employeeError } = await supabase
        .from('employees')
        .select('*')
        .eq('email', user.email)
        .single()

      if (employeeError || !employee) {
        console.error('Employee fetch error:', employeeError)
        // employeeÍ∞Ä ÏóÜÏñ¥ÎèÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú ÎåÄÏãúÎ≥¥Îìú ÌëúÏãú
        const defaultEmployee = {
          id: user.id,
          name: user.email?.split('@')[0] || 'Guest User',  // Ïù¥Î©îÏùºÏóêÏÑú Ïù¥Î¶Ñ Ï∂îÏ∂ú
          email: user.email || '',
          purchase_role: null
        }
        
        try {
          const dashboardData = await dashboardService.getDashboardData(defaultEmployee as any)
          setData(dashboardData)
        } catch (err) {
          console.error('‚ùå ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏóêÎü¨:', err)
        }
        
        setLoading(false)
        return
      }

      console.log('üîç Ï°∞ÌöåÎêú Employee Îç∞Ïù¥ÌÑ∞:', {
        id: employee.id,
        name: employee.name,
        email: employee.email,
        employee_number: employee.employee_number,
        employeeID: employee.employeeID,
        purchase_role: employee.purchase_role
      })

      console.log('========== ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë ==========')
      console.log('1Ô∏è‚É£ ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê:', employee.name, '/ Email:', employee.email)
      console.log('2Ô∏è‚É£ Purchase Role:', employee.purchase_role)
      
      try {
        const dashboardData = await dashboardService.getDashboardData(employee)
        
        // Ï†ÑÏ≤¥ ÏûÖÍ≥†ÎåÄÍ∏∞ Í±¥Ïàò Ï°∞Ìöå Ï∂îÍ∞Ä
        const totalDeliveryWaiting = await dashboardService.getTotalDeliveryWaitingCount()
        
        console.log('3Ô∏è‚É£ ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å:', {
          hasData: !!dashboardData,
          hasEmployee: !!dashboardData.employee,
          employeeName: dashboardData.employee?.name,
          hasMyPurchaseStatus: !!dashboardData.myPurchaseStatus,
          myPurchaseStatusCount: dashboardData.myPurchaseStatus?.waitingPurchase?.length || 0,
          totalDeliveryWaiting: totalDeliveryWaiting,
          pendingApprovalsCount: dashboardData.pendingApprovals?.length || 0,
          pendingApprovals: dashboardData.pendingApprovals?.map(item => ({
            Î∞úÏ£ºÎ≤àÌò∏: item.purchase_order_number,
            ÏöîÏ≤≠Ïûê: item.requester_name,
            ÏµúÏ¢ÖÏäπÏù∏: item.final_manager_status
          }))
        })
        
        setData({
          ...dashboardData,
          totalDeliveryWaitingCount: totalDeliveryWaiting
        })
      } catch (err) {
        console.error('‚ùå ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏóêÎü¨:', err)
        toast.error('ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
      
      // ÏÇ¨Ïö©Ïûê role ÏÑ§Ï†ï
      if (employee.purchase_role) {
        const roles = Array.isArray(employee.purchase_role)
          ? employee.purchase_role.map((r: any) => String(r).trim())
          : String(employee.purchase_role)
              .split(',')
              .map((r: string) => r.trim())
              .filter((r: string) => r.length > 0)
        setCurrentUserRoles(roles)
        
        // lead buyer ÎòêÎäî "lead buyer" (Í≥µÎ∞± Ìè¨Ìï®)Ïù∏ Í≤ΩÏö∞ ÎØ∏Îã§Ïö¥Î°úÎìú Ìï≠Î™© Ï°∞Ìöå
        if (roles.includes('lead buyer') || roles.includes('lead buyer')) {
          const undownloaded = await dashboardService.getUndownloadedOrders(employee)
          setUndownloadedOrders(undownloaded)
        }
      }
    } catch (error) {
    } finally {
      if (showLoading) {
        setLoading(false)
      }
    }
  }

  const handleQuickApprove = async (requestId: string) => {
    console.log('handleQuickApprove Ìò∏Ï∂ú:', {
      requestId: requestId,
      hasData: !!data,
      hasEmployee: !!data?.employee,
      employee: data?.employee
    })
    
    if (!data?.employee) {
      console.error('handleQuickApprove ÏóêÎü¨: data.employeeÍ∞Ä ÏóÜÏùå', {
        data: data
      })
      toast.error('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
      return
    }

    // ÏäπÏù∏ ÌôïÏù∏ Î©îÏãúÏßÄ
    if (!confirm('Ï†ïÎßêÎ°ú ÏäπÏù∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      return
    }

    setActionLoading(requestId)
    
    // Optimistic Update: Ï¶âÏãú UIÏóêÏÑú Ï†úÍ±∞
    const originalData = data
    setData(prev => {
      if (!prev) return prev
      return {
        ...prev,
        pendingApprovals: prev.pendingApprovals.filter(item => item.id !== requestId),
        stats: {
          ...prev.stats,
          pending: Math.max(0, prev.stats.pending - 1)
        }
      }
    })

    try {
      const result = await dashboardService.quickApprove(requestId, data.employee)
      
      if (result.success) {
        toast.success('ÏäπÏù∏Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.')
        // ÏÑ±Í≥µ Ïãú Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî (UI ÍπúÎπ°ÏûÑ ÏóÜÏù¥)
        setTimeout(() => {
          loadDashboardData(false)  // falseÎ•º Ï†ÑÎã¨ÌïòÏó¨ Î°úÎî© ÌôîÎ©¥ ÌëúÏãú Ïïà Ìï®
        }, 1000)
      } else {
        // Ïã§Ìå® Ïãú ÏõêÎûò Îç∞Ïù¥ÌÑ∞Î°ú Î°§Î∞±
        setData(originalData)
        toast.error(result.error || 'ÏäπÏù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      // ÏóêÎü¨ Ïãú ÏõêÎûò Îç∞Ïù¥ÌÑ∞Î°ú Î°§Î∞±
      setData(originalData)
      toast.error('ÏäπÏù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    } finally {
      setActionLoading(null)
    }
  }

  const handleStatusClick = (item: any, type: 'purchase' | 'delivery' | 'completed') => {
    setSelectedStatusItem(item)
    setStatusModalType(type)
    setIsStatusModalOpen(true)
  }

  const handleDownloadExcel = async (purchase: any) => {
    try {
      setDownloadingIds(prev => new Set(prev).add(purchase.id))
      
      // Excel ÌååÏùº ÏÉùÏÑ± (FastPurchaseTableÍ≥º ÎèôÏùºÌïú Î°úÏßÅ)
      const workbook = new ExcelJS.Workbook()
      const worksheet = workbook.addWorksheet('Î∞úÏ£ºÏÑú')
      
      // Ìó§Îçî ÏÑ§Ï†ï
      worksheet.columns = [
        { header: 'Î∞úÏ£ºÎ≤àÌò∏', key: 'purchase_order_number', width: 20 },
        { header: 'ÏóÖÏ≤¥Î™Ö', key: 'vendor_name', width: 30 },
        { header: 'ÌíàÎ™©Î™Ö', key: 'item_name', width: 40 },
        { header: 'Í∑úÍ≤©', key: 'specification', width: 30 },
        { header: 'ÏàòÎüâ', key: 'quantity', width: 15 },
        { header: 'Îã®Í∞Ä', key: 'unit_price', width: 20 },
        { header: 'Í∏àÏï°', key: 'amount', width: 20 },
        { header: 'ÏöîÏ≤≠Ïùº', key: 'request_date', width: 15 },
        { header: 'ÏßÑÌñâÏÉÅÌÉú', key: 'progress_type', width: 15 }
      ]
      
      // Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
      const items = purchase.purchase_request_items || []
      items.forEach((item: any) => {
        worksheet.addRow({
          purchase_order_number: purchase.purchase_order_number,
          vendor_name: purchase.vendor_name || purchase.vendors?.vendor_name || '',
          item_name: item.item_name || '',
          specification: item.specification || '',
          quantity: item.quantity || 0,
          unit_price: item.unit_price_value || 0,
          amount: item.amount_value || 0,
          request_date: purchase.request_date || '',
          progress_type: purchase.progress_type || ''
        })
      })
      
      // Ïä§ÌÉÄÏùº Ï†ÅÏö©
      worksheet.getRow(1).font = { bold: true }
      worksheet.getRow(1).fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFE0E0E0' }
      }
      
      // ÌååÏùº Îã§Ïö¥Î°úÎìú
      const buffer = await workbook.xlsx.writeBuffer()
      const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })
      const url = window.URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      link.download = `Î∞úÏ£ºÏÑú_${purchase.purchase_order_number}_${new Date().toISOString().slice(0, 10)}.xlsx`
      link.click()
      window.URL.revokeObjectURL(url)
      
      // lead buyerÏù∏ Í≤ΩÏö∞ is_po_downloadÎ•º trueÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
      if (currentUserRoles.includes('lead buyer') || currentUserRoles.includes('lead buyer')) {
        await supabase
          .from('purchase_requests')
          .update({ is_po_download: true })
          .eq('id', purchase.id)
        
        // UIÏóêÏÑú Ï†úÍ±∞
        setUndownloadedOrders(prev => prev.filter(item => item.id !== purchase.id))
      }
      
      toast.success('Î∞úÏ£ºÏÑúÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.')
    } catch (error) {
      console.error('Excel download error:', error)
      toast.error('Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    } finally {
      setDownloadingIds(prev => {
        const newSet = new Set(prev)
        newSet.delete(purchase.id)
        return newSet
      })
    }
  }

  const getPriorityColor = (priority: 'high' | 'medium' | 'low') => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800 border-red-200'
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'low': return 'bg-green-100 text-green-800 border-green-200'
      default: return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getStepColor = (step: string) => {
    switch (step) {
      case 'approval': return 'bg-yellow-100 text-yellow-800'
      case 'purchase': return 'bg-blue-100 text-blue-800'
      case 'delivery': return 'bg-purple-100 text-purple-800'
      case 'completed': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center">
          <div className="w-12 h-12 border-3 border-hansl-500 border-t-transparent rounded-full animate-spin mx-auto" />
          <p className="mt-4 text-sm text-gray-600">ÎåÄÏãúÎ≥¥ÎìúÎ•º Î∂àÎü¨Ïò§Í≥† ÏûàÏäµÎãàÎã§...</p>
        </div>
      </div>
    )
  }

  if (!data?.employee) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center bg-white p-8 rounded-lg border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§</h3>
          <p className="text-sm text-gray-600">Î°úÍ∑∏Ïù∏ÏùÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.</p>
        </div>
      </div>
    )
  }

  // Í∂åÌïú ÌååÏã± Î∞è ÌëúÏãú Ïó¨Î∂Ä Í≤∞Ï†ï
  const roles = Array.isArray(data.employee.purchase_role)
    ? (data.employee.purchase_role as any[]).map((r: any) => String(r).trim())
    : (data.employee.purchase_role
        ? String(data.employee.purchase_role)
            .split(',')
            .map((r: string) => r.trim())
            .filter((r: string) => r.length > 0)
        : [])

  const canSeeApprovalBox = roles.some((r: string) => ['middle_manager', 'final_approver', 'app_admin', 'raw_material_manager', 'consumable_manager'].includes(r))

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="w-full px-4 lg:px-6">
        {/* Ìó§Îçî */}
        <div className="mb-3">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl font-bold text-gray-900">ÎåÄÏãúÎ≥¥Îìú</h1>
              <p className="text-xs text-gray-600 mt-0.5">
                {data.employee.name}Îãò, ÌôòÏòÅÌï©ÎãàÎã§. üìä
              </p>
            </div>
            <div className="flex items-center gap-2">
              <Badge variant="outline" className="text-xs">
                {new Date().toLocaleDateString('ko-KR', { 
                  month: 'long', 
                  day: 'numeric',
                  weekday: 'short'
                })}
              </Badge>
            </div>
          </div>
        </div>

        {/* Í∏¥Í∏â ÏïåÎ¶º ÏÑπÏÖò */}
        {data.urgentRequests.length > 0 && (
          <Card className="mb-3 border-red-200 bg-red-50">
            <CardHeader className="pb-2 pt-3">
              <CardTitle className="flex items-center gap-2 text-red-800 text-sm">
                <AlertTriangle className="w-4 h-4" />
                Í∏¥Í∏â Ï≤òÎ¶¨ ÌïÑÏöî ({data.urgentRequests.length}Í±¥)
              </CardTitle>
            </CardHeader>
            <CardContent className="p-3">
              <div className="flex gap-2 overflow-x-auto pb-2">
              {data.urgentRequests.slice(0, 5).map((request) => (
                <div key={request.id} className="bg-white rounded-lg p-2 border border-red-200 min-w-[280px] flex-shrink-0">
                  <div className="flex items-center justify-between gap-2">
                    <div className="flex-1 min-w-0">
                      <div className="flex flex-wrap items-center gap-1 mb-1">
                        <Badge className={`${getPriorityColor(request.priority)} text-[10px] h-4 px-1`}>
                          {request.priority === 'high' ? 'ÎÜíÏùå' : request.priority === 'medium' ? 'Î≥¥ÌÜµ' : 'ÎÇÆÏùå'}
                        </Badge>
                        <span className="text-xs font-medium text-gray-900 truncate max-w-[120px]">
                          {request.vendor_name || 'ÏóÖÏ≤¥Î™Ö ÏóÜÏùå'}
                        </span>
                        <span className="text-[10px] text-gray-500">
                          {request.daysOverdue}Ïùº ÏßÄÏó∞
                        </span>
                      </div>
                      <div className="text-[10px] text-gray-600">
                        <span>Î∞úÏ£º: {request.purchase_order_number || request.id.slice(0, 8)}</span>
                        <span className="ml-1">‚Ä¢ {request.total_items}Í∞ú</span>
                      </div>
                    </div>
                    <div className="flex gap-1 shrink-0">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => navigate(`/purchase?highlight=${request.id}`)}
                        className="h-6 px-2 text-[10px]"
                      >
                        <Eye className="w-3 h-3 mr-0.5" />
                        Î≥¥Í∏∞
                      </Button>
                      <Button
                        size="sm"
                        onClick={() => handleQuickApprove(request.id)}
                        disabled={actionLoading === request.id}
                        className="bg-red-600 hover:bg-red-700 h-6 px-2 text-[10px]"
                      >
                        <ThumbsUp className="w-3 h-3 mr-0.5" />
                        {actionLoading === request.id ? 'Ï≤òÎ¶¨Ï§ë' : 'ÏäπÏù∏'}
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
              </div>
            </CardContent>
          </Card>
        )}



        {/* ÌÜµÌï© ÎåÄÏãúÎ≥¥Îìú Í∑∏Î¶¨Îìú */}
        <div className="mb-2">
          <h2 className="text-sm font-semibold text-gray-900 mb-2 flex items-center gap-1.5">
            <Package className="w-3.5 h-3.5 text-gray-600" />
            Ï†ÑÏ≤¥ ÌòÑÌô©
          </h2>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3">
          {/* Lead Buyer - ÎØ∏Îã§Ïö¥Î°úÎìú Î∞úÏ£ºÏÑú */}
          {(currentUserRoles.includes('lead buyer') || currentUserRoles.includes('lead buyer')) && undownloadedOrders.length > 0 && (
            <Card className="w-full col-span-1 row-span-2 border-gray-200 shadow-sm hover:shadow-md transition-shadow">
              <CardHeader className="py-3 px-4 bg-gray-50 border-b">
                <CardTitle className="text-sm font-semibold flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Download className="w-4 h-4 text-orange-600" />
                    <span className="text-gray-900">ÎØ∏Îã§Ïö¥Î°úÎìú Î∞úÏ£ºÏÑú</span>
                  </div>
                  <Badge className="bg-orange-100 text-orange-700 border-orange-200 px-2 py-0.5">
                    {undownloadedOrders.length}
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                <div className="space-y-2">
                  {undownloadedOrders.slice(0, 5).map((item) => {
                    const items = item.purchase_request_items || []
                    const firstItem = items[0] || {}
                    const totalAmount = items.reduce((sum: number, i: any) => {
                      return sum + (Number(i.amount_value) || 0)
                    }, 0)
                    const totalQty = items.reduce((sum: number, i: any) => {
                      return sum + (Number(i.quantity) || 0)
                    }, 0)
                    const daysSince = Math.floor((Date.now() - new Date(item.created_at).getTime()) / (1000 * 60 * 60 * 24))
                    const isAdvance = item.progress_type === 'ÏÑ†ÏßÑÌñâ'
                    
                    return (
                      <div 
                        key={item.id} 
                        className={`border rounded-lg p-3 transition-all cursor-pointer hover:shadow-sm ${
                          isAdvance ? 'bg-red-50 hover:bg-red-100 border-red-200' : 'bg-white hover:bg-gray-50 border-gray-200'
                        }`}
                        onClick={() => {
                          setSelectedOrder(item)
                          setIsOrderModalOpen(true)
                        }}
                      >
                        <div className="flex items-start justify-between gap-3">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="font-semibold text-sm text-gray-900">
                                {item.purchase_order_number || `PO-${item.id.slice(0, 8)}`}
                              </span>
                              {isAdvance && (
                                <Badge className="text-[10px] bg-red-100 text-red-700 border-red-200 px-1.5 py-0">
                                  ÏÑ†ÏßÑÌñâ
                                </Badge>
                              )}
                              {daysSince > 3 && (
                                <Badge variant="outline" className="text-[10px] px-1.5 py-0">
                                  {daysSince}Ïùº Í≤ΩÍ≥º
                                </Badge>
                              )}
                            </div>
                            <div className="space-y-1">
                              <div className="text-xs text-gray-600">
                                {item.vendor_name || 'ÏóÖÏ≤¥Î™Ö ÏóÜÏùå'}
                              </div>
                              <div className="text-xs text-gray-500">
                                {firstItem.item_name || 'ÌíàÎ™©'} 
                                {items.length > 1 && (
                                  <span className="text-gray-400"> Ïô∏ {items.length - 1}Í±¥</span>
                                )}
                              </div>
                            </div>
                          </div>
                          <div className="text-right space-y-1">
                            <div className="text-sm font-bold text-gray-900">
                              ‚Ç©{totalAmount.toLocaleString()}
                            </div>
                            <Button
                              size="sm"
                              variant="outline"
                              className="h-7 px-2 text-[10px] border-orange-200 hover:bg-orange-50"
                              onClick={(e) => {
                                e.stopPropagation()
                                handleDownloadExcel(item)
                              }}
                              disabled={downloadingIds.has(item.id)}
                            >
                              {downloadingIds.has(item.id) ? (
                                <div className="w-3 h-3 border border-orange-600 border-t-transparent rounded-full animate-spin" />
                              ) : (
                                <>
                                  <Download className="w-3 h-3 mr-1" />
                                  Îã§Ïö¥Î°úÎìú
                                </>
                              )}
                            </Button>
                          </div>
                        </div>
                      </div>
                    )
                  })}
                  {undownloadedOrders.length > 5 && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="w-full text-xs h-8 border-gray-200 hover:bg-gray-50"
                      onClick={() => navigate('/purchase/list?tab=purchase')}
                    >
                      Ï†ÑÏ≤¥Î≥¥Í∏∞ ({undownloadedOrders.length}Í±¥) ‚Üí
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>
          )}

          {/* ÎÇ¥ ÏäπÏù∏ ÏßÑÌñâÏ§ë */}
          <Card className="w-full col-span-1 border-gray-200 shadow-sm hover:shadow-md transition-shadow">
            <CardHeader className="py-3 px-4 bg-gray-50 border-b">
              <CardTitle className="text-sm font-semibold flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Clock className="w-4 h-4 text-purple-600" />
                  <span className="text-gray-900">ÎÇ¥ ÏäπÏù∏ ÏßÑÌñâÏ§ë</span>
                </div>
                {data.myRecentRequests.length > 0 && (
                  <Badge className="bg-purple-100 text-purple-700 border-purple-200 px-2 py-0.5">
                    {data.myRecentRequests.length}
                  </Badge>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent className="p-4">
              {data.myRecentRequests.length === 0 ? (
                <div className="text-center py-12 text-gray-400">
                  <Clock className="w-10 h-10 mx-auto mb-3 text-gray-300" />
                  <p className="text-sm font-medium">ÏäπÏù∏ ÏßÑÌñâÏ§ëÏù∏ Ìï≠Î™©Ïù¥ ÏóÜÏäµÎãàÎã§</p>
                  <Button 
                    size="sm" 
                    variant="outline"
                    className="mt-3 h-8 text-xs px-4 border-gray-200"
                    onClick={() => navigate('/purchase/new')}
                  >
                    ÏÉà ÏöîÏ≤≠ ÏûëÏÑ±
                  </Button>
                </div>
              ) : (
                <div className="space-y-2">
                  {data.myRecentRequests.slice(0, 3).map((request) => {
                    const progress = request.middle_manager_status === 'pending' ? 25 : 50
                    
                    return (
                      <div 
                        key={request.id} 
                        className="border border-gray-200 rounded-lg p-3 bg-white hover:bg-gray-50 transition-all cursor-pointer hover:shadow-sm"
                        onClick={() => navigate(`/purchase?highlight=${request.id}`)}
                      >
                        <div className="flex items-start justify-between gap-3">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <span className="font-semibold text-sm text-gray-900">
                                {request.purchase_order_number || `PO-${request.id.slice(0, 8)}`}
                              </span>
                              <Badge className="text-[10px] bg-purple-100 text-purple-700 border-purple-200 px-1.5 py-0">
                                {progress}% ÏßÑÌñâ
                              </Badge>
                            </div>
                            <div className="space-y-1">
                              <div className="text-xs text-gray-600">
                                {request.vendor_name || 'ÏóÖÏ≤¥Î™Ö ÏóÜÏùå'}
                              </div>
                              <div className="text-xs text-gray-500">
                                {request.total_items}Í∞ú ÌíàÎ™©
                              </div>
                              <div className="flex items-center gap-2 mt-2">
                                <div className="flex-1 bg-gray-200 rounded-full h-2">
                                  <div 
                                    className="bg-purple-600 h-2 rounded-full transition-all"
                                    style={{ width: `${progress}%` }}
                                  />
                                </div>
                                <span className="text-[10px] text-gray-600">{progress}%</span>
                              </div>
                            </div>
                          </div>
                          <div className="text-right space-y-1">
                            <div className="text-sm font-bold text-gray-900">
                              ‚Ç©{(request.total_amount || 0).toLocaleString()}
                            </div>
                            <div className="text-[10px] text-gray-500">
                              {request.current_step === 'approval' ? 'ÏäπÏù∏ ÎåÄÍ∏∞' : request.current_step === 'purchase' ? 'Íµ¨Îß§ ÎåÄÍ∏∞' : 'ÏßÑÌñâÏ§ë'}
                            </div>
                          </div>
                        </div>
                      </div>
                    )
                  })}
                  {data.myRecentRequests.length > 3 && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="w-full text-xs h-8 border-gray-200 hover:bg-gray-50"
                      onClick={() => navigate('/purchase')}
                    >
                      Ï†ÑÏ≤¥Î≥¥Í∏∞ ({data.myRecentRequests.length}Í±¥) ‚Üí
                    </Button>
                  )}
                </div>
              )}
            </CardContent>
          </Card>

          {/* ÏäπÏù∏ ÎåÄÍ∏∞ (ÏäπÏù∏ Í∂åÌïúÏûêÎßå ÌëúÏãú) */}
          {canSeeApprovalBox && (
            <Card className="w-full col-span-1 row-span-2">
              <CardHeader className="pb-2 pt-3">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-xs sm:text-sm font-semibold flex items-center gap-1.5">
                    <Clock className="w-3.5 h-3.5 text-orange-500" />
                    ÏäπÏù∏ ÎåÄÍ∏∞
                    {data.pendingApprovals.length > 0 && (
                      <Badge variant="destructive" className="text-[10px] h-4 px-1">
                        {data.pendingApprovals.length}
                      </Badge>
                    )}
                  </CardTitle>
                  {data.pendingApprovals.length > 0 && (
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => navigate('/purchase')}
                      className="h-6 px-2"
                    >
                      <ArrowRight className="w-3 h-3" />
                    </Button>
                  )}
                </div>
              </CardHeader>
              <CardContent className="p-3">
                {/* ÏûÑÏãú ÎîîÎ≤ÑÍ∑∏ */}
                {console.log('üö® ÏäπÏù∏ ÎåÄÍ∏∞ Ïπ¥Îìú Î†åÎçîÎßÅ:', {
                  pendingApprovalsLength: data.pendingApprovals.length,
                  pendingApprovals: data.pendingApprovals.map(item => ({
                    id: item.id,
                    Î∞úÏ£ºÎ≤àÌò∏: item.purchase_order_number,
                    ÏöîÏ≤≠Ïûê: item.requester_name,
                    ÏµúÏ¢ÖÏäπÏù∏: item.final_manager_status
                  }))
                })}
                {data.pendingApprovals.length === 0 ? (
                  <div className="text-center py-4 text-gray-400">
                    <CheckCircle className="w-6 h-6 mx-auto mb-1" />
                    <p className="text-xs">ÎåÄÍ∏∞ Ìï≠Î™© ÏóÜÏùå</p>
                  </div>
                  ) : (
                  <div className="space-y-1.5">
                    {data.pendingApprovals.slice(0, 5).map((approval) => {
                      const items = approval.purchase_request_items || []
                      const firstItem = items[0] || {}
                      const totalAmount = approval.total_amount || items.reduce((sum: number, i: any) => sum + (Number(i.amount_value) || 0), 0)
                      const isAdvance = approval.progress_type === 'ÏÑ†ÏßÑÌñâ'
                      
                      return (
                        <div 
                          key={approval.id} 
                          className={`border rounded-lg p-2 hover:shadow-sm transition-all cursor-pointer ${
                            isAdvance ? 'bg-red-50 border-red-200' : 'hover:bg-orange-50/30'
                          }`}
                          onClick={(e) => {
                            if ((e.target as HTMLElement).closest('button')) return
                            setSelectedApprovalId(Number(approval.id))
                            setIsModalOpen(true)
                          }}
                        >
                          <div className="flex items-start justify-between gap-2">
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center gap-1 mb-1">
                                <span className="font-medium text-[11px]">
                                  {approval.purchase_order_number}
                                </span>
                                {isAdvance && (
                                  <Badge className="text-[8px] bg-red-100 text-red-800 px-1 h-3.5">
                                    ÏÑ†ÏßÑÌñâ
                                  </Badge>
                                )}
                              </div>
                              <div className="text-[10px] text-gray-600 space-y-0.5">
                                <div className="truncate">
                                  {firstItem.item_name || 'ÌíàÎ™©'} {items.length > 1 && `Ïô∏ ${items.length - 1}Í±¥`}
                                </div>
                                <div className="flex items-center justify-between text-[10px]">
                                  <span className="truncate max-w-[100px]">{approval.vendor_name || 'ÏóÖÏ≤¥'}</span>
                                  <span className="font-semibold text-gray-900">‚Ç©{(totalAmount/1000000).toFixed(1)}M</span>
                                </div>
                              </div>
                            </div>
                            <Button
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation()
                                handleQuickApprove(approval.id)
                              }}
                              disabled={actionLoading === approval.id}
                              className={`h-7 px-2 text-white text-[10px] shrink-0 ${
                                approval.middle_manager_status === 'approved' 
                                  ? 'bg-blue-600 hover:bg-blue-700' 
                                  : 'bg-green-600 hover:bg-green-700'
                              }`}
                            >
                              {actionLoading === approval.id ? (
                                <div className="w-3 h-3 border border-white border-t-transparent rounded-full animate-spin" />
                              ) : (
                                <>
                                  {approval.middle_manager_status === 'approved' ? 'ÏµúÏ¢Ö' : '1Ï∞®'} ÏäπÏù∏
                                </>
                              )}
                            </Button>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                )}
              </CardContent>
            </Card>
          )}
          
          {/* Íµ¨Îß§ ÎåÄÍ∏∞Ï§ë - Î™®Îì† ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌëúÏãú (Î≥∏Ïù∏ Í≤ÉÎßå) */}
          <Card className="w-full col-span-1 border-gray-200 shadow-sm hover:shadow-md transition-shadow">
              <CardHeader className="py-3 px-4 bg-gray-50 border-b">
                <CardTitle className="text-sm font-semibold flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <ShoppingCart className="w-4 h-4 text-yellow-600" />
                    <span className="text-gray-900">Íµ¨Îß§ ÎåÄÍ∏∞</span>
                  </div>
                  {data.myPurchaseStatus && data.myPurchaseStatus.waitingPurchase && data.myPurchaseStatus.waitingPurchase.length > 0 && (
                    <Badge className="bg-yellow-100 text-yellow-700 border-yellow-200 px-2 py-0.5">
                      {data.myPurchaseStatus.waitingPurchase.length}
                    </Badge>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                {!data.myPurchaseStatus || !data.myPurchaseStatus.waitingPurchase || data.myPurchaseStatus.waitingPurchase.length === 0 ? (
                  <div className="text-center py-12 text-gray-400">
                    <ShoppingCart className="w-10 h-10 mx-auto mb-3 text-gray-300" />
                    <p className="text-sm font-medium">Íµ¨Îß§ ÎåÄÍ∏∞ Ìï≠Î™©Ïù¥ ÏóÜÏäµÎãàÎã§</p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {data.myPurchaseStatus.waitingPurchase.slice(0, 3).map((item) => {
                      const items = item.purchase_request_items || []
                      const firstItem = items[0]
                      const totalAmount = items.reduce((sum: number, i: any) => sum + (Number(i.amount_value) || 0), 0)
                      const isSeonJin = (item.progress_type || '').includes('ÏÑ†ÏßÑÌñâ')
                      
                      return (
                        <div 
                          key={item.id} 
                          className={`border rounded-lg p-3 transition-all cursor-pointer hover:shadow-sm ${
                            isSeonJin ? 'bg-red-50 hover:bg-red-100 border-red-200' : 'bg-white hover:bg-gray-50 border-gray-200'
                          }`}
                          onClick={() => handleStatusClick(item, 'purchase')}
                        >
                          <div className="flex items-start justify-between gap-3">
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="font-semibold text-sm text-gray-900">
                                  {item.purchase_order_number || `PO-${item.id.slice(0, 8)}`}
                                </span>
                                {isSeonJin && (
                                  <Badge className="text-[10px] bg-red-100 text-red-700 border-red-200 px-1.5 py-0">
                                    ÏÑ†ÏßÑÌñâ
                                  </Badge>
                                )}
                              </div>
                              <div className="space-y-1">
                                <div className="text-xs text-gray-600">
                                  {item.vendor_name || 'ÏóÖÏ≤¥Î™Ö ÏóÜÏùå'}
                                </div>
                                <div className="text-xs text-gray-500">
                                  {firstItem?.item_name || 'ÌíàÎ™©'} 
                                  {items.length > 1 && (
                                    <span className="text-gray-400"> Ïô∏ {items.length - 1}Í±¥</span>
                                  )}
                                </div>
                              </div>
                            </div>
                            <div className="text-right space-y-1">
                              <div className="text-sm font-bold text-gray-900">
                                ‚Ç©{totalAmount.toLocaleString()}
                              </div>
                              <div className="text-[10px] text-gray-500">
                                {new Date(item.request_date).toLocaleDateString('ko-KR')}
                              </div>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                    {/* Lead BuyerÏù∏ Í≤ΩÏö∞ Íµ¨Îß§ Ï≤òÎ¶¨ÌïòÍ∏∞ Î≤ÑÌäº ÌëúÏãú */}
                    {(currentUserRoles.includes('lead_buyer') || currentUserRoles.includes('lead buyer')) && (
                      <Button 
                        className="w-full bg-yellow-600 hover:bg-yellow-700 text-xs h-8"
                        onClick={() => navigate('/purchase/list')}
                      >
                        Íµ¨Îß§ Ï≤òÎ¶¨ÌïòÍ∏∞
                      </Button>
                    )}
                    
                    {/* ÏùºÎ∞ò ÏÇ¨Ïö©Ïûê ÎòêÎäî 3Í∞ú Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞ Ï†ÑÏ≤¥Î≥¥Í∏∞ Î≤ÑÌäº */}
                    {data.myPurchaseStatus.waitingPurchase.length > 3 && (
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="w-full text-xs h-8 border-gray-200 hover:bg-gray-50"
                        onClick={() => navigate('/purchase?tab=purchase')}
                      >
                        Ï†ÑÏ≤¥Î≥¥Í∏∞ ({data.myPurchaseStatus.waitingPurchase.length}Í±¥) ‚Üí
                      </Button>
                    )}
                  </div>
                )}
              </CardContent>
          </Card>

          {/* ÏûÖÍ≥† ÎåÄÍ∏∞Ï§ë */}
          <Card className="w-full col-span-1 border-gray-200 shadow-sm hover:shadow-md transition-shadow">
              <CardHeader className="py-3 px-4 bg-gray-50 border-b">
                <CardTitle className="text-sm font-semibold flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Truck className="w-4 h-4 text-blue-600" />
                    <span className="text-gray-900">ÏûÖÍ≥† ÎåÄÍ∏∞</span>
                  </div>
                  {data.myPurchaseStatus.waitingDelivery.length > 0 && (
                    <Badge className="bg-blue-100 text-blue-700 border-blue-200 px-2 py-0.5">
                      {data.myPurchaseStatus.waitingDelivery.length}
                    </Badge>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                {data.myPurchaseStatus.waitingDelivery.length === 0 ? (
                  <div className="text-center py-12 text-gray-400">
                    <Truck className="w-10 h-10 mx-auto mb-3 text-gray-300" />
                    <p className="text-sm font-medium">ÏûÖÍ≥† ÎåÄÍ∏∞ Ìï≠Î™©Ïù¥ ÏóÜÏäµÎãàÎã§</p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {data.myPurchaseStatus.waitingDelivery.slice(0, 3).map((item) => {
                      const items = item.purchase_request_items || []
                      const firstItem = items[0]
                      const totalItems = items.length
                      const receivedItems = items.filter((i: any) => i.is_received).length
                      const progress = totalItems > 0 ? Math.round((receivedItems / totalItems) * 100) : 0
                      const totalAmount = items.reduce((sum: number, i: any) => sum + (Number(i.amount_value) || 0), 0)
                      const isSeonJin = (item.progress_type || '').includes('ÏÑ†ÏßÑÌñâ')
                      
                      return (
                        <div 
                          key={item.id} 
                          className={`border rounded-lg p-3 transition-all cursor-pointer hover:shadow-sm ${
                            isSeonJin ? 'bg-red-50 hover:bg-red-100 border-red-200' : 'bg-white hover:bg-gray-50 border-gray-200'
                          }`}
                          onClick={() => handleStatusClick(item, 'delivery')}
                        >
                          <div className="flex items-start justify-between gap-3">
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="font-semibold text-sm text-gray-900">
                                  {item.purchase_order_number || `PO-${item.id.slice(0, 8)}`}
                                </span>
                                {isSeonJin && (
                                  <Badge className="text-[10px] bg-red-100 text-red-700 border-red-200 px-1.5 py-0">
                                    ÏÑ†ÏßÑÌñâ
                                  </Badge>
                                )}
                              </div>
                              <div className="space-y-1">
                                <div className="text-xs text-gray-600">
                                  {item.vendor_name || 'ÏóÖÏ≤¥Î™Ö ÏóÜÏùå'}
                                </div>
                                <div className="text-xs text-gray-500">
                                  {firstItem?.item_name || 'ÌíàÎ™©'} 
                                  {totalItems > 1 && (
                                    <span className="text-gray-400"> Ïô∏ {totalItems - 1}Í±¥</span>
                                  )}
                                </div>
                                {item.delivery_request_date && (
                                  <div className="text-xs text-blue-600 font-medium">
                                    ÎÇ©Í∏∞: {new Date(item.delivery_request_date).toLocaleDateString('ko-KR')}
                                  </div>
                                )}
                              </div>
                            </div>
                            <div className="text-right space-y-1">
                              <div className="text-sm font-bold text-gray-900">
                                ‚Ç©{totalAmount.toLocaleString()}
                              </div>
                              {progress > 0 && (
                                <div className="space-y-1">
                                  <div className="text-[10px] text-gray-600">
                                    {receivedItems}/{totalItems} ÏûÖÍ≥† ({progress}%)
                                  </div>
                                  <div className="w-16 bg-gray-200 rounded-full h-1.5">
                                    <div 
                                      className="bg-blue-600 h-1.5 rounded-full"
                                      style={{ width: `${progress}%` }}
                                    />
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      )
                    })}
                    {data.myPurchaseStatus.waitingDelivery.length > 3 && (
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="w-full text-xs h-8 border-gray-200 hover:bg-gray-50"
                        onClick={() => navigate('/purchase?tab=receipt')}
                      >
                        Ï†ÑÏ≤¥Î≥¥Í∏∞ ({data.myPurchaseStatus.waitingDelivery.length}Í±¥) ‚Üí
                      </Button>
                    )}
                  </div>
                )}
              </CardContent>
          </Card>

          {/* ÏµúÍ∑º ÏôÑÎ£å */}
          <Card className="w-full col-span-1 border-gray-200 shadow-sm hover:shadow-md transition-shadow">
              <CardHeader className="py-3 px-4 bg-gray-50 border-b">
                <CardTitle className="text-sm font-semibold flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-green-600" />
                    <span className="text-gray-900">ÏµúÍ∑º ÏôÑÎ£å</span>
                  </div>
                  {data.myPurchaseStatus.recentCompleted.length > 0 && (
                    <Badge className="bg-green-100 text-green-700 border-green-200 px-2 py-0.5">
                      {data.myPurchaseStatus.recentCompleted.length}
                    </Badge>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                {data.myPurchaseStatus.recentCompleted.length === 0 ? (
                  <div className="text-center py-12 text-gray-400">
                    <CheckCircle className="w-10 h-10 mx-auto mb-3 text-gray-300" />
                    <p className="text-sm font-medium">ÏµúÍ∑º ÏôÑÎ£å Ìï≠Î™©Ïù¥ ÏóÜÏäµÎãàÎã§</p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {data.myPurchaseStatus.recentCompleted.slice(0, 3).map((item) => {
                      const items = item.purchase_request_items || []
                      const firstItem = items[0]
                      const totalAmount = items.reduce((sum: number, i: any) => sum + (Number(i.amount_value) || 0), 0)
                      
                      return (
                        <div 
                          key={item.id} 
                          className="border border-green-200 rounded-lg p-3 bg-green-50 hover:bg-green-100 transition-all cursor-pointer hover:shadow-sm"
                          onClick={() => handleStatusClick(item, 'completed')}
                        >
                          <div className="flex items-start justify-between gap-3">
                            <div className="flex-1 min-w-0">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="font-semibold text-sm text-gray-900">
                                  {item.purchase_order_number || `PO-${item.id.slice(0, 8)}`}
                                </span>
                                <Badge className="text-[10px] bg-green-100 text-green-700 border-green-200 px-1.5 py-0">
                                  ÏôÑÎ£å
                                </Badge>
                              </div>
                              <div className="space-y-1">
                                <div className="text-xs text-gray-600">
                                  {item.vendor_name || 'ÏóÖÏ≤¥Î™Ö ÏóÜÏùå'}
                                </div>
                                <div className="text-xs text-gray-500">
                                  {firstItem?.item_name || 'ÌíàÎ™©'} 
                                  {items.length > 1 && (
                                    <span className="text-gray-400"> Ïô∏ {items.length - 1}Í±¥</span>
                                  )}
                                </div>
                                {item.received_at && (
                                  <div className="text-xs text-green-600 font-medium">
                                    ÏûÖÍ≥†ÏôÑÎ£å: {new Date(item.received_at).toLocaleDateString('ko-KR')}
                                  </div>
                                )}
                              </div>
                            </div>
                            <div className="text-right space-y-1">
                              <div className="text-sm font-bold text-gray-900">
                                ‚Ç©{totalAmount.toLocaleString()}
                              </div>
                              <div className="text-[10px] text-gray-500">
                                {new Date(item.received_at || item.created_at).toLocaleDateString('ko-KR')}
                              </div>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                    {data.myPurchaseStatus.recentCompleted.length > 3 && (
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="w-full text-xs h-8 border-gray-200 hover:bg-gray-50"
                        onClick={() => navigate('/purchase?tab=done')}
                      >
                        Ï†ÑÏ≤¥Î≥¥Í∏∞ ({data.myPurchaseStatus.recentCompleted.length}Í±¥) ‚Üí
                      </Button>
                    )}
                  </div>
                )}
              </CardContent>
          </Card>
        </div>

        {/* Ïò§ÎäòÏùò ÏöîÏïΩ - ÏÉÅÎã® ÌÜµÍ≥ÑÏóê ÌÜµÌï© */}
      </div>
      
      {/* ÏäπÏù∏ ÏÉÅÏÑ∏Î≥¥Í∏∞ Î™®Îã¨ */}
      <PurchaseDetailModal
        purchaseId={selectedApprovalId}
        isOpen={isModalOpen}
        onClose={() => {
          setIsModalOpen(false)
          setSelectedApprovalId(null)
        }}
        currentUserRoles={currentUserRoles}
        onRefresh={() => {
          loadDashboardData()
          setIsModalOpen(false)
          setSelectedApprovalId(null)
          }}
      />
      
      {/* Íµ¨Îß§/ÏûÖÍ≥† ÏÉÅÌÉú ÏÉÅÏÑ∏Î≥¥Í∏∞ Î™®Îã¨ */}
      <PurchaseStatusModal
          isOpen={isStatusModalOpen}
          onClose={() => {
            setIsStatusModalOpen(false)
            setSelectedStatusItem(null)
            setStatusModalType(null)
          }}
          item={selectedStatusItem}
          type={statusModalType as any}
          onRefresh={() => loadDashboardData(false)}
      />

      {/* Order Detail Modal - PurchaseStatusModalÍ≥º ÎèôÏùºÌïú ÎîîÏûêÏù∏ */}
      {isOrderModalOpen && selectedOrder && (
        <Dialog open={isOrderModalOpen} onOpenChange={() => {
          setIsOrderModalOpen(false)
          setSelectedOrder(null)
        }}>
          <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="text-xl font-bold">
                {selectedOrder.purchase_order_number} ÏÉÅÏÑ∏Î≥¥Í∏∞
              </DialogTitle>
              <DialogDescription>
                {selectedOrder.vendor_name || 'ÏóÖÏ≤¥Î™Ö ÏóÜÏùå'}
              </DialogDescription>
            </DialogHeader>

            <div className="space-y-6">
              {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
              <div className="bg-gray-50 rounded-lg p-6">
                <h3 className="font-semibold mb-4 flex items-center text-gray-900">
                  <FileText className="w-5 h-5 mr-2 text-gray-700" />
                  Í∏∞Î≥∏ Ï†ïÎ≥¥
                </h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-6">
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÏöîÏ≤≠Ïûê</p>
                    <p className="font-medium text-gray-900">{selectedOrder.requester_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÏöîÏ≤≠Ïùº</p>
                    <p className="font-medium text-gray-900">
                      {new Date(selectedOrder.request_date || selectedOrder.created_at).toLocaleDateString('ko-KR')}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÎÇ©Í∏∞ÏöîÏ≤≠Ïùº</p>
                    <p className="font-medium text-gray-900">
                      {selectedOrder.delivery_request_date 
                        ? new Date(selectedOrder.delivery_request_date).toLocaleDateString('ko-KR')
                        : '-'}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">Í≤∞Ï†úÏú†Ìòï</p>
                    <p className="font-medium text-gray-900">{selectedOrder.payment_category || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÏßÑÌñâÍµ¨Î∂Ñ</p>
                    <p className="font-medium text-gray-900">{selectedOrder.progress_type || 'ÏùºÎ∞ò'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÏÉÅÌÉú</p>
                    <p className="font-medium">
                      <Badge className="bg-orange-50 text-orange-700 border-orange-200">
                        ÎØ∏Îã§Ïö¥Î°úÎìú
                      </Badge>
                    </p>
                  </div>
                </div>
              </div>

              {/* ÏóÖÏ≤¥ Ï†ïÎ≥¥ */}
              <div className="bg-gray-50 rounded-lg p-6">
                <h3 className="font-semibold mb-4 flex items-center text-gray-900">
                  <Building2 className="w-5 h-5 mr-2 text-gray-700" />
                  ÏóÖÏ≤¥ Ï†ïÎ≥¥
                </h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-6">
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÏóÖÏ≤¥Î™Ö</p>
                    <p className="font-medium text-gray-900">{selectedOrder.vendor_name || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÌîÑÎ°úÏ†ùÌä∏ ÏóÖÏ≤¥</p>
                    <p className="font-medium text-gray-900">{selectedOrder.project_vendor || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÌåêÎß§Ï£ºÎ¨∏Î≤àÌò∏</p>
                    <p className="font-medium text-gray-900">{selectedOrder.sales_order_number || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÌîÑÎ°úÏ†ùÌä∏ ÌíàÎ™©</p>
                    <p className="font-medium text-gray-900">{selectedOrder.project_item || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">Î∞úÏ£ºÏÑú ÌÖúÌîåÎ¶ø</p>
                    <p className="font-medium text-gray-900">{selectedOrder.po_template_type || 'ÏùºÎ∞ò'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-500 mb-1">ÌÜµÌôî</p>
                    <p className="font-medium text-gray-900">{selectedOrder.currency || 'KRW'}</p>
                  </div>
                </div>
              </div>

              {/* ÌíàÎ™© Î¶¨Ïä§Ìä∏ */}
              <div className="bg-gray-50 rounded-lg p-6">
                <h3 className="font-semibold mb-4 flex items-center text-gray-900">
                  <Package className="w-5 h-5 mr-2 text-gray-700" />
                  ÌíàÎ™© Î¶¨Ïä§Ìä∏
                </h3>
                <div className="overflow-x-auto">
                  <table className="min-w-full bg-white rounded-lg overflow-hidden shadow-sm">
                    <thead className="bg-gray-100">
                      <tr>
                        <th className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">ÌíàÎ™Ö</th>
                        <th className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">Í∑úÍ≤©</th>
                        <th className="px-4 py-3 text-center text-xs font-semibold text-gray-600 uppercase tracking-wider">ÏàòÎüâ</th>
                        <th className="px-4 py-3 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider">Îã®Í∞Ä</th>
                        <th className="px-4 py-3 text-right text-xs font-semibold text-gray-600 uppercase tracking-wider">Í∏àÏï°</th>
                        <th className="px-4 py-3 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">ÎπÑÍ≥†</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {(selectedOrder.purchase_request_items || []).map((pItem: any, index: number) => {
                        const unitPrice = pItem.quantity > 0 ? (Number(pItem.amount_value) || 0) / pItem.quantity : 0
                        return (
                          <tr key={index} className="hover:bg-gray-50 transition-colors">
                            <td className="px-4 py-3">
                              <span className="text-sm font-medium text-gray-900">{pItem.item_name || 'ÌíàÎ™©Î™Ö ÏóÜÏùå'}</span>
                            </td>
                            <td className="px-4 py-3">
                              <span className="text-sm text-gray-600">{pItem.specification || '-'}</span>
                            </td>
                            <td className="px-4 py-3 text-center">
                              <span className="text-sm font-medium text-gray-900">{pItem.quantity || 0}</span>
                            </td>
                            <td className="px-4 py-3 text-right">
                              <span className="text-sm text-gray-900">‚Ç©{unitPrice.toLocaleString()}</span>
                            </td>
                            <td className="px-4 py-3 text-right">
                              <span className="text-sm font-semibold text-gray-900">‚Ç©{(Number(pItem.amount_value) || 0).toLocaleString()}</span>
                            </td>
                            <td className="px-4 py-3">
                              <span className="text-sm text-gray-600">{pItem.remark || '-'}</span>
                            </td>
                          </tr>
                        )
                      })}
                    </tbody>
                  </table>
                </div>

                {/* Ï¥ùÏï° */}
                <div className="mt-6 bg-white rounded-lg p-4 shadow-sm">
                  <div className="flex justify-between items-center">
                    <div>
                      <span className="text-sm text-gray-600">Ï¥ù</span>
                      <span className="ml-1 font-semibold text-gray-900">
                        {(selectedOrder.purchase_request_items || []).reduce((sum: number, i: any) => sum + (Number(i.quantity) || 0), 0)}Í∞ú
                      </span>
                      <span className="text-sm text-gray-600 ml-1">Ìï≠Î™©</span>
                    </div>
                    <div className="text-right">
                      <span className="text-sm text-gray-600 block">Ï¥ùÏï°</span>
                      <span className="font-bold text-xl text-gray-900">
                        ‚Ç©{(selectedOrder.purchase_request_items || []).reduce((sum: number, i: any) => {
                          return sum + (Number(i.amount_value) || 0)
                        }, 0).toLocaleString()}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              {/* Î≤ÑÌäº ÏòÅÏó≠ */}
              <div className="flex justify-between gap-3 mt-6">
                <div className="flex gap-2">
                  <Button
                    onClick={() => handleDownloadExcel(selectedOrder)}
                    disabled={downloadingIds.has(selectedOrder.id)}
                    className="bg-orange-600 hover:bg-orange-700"
                    size="sm"
                  >
                    {downloadingIds.has(selectedOrder.id) ? (
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    ) : (
                      <Download className="w-4 h-4 mr-2" />
                    )}
                    Excel Îã§Ïö¥Î°úÎìú
                  </Button>
                </div>

                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={() => navigate(`/purchase/list?tab=purchase`)}
                    size="sm"
                  >
                    Î∞úÏ£º Î™©Î°ùÏóêÏÑú Î≥¥Í∏∞
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                  <Button
                    variant="ghost"
                    onClick={() => {
                      setIsOrderModalOpen(false)
                      setSelectedOrder(null)
                    }}
                    size="sm"
                  >
                    Îã´Í∏∞
                  </Button>
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  )
}