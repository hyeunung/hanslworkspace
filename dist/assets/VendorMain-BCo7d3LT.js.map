{"version":3,"mappings":"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","names":["vendorService","constructor","this","supabase","createClient","getVendors","filters","query","from","select","order","search","or","is_active","eq","data","error","success","logger","Error","message","getVendor","id","single","createVendor","vendorData","business_number","existingVendor","existingVendorByName","vendor_name","insert","updateVendor","neq","update","deleteVendor","purchaseRequests","limit","length","delete","toggleVendorStatus","currentVendor","selectError","getVendorContacts","vendorId","getVendorsForExport","map","vendor","representative","contact_phone","address","email","created_at","Date","toLocaleDateString","VendorFilters","onFiltersChange","onExport","onCreateNew","localSearch","setLocalSearch","useState","hasFilters","jsxs","className","children","jsx","Button","variant","onClick","Download","Plus","onSubmit","e","preventDefault","trim","Search","Input","type","placeholder","value","onChange","target","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","X","VendorTable","vendors","onEdit","onView","onRefresh","loadingId","setLoadingId","sortedData","sortConfig","handleSort","useTableSort","handleToggleStatus","async","result","toast","handleDelete","confirm","Fragment","Table","TableHeader","TableRow","TableHead","SortableHeader","sortKey","currentSortKey","key","sortDirection","direction","onSort","TableBody","TableCell","colSpan","Badge","vendor_contacts","slice","contact","idx","contact_name","contact_email","formatDate","DropdownMenu","DropdownMenuTrigger","asChild","disabled","MoreHorizontal","DropdownMenuContent","align","DropdownMenuItem","Eye","Edit","ToggleLeft","ToggleRight","Trash2","size","MobileCard","MobileCardHeader","MobileCardItem","label","MobileCardActions","VendorModal","isOpen","onClose","onSave","mode","isSubmitting","setIsSubmitting","form","useForm","defaultValues","useEffect","reset","isReadOnly","Dialog","open","onOpenChange","DialogContent","DialogHeader","DialogTitle","getTitle","Form","handleSubmit","FormField","control","name","rules","required","render","field","FormItem","FormLabel","FormControl","FormMessage","Textarea","DialogFooter","VendorMain","setVendors","filteredVendors","setFilteredVendors","loading","setLoading","setFilters","isModalOpen","setIsModalOpen","selectedVendor","setSelectedVendor","modalMode","setModalMode","loadVendors","XLSX","__vitePreload","import","__VITE_PRELOAD__","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","filename","toISOString","writeFile"],"ignoreList":[],"sources":["../../src/services/vendorService.ts","../../src/components/vendor/VendorFilters.tsx","../../src/components/vendor/VendorTable.tsx","../../src/components/vendor/VendorModal.tsx","../../src/components/vendor/VendorMain.tsx"],"sourcesContent":["import { createClient } from \"@/lib/supabase/client\";\nimport { Vendor, VendorFormData, VendorFilters, VendorContact } from \"@/types/purchase\";\nimport { logger } from \"@/lib/logger\";\n\nclass VendorService {\n  private supabase;\n\n  constructor() {\n    this.supabase = createClient();\n  }\n\n  // 업체 목록 조회\n  async getVendors(filters?: VendorFilters): Promise<{ success: boolean; data?: Vendor[]; error?: string }> {\n    try {\n      let query = this.supabase\n        .from('vendors')\n        .select('*,vendor_contacts(*)')\n        .order('vendor_name');\n\n      // 검색 필터 적용\n      if (filters?.search) {\n        query = query.or(`\n          vendor_name.ilike.%${filters.search}%,\n          business_number.ilike.%${filters.search}%,\n          representative.ilike.%${filters.search}%,\n          contact_phone.ilike.%${filters.search}%,\n          email.ilike.%${filters.search}%\n        `);\n      }\n\n      // 활성 상태 필터 적용\n      if (filters?.is_active !== undefined) {\n        query = query.eq('is_active', filters.is_active);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      logger.error('업체 목록 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 상세 조회\n  async getVendor(id: number): Promise<{ success: boolean; data?: Vendor; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('업체 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 생성\n  async createVendor(vendorData: VendorFormData): Promise<{ success: boolean; data?: Vendor; error?: string }> {\n    try {\n      // 사업자번호 중복 체크\n      if (vendorData.business_number) {\n        const { data: existingVendor } = await this.supabase\n          .from('vendors')\n          .select('id')\n          .eq('business_number', vendorData.business_number)\n          .single();\n\n        if (existingVendor) {\n          return { success: false, error: '이미 등록된 사업자번호입니다.' };\n        }\n      }\n\n      // 업체명 중복 체크\n      const { data: existingVendorByName } = await this.supabase\n        .from('vendors')\n        .select('id')\n        .eq('vendor_name', vendorData.vendor_name)\n        .single();\n\n      if (existingVendorByName) {\n        return { success: false, error: '이미 등록된 업체명입니다.' };\n      }\n\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .insert({\n          ...vendorData,\n          is_active: true\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('업체 생성 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 수정\n  async updateVendor(id: number, vendorData: Partial<VendorFormData>): Promise<{ success: boolean; data?: Vendor; error?: string }> {\n    try {\n      // 사업자번호 중복 체크 (자신 제외)\n      if (vendorData.business_number) {\n        const { data: existingVendor } = await this.supabase\n          .from('vendors')\n          .select('id')\n          .eq('business_number', vendorData.business_number)\n          .neq('id', id)\n          .single();\n\n        if (existingVendor) {\n          return { success: false, error: '이미 등록된 사업자번호입니다.' };\n        }\n      }\n\n      // 업체명 중복 체크 (자신 제외)\n      if (vendorData.vendor_name) {\n        const { data: existingVendorByName } = await this.supabase\n          .from('vendors')\n          .select('id')\n          .eq('vendor_name', vendorData.vendor_name)\n          .neq('id', id)\n          .single();\n\n        if (existingVendorByName) {\n          return { success: false, error: '이미 등록된 업체명입니다.' };\n        }\n      }\n\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .update(vendorData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('업체 수정 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 삭제 (소프트 삭제)\n  async deleteVendor(id: number): Promise<{ success: boolean; error?: string }> {\n    try {\n      // 발주 요청과 연결된 업체인지 확인\n      const { data: purchaseRequests } = await this.supabase\n        .from('purchase_requests')\n        .select('id')\n        .eq('vendor_id', id)\n        .limit(1);\n\n      if (purchaseRequests && purchaseRequests.length > 0) {\n        // 발주 요청과 연결된 업체는 비활성화만 가능\n        const { error } = await this.supabase\n          .from('vendors')\n          .update({ is_active: false })\n          .eq('id', id);\n\n        if (error) throw error;\n\n        return { success: true };\n      } else {\n        // 연결된 데이터가 없으면 완전 삭제\n        const { error } = await this.supabase\n          .from('vendors')\n          .delete()\n          .eq('id', id);\n\n        if (error) throw error;\n\n        return { success: true };\n      }\n    } catch (error) {\n      logger.error('업체 삭제 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 활성화/비활성화 토글\n  async toggleVendorStatus(id: number): Promise<{ success: boolean; data?: Vendor; error?: string }> {\n    try {\n      // 현재 상태 조회\n      const { data: currentVendor, error: selectError } = await this.supabase\n        .from('vendors')\n        .select('is_active')\n        .eq('id', id)\n        .single();\n\n      if (selectError) throw selectError;\n\n      // 상태 토글\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .update({ is_active: !currentVendor.is_active })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('업체 상태 변경 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 연락처 조회\n  async getVendorContacts(vendorId: number): Promise<{ success: boolean; data?: VendorContact[]; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('vendor_contacts')\n        .select('*')\n        .eq('vendor_id', vendorId)\n        .order('contact_name');\n\n      if (error) throw error;\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      logger.error('업체 연락처 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // Excel 내보내기용 데이터 준비\n  async getVendorsForExport(): Promise<{ success: boolean; data?: Array<Record<string, string>>; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .select('*')\n        .order('vendor_name');\n\n      if (error) throw error;\n\n      // Excel 형식에 맞게 데이터 변환\n      const exportData = (data || []).map(vendor => ({\n        '업체명': vendor.vendor_name,\n        '사업자번호': vendor.business_number || '',\n        '대표자': vendor.representative || '',\n        '연락처': vendor.contact_phone || '',\n        '주소': vendor.address || '',\n        '이메일': vendor.email || '',\n        '상태': vendor.is_active ? '활성' : '비활성',\n        '등록일': vendor.created_at ? new Date(vendor.created_at).toLocaleDateString('ko-KR') : ''\n      }));\n\n      return { success: true, data: exportData };\n    } catch (error) {\n      logger.error('업체 Excel 내보내기 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n}\n\nexport const vendorService = new VendorService();","\nimport { useState } from 'react'\nimport { VendorFilters as VendorFiltersType } from '@/types/purchase'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Search, X, Download, Plus } from 'lucide-react'\n\ninterface VendorFiltersProps {\n  filters: VendorFiltersType\n  onFiltersChange: (filters: VendorFiltersType) => void\n  onExport: () => void\n  onCreateNew: () => void\n}\n\nexport default function VendorFilters({ \n  filters, \n  onFiltersChange, \n  onExport,\n  onCreateNew \n}: VendorFiltersProps) {\n  const [localSearch, setLocalSearch] = useState(filters.search || '')\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onFiltersChange({\n      ...filters,\n      search: localSearch.trim() || undefined\n    })\n  }\n\n  const handleStatusChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      is_active: value === 'all' ? undefined : value === 'active'\n    })\n  }\n\n  const clearFilters = () => {\n    setLocalSearch('')\n    onFiltersChange({})\n  }\n\n  const hasFilters = filters.search || filters.is_active !== undefined\n\n  return (\n    <div className=\"space-y-4\">\n      {/* 상단 액션 버튼 */}\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n        <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">업체 관리</h2>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onExport}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Download className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            <span className=\"hidden sm:inline\">Excel 내보내기</span>\n            <span className=\"sm:hidden\">Excel</span>\n          </Button>\n          <Button \n            onClick={onCreateNew}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Plus className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            업체 등록\n          </Button>\n        </div>\n      </div>\n\n      {/* 필터 섹션 */}\n      <div className=\"bg-white p-3 sm:p-4 rounded-lg border space-y-4\">\n        <form onSubmit={handleSearchSubmit} className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 sm:items-end\">\n          {/* 검색 */}\n          <div className=\"flex-1\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              검색\n            </label>\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 sm:left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-3 h-3 sm:w-4 sm:h-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"업체명, 사업자번호, 연락처 검색\"\n                value={localSearch}\n                onChange={(e) => setLocalSearch(e.target.value)}\n                className=\"pl-8 sm:pl-10 text-sm h-9\"\n              />\n            </div>\n          </div>\n\n          {/* 상태 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[120px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              상태\n            </label>\n            <Select\n              value={\n                filters.is_active === undefined \n                  ? 'all' \n                  : filters.is_active \n                    ? 'active' \n                    : 'inactive'\n              }\n              onValueChange={handleStatusChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체</SelectItem>\n                <SelectItem value=\"active\">활성</SelectItem>\n                <SelectItem value=\"inactive\">비활성</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 검색 및 초기화 버튼 */}\n          <div className=\"flex gap-2 w-full sm:w-auto\">\n            <Button type=\"submit\" className=\"flex-1 sm:flex-none h-9 text-sm\">\n              검색\n            </Button>\n            {hasFilters && (\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={clearFilters}\n                className=\"flex items-center gap-1 h-9 text-sm\"\n              >\n                <X className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                <span className=\"hidden sm:inline\">초기화</span>\n                <span className=\"sm:hidden\">초기</span>\n              </Button>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","\nimport { useState } from 'react'\nimport { Vendor } from '@/types/purchase'\nimport { formatDate } from '@/utils/helpers'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { \n  MoreHorizontal, \n  Edit, \n  Trash2, \n  Eye, \n  ToggleLeft, \n  ToggleRight \n} from 'lucide-react'\nimport { vendorService } from '@/services/vendorService'\nimport { toast } from 'sonner'\nimport { useTableSort } from '@/hooks/useTableSort'\nimport { SortableHeader } from '@/components/ui/sortable-header'\nimport { MobileCard, MobileCardItem, MobileCardHeader, MobileCardActions } from '@/components/ui/mobile-card'\n\ninterface VendorTableProps {\n  vendors: Vendor[]\n  onEdit: (vendor: Vendor) => void\n  onView: (vendor: Vendor) => void\n  onRefresh: () => void\n}\n\nexport default function VendorTable({ vendors, onEdit, onView, onRefresh }: VendorTableProps) {\n  const [loadingId, setLoadingId] = useState<number | null>(null)\n  const { sortedData, sortConfig, handleSort } = useTableSort(vendors, 'vendor_name', 'asc')\n\n  const handleToggleStatus = async (vendor: Vendor) => {\n    setLoadingId(vendor.id)\n    try {\n      const result = await vendorService.toggleVendorStatus(vendor.id)\n      \n      if (result.success) {\n        toast.success(`업체가 ${vendor.is_active ? '비활성화' : '활성화'}되었습니다.`)\n        onRefresh()\n      } else {\n        toast.error(result.error || '상태 변경에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('상태 변경 중 오류가 발생했습니다.')\n    } finally {\n      setLoadingId(null)\n    }\n  }\n\n  const handleDelete = async (vendor: Vendor) => {\n    if (!confirm(`정말로 '${vendor.vendor_name}' 업체를 삭제하시겠습니까?`)) {\n      return\n    }\n\n    setLoadingId(vendor.id)\n    try {\n      const result = await vendorService.deleteVendor(vendor.id)\n      \n      if (result.success) {\n        toast.success('업체가 삭제되었습니다.')\n        onRefresh()\n      } else {\n        toast.error(result.error || '삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('삭제 중 오류가 발생했습니다.')\n    } finally {\n      setLoadingId(null)\n    }\n  }\n\n  // formatDate는 utils/helpers.ts에서 import\n\n  return (\n    <>\n      {/* Desktop Table View */}\n      <div className=\"hidden lg:block border rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"w-24 min-w-[80px] lg:w-32\">\n              <SortableHeader\n                sortKey=\"vendor_name\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('vendor_name' as keyof Vendor)}\n              >\n                업체명\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-16 min-w-[50px] text-center\">담당자</TableHead>\n            <TableHead className=\"min-w-[200px]\">담당자 정보</TableHead>\n            <TableHead className=\"w-20 min-w-[60px]\">\n              <SortableHeader\n                sortKey=\"created_at\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('created_at' as keyof Vendor)}\n              >\n                등록일\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-14 min-w-[45px] text-center\">작업</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {vendors.length === 0 ? (\n            <TableRow>\n              <TableCell colSpan={5} className=\"text-center py-8 text-gray-500\">\n                등록된 업체가 없습니다.\n              </TableCell>\n            </TableRow>\n          ) : (\n            sortedData.map((vendor) => (\n              <TableRow key={vendor.id}>\n                <TableCell className=\"font-medium text-[11px] px-2 py-1.5\">\n                  {vendor.vendor_name}\n                </TableCell>\n                <TableCell className=\"text-center text-[11px] px-1 py-1.5\">\n                  <Badge variant=\"outline\" className=\"text-[10px] px-1 py-0\">\n                    {vendor.vendor_contacts?.length || 0}명\n                  </Badge>\n                </TableCell>\n                <TableCell className=\"px-2 py-1.5\">\n                  <div className=\"space-y-0.5\">\n                    {vendor.vendor_contacts && vendor.vendor_contacts.length > 0 ? (\n                      vendor.vendor_contacts.slice(0, 2).map((contact: any, idx: number) => (\n                        <div key={idx} className=\"text-[10px]\">\n                          <span className=\"font-medium\">{contact.contact_name}</span>\n                          <span className=\"text-gray-500 ml-1\">{contact.contact_phone}</span>\n                          {contact.contact_email && (\n                            <span className=\"text-gray-500 ml-1 truncate inline-block max-w-[180px]\">{contact.contact_email}</span>\n                          )}\n                        </div>\n                      ))\n                    ) : (\n                      <span className=\"text-gray-400 text-[10px]\">담당자 없음</span>\n                    )}\n                    {vendor.vendor_contacts && vendor.vendor_contacts.length > 2 && (\n                      <span className=\"text-[10px] text-gray-500\">외 {vendor.vendor_contacts.length - 2}명</span>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{formatDate(vendor.created_at)}</TableCell>\n                <TableCell className=\"px-1 py-1.5 text-center\">\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"h-7 w-7 p-0\"\n                        disabled={loadingId === vendor.id}\n                      >\n                        <MoreHorizontal className=\"h-3 w-3\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem onClick={() => onView(vendor)}>\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        상세 보기\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => onEdit(vendor)}>\n                        <Edit className=\"mr-2 h-4 w-4\" />\n                        수정\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => handleToggleStatus(vendor)}>\n                        {vendor.is_active ? (\n                          <>\n                            <ToggleLeft className=\"mr-2 h-4 w-4\" />\n                            비활성화\n                          </>\n                        ) : (\n                          <>\n                            <ToggleRight className=\"mr-2 h-4 w-4\" />\n                            활성화\n                          </>\n                        )}\n                      </DropdownMenuItem>\n                      <DropdownMenuItem \n                        onClick={() => handleDelete(vendor)}\n                        className=\"text-red-600\"\n                      >\n                        <Trash2 className=\"mr-2 h-4 w-4\" />\n                        삭제\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n          </Table>\n        </div>\n      </div>\n\n      {/* Tablet View */}\n      <div className=\"hidden md:block lg:hidden\">\n        <div className=\"overflow-x-auto border rounded-lg\">\n          <table className=\"w-full min-w-[600px]\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm\">업체명</th>\n                <th className=\"text-center p-3 font-medium text-gray-900 text-sm w-20\">담당자</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm\">연락처</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-24\">등록일</th>\n                <th className=\"text-center p-3 font-medium text-gray-900 text-sm w-16\">작업</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {sortedData.length === 0 ? (\n                <tr>\n                  <td colSpan={5} className=\"text-center py-8 text-gray-500\">\n                    등록된 업체가 없습니다.\n                  </td>\n                </tr>\n              ) : (\n                sortedData.map((vendor) => (\n                  <tr key={vendor.id} className=\"hover:bg-gray-50\">\n                    <td className=\"p-3 font-medium text-sm\">{vendor.vendor_name}</td>\n                    <td className=\"p-3 text-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {vendor.vendor_contacts?.length || 0}명\n                      </Badge>\n                    </td>\n                    <td className=\"p-3 text-sm\">\n                      {vendor.vendor_contacts && vendor.vendor_contacts.length > 0 ? (\n                        <div>\n                          <div className=\"font-medium\">{vendor.vendor_contacts[0].contact_name}</div>\n                          <div className=\"text-gray-500 text-xs\">{vendor.vendor_contacts[0].contact_phone}</div>\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">담당자 없음</span>\n                      )}\n                    </td>\n                    <td className=\"p-3 text-sm\">{formatDate(vendor.created_at)}</td>\n                    <td className=\"p-3 text-center\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => onView(vendor)}>\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            상세 보기\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => onEdit(vendor)}>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            수정\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => handleToggleStatus(vendor)}>\n                            {vendor.is_active ? (\n                              <>\n                                <ToggleLeft className=\"mr-2 h-4 w-4\" />\n                                비활성화\n                              </>\n                            ) : (\n                              <>\n                                <ToggleRight className=\"mr-2 h-4 w-4\" />\n                                활성화\n                              </>\n                            )}\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => handleDelete(vendor)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            삭제\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Mobile Card View */}\n      <div className=\"block md:hidden space-y-3\">\n        {sortedData.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            등록된 업체가 없습니다.\n          </div>\n        ) : (\n          sortedData.map((vendor) => (\n            <MobileCard key={vendor.id}>\n              <MobileCardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <span>{vendor.vendor_name}</span>\n                  <Badge variant=\"outline\">\n                    {vendor.vendor_contacts?.length || 0}명\n                  </Badge>\n                </div>\n              </MobileCardHeader>\n              \n              <MobileCardItem \n                label=\"담당자\" \n                value={\n                  <div className=\"space-y-1\">\n                    {vendor.vendor_contacts && vendor.vendor_contacts.length > 0 ? (\n                      vendor.vendor_contacts.slice(0, 2).map((contact: any, idx: number) => (\n                        <div key={idx} className=\"text-sm\">\n                          <div className=\"font-medium\">{contact.contact_name}</div>\n                          <div className=\"text-gray-500 text-xs\">{contact.contact_phone}</div>\n                          {contact.contact_email && (\n                            <div className=\"text-gray-500 text-xs\">{contact.contact_email}</div>\n                          )}\n                        </div>\n                      ))\n                    ) : (\n                      <span className=\"text-gray-400\">담당자 없음</span>\n                    )}\n                    {vendor.vendor_contacts && vendor.vendor_contacts.length > 2 && (\n                      <span className=\"text-sm text-gray-500\">외 {vendor.vendor_contacts.length - 2}명</span>\n                    )}\n                  </div>\n                } \n              />\n              <MobileCardItem label=\"등록일\" value={formatDate(vendor.created_at)} />\n              \n              <MobileCardActions>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => onView(vendor)}\n                >\n                  <Eye className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => onEdit(vendor)}\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => handleToggleStatus(vendor)}\n                  disabled={loadingId === vendor.id}\n                >\n                  {vendor.is_active ? (\n                    <ToggleLeft className=\"w-4 h-4\" />\n                  ) : (\n                    <ToggleRight className=\"w-4 h-4\" />\n                  )}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"text-red-600\"\n                  onClick={() => handleDelete(vendor)}\n                  disabled={loadingId === vendor.id}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </MobileCardActions>\n            </MobileCard>\n          ))\n        )}\n      </div>\n    </>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Vendor, VendorFormData } from '@/types/purchase'\nimport { Button } from '@/components/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useForm } from 'react-hook-form'\nimport { vendorService } from '@/services/vendorService'\nimport { toast } from 'sonner'\n\ninterface VendorModalProps {\n  isOpen: boolean\n  onClose: () => void\n  vendor?: Vendor | null\n  onSave: () => void\n  mode: 'create' | 'edit' | 'view'\n}\n\nexport default function VendorModal({ isOpen, onClose, vendor, onSave, mode }: VendorModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const form = useForm<VendorFormData>({\n    defaultValues: {\n      vendor_name: '',\n      business_number: '',\n      representative: '',\n      contact_phone: '',\n      address: '',\n      email: '',\n    }\n  })\n\n  useEffect(() => {\n    if (vendor && isOpen) {\n      form.reset({\n        vendor_name: vendor.vendor_name || '',\n        business_number: vendor.business_number || '',\n        representative: vendor.representative || '',\n        contact_phone: vendor.contact_phone || '',\n        address: vendor.address || '',\n        email: vendor.email || '',\n      })\n    } else if (!vendor && isOpen) {\n      form.reset({\n        vendor_name: '',\n        business_number: '',\n        representative: '',\n        contact_phone: '',\n        address: '',\n        email: '',\n      })\n    }\n  }, [vendor, isOpen, form])\n\n  const onSubmit = async (data: VendorFormData) => {\n    setIsSubmitting(true)\n    \n    try {\n      let result\n      \n      if (mode === 'create') {\n        result = await vendorService.createVendor(data)\n      } else if (mode === 'edit' && vendor) {\n        result = await vendorService.updateVendor(vendor.id, data)\n      }\n\n      if (result?.success) {\n        toast.success(mode === 'create' ? '업체가 등록되었습니다.' : '업체 정보가 수정되었습니다.')\n        onSave()\n        onClose()\n      } else {\n        toast.error(result?.error || '처리 중 오류가 발생했습니다.')\n      }\n    } catch (error) {\n      toast.error('처리 중 오류가 발생했습니다.')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const getTitle = () => {\n    switch (mode) {\n      case 'create': return '업체 등록'\n      case 'edit': return '업체 수정'\n      case 'view': return '업체 상세'\n      default: return '업체'\n    }\n  }\n\n  const isReadOnly = mode === 'view'\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-[95vw] sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{getTitle()}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"vendor_name\"\n                rules={{\n                  required: '업체명을 입력해주세요.'\n                }}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>업체명 *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"업체명을 입력하세요\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"business_number\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>사업자번호</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"000-00-00000\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"representative\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>대표자</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"대표자명을 입력하세요\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"contact_phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>연락처</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"010-0000-0000\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>이메일</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"email\"\n                        placeholder=\"company@example.com\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>주소</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"주소를 입력하세요\"\n                      className=\"min-h-[80px]\"\n                      disabled={isReadOnly}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {mode === 'view' && vendor && (\n              <div className=\"pt-4 border-t\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-500\">상태:</span>\n                    <span className={`ml-2 px-2 py-1 rounded text-xs ${\n                      vendor.is_active \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-gray-100 text-gray-600'\n                    }`}>\n                      {vendor.is_active ? '활성' : '비활성'}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">등록일:</span>\n                    <span className=\"ml-2\">\n                      {vendor.created_at ? new Date(vendor.created_at).toLocaleDateString('ko-KR') : '-'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <DialogFooter className=\"gap-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                {mode === 'view' ? '닫기' : '취소'}\n              </Button>\n              {!isReadOnly && (\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting \n                    ? (mode === 'create' ? '등록 중...' : '수정 중...')\n                    : (mode === 'create' ? '등록' : '수정')\n                  }\n                </Button>\n              )}\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Vendor, VendorFilters as VendorFiltersType } from '@/types/purchase'\nimport { vendorService } from '@/services/vendorService'\nimport VendorFilters from '@/components/vendor/VendorFilters'\nimport VendorTable from '@/components/vendor/VendorTable'\nimport VendorModal from '@/components/vendor/VendorModal'\nimport { toast } from 'sonner'\n// XLSX는 사용할 때만 동적으로 import (성능 최적화)\n\ntype ModalMode = 'create' | 'edit' | 'view'\n\nexport default function VendorMain() {\n  const [vendors, setVendors] = useState<Vendor[]>([])\n  const [filteredVendors, setFilteredVendors] = useState<Vendor[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filters, setFilters] = useState<VendorFiltersType>({})\n  \n  // 모달 상태\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [selectedVendor, setSelectedVendor] = useState<Vendor | null>(null)\n  const [modalMode, setModalMode] = useState<ModalMode>('create')\n\n  // 업체 목록 로드\n  const loadVendors = async () => {\n    setLoading(true)\n    try {\n      const result = await vendorService.getVendors(filters)\n      \n      if (result.success && result.data) {\n        setVendors(result.data)\n        setFilteredVendors(result.data)\n      } else {\n        toast.error(result.error || '업체 목록을 불러오는데 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('업체 목록을 불러오는 중 오류가 발생했습니다.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 필터 변경 시 업체 목록 로드 (초기 로드 포함)\n  useEffect(() => {\n    loadVendors()\n  }, [filters])\n\n  // 모달 핸들러\n  const handleCreateNew = () => {\n    setSelectedVendor(null)\n    setModalMode('create')\n    setIsModalOpen(true)\n  }\n\n  const handleEdit = (vendor: Vendor) => {\n    setSelectedVendor(vendor)\n    setModalMode('edit')\n    setIsModalOpen(true)\n  }\n\n  const handleView = (vendor: Vendor) => {\n    setSelectedVendor(vendor)\n    setModalMode('view')\n    setIsModalOpen(true)\n  }\n\n  const handleModalClose = () => {\n    setIsModalOpen(false)\n    setSelectedVendor(null)\n  }\n\n  const handleSave = () => {\n    loadVendors()\n  }\n\n  // Excel 내보내기 (동적 import로 성능 최적화)\n  const handleExport = async () => {\n    try {\n      const result = await vendorService.getVendorsForExport()\n      \n      if (result.success && result.data) {\n        // XLSX를 사용할 때만 동적으로 import\n        const XLSX = await import('xlsx')\n        \n        const ws = XLSX.utils.json_to_sheet(result.data)\n        const wb = XLSX.utils.book_new()\n        XLSX.utils.book_append_sheet(wb, ws, '업체 목록')\n        \n        // 파일명에 현재 날짜 추가\n        const today = new Date().toISOString().slice(0, 10)\n        const filename = `업체_목록_${today}.xlsx`\n        \n        XLSX.writeFile(wb, filename)\n        toast.success('Excel 파일이 다운로드되었습니다.')\n      } else {\n        toast.error(result.error || 'Excel 내보내기에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('Excel 내보내기 중 오류가 발생했습니다.')\n    }\n  }\n\n  if (loading && vendors.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">업체 목록을 불러오는 중...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n      {/* 필터 섹션 */}\n      <VendorFilters\n        filters={filters}\n        onFiltersChange={setFilters}\n        onExport={handleExport}\n        onCreateNew={handleCreateNew}\n      />\n\n      {/* 테이블 섹션 */}\n      <div className=\"bg-white rounded-lg border\">\n        <div className=\"p-4 border-b\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center gap-3\">\n              <h3 className=\"text-lg font-medium\">업체 목록</h3>\n              <span className=\"px-3 py-1 bg-blue-50 text-blue-600 text-sm font-semibold rounded-full\">\n                총 {filteredVendors.length}개\n              </span>\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              {loading && '업데이트 중...'}\n            </div>\n          </div>\n        </div>\n        \n        <VendorTable\n          vendors={filteredVendors}\n          onEdit={handleEdit}\n          onView={handleView}\n          onRefresh={loadVendors}\n        />\n      </div>\n\n      {/* 모달 */}\n      <VendorModal\n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n        vendor={selectedVendor}\n        onSave={handleSave}\n        mode={modalMode}\n      />\n      </div>\n    </>\n  )\n}"],"file":"assets/VendorMain-BCo7d3LT.js"}