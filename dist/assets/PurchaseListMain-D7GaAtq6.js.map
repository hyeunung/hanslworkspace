{"version":3,"mappings":"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","names":["globalCache","purchases","vendors","employees","lastFetch","userInfo","CACHE_DURATION","HIDDEN_EMPLOYEES","filterCache","Map","useFastPurchaseFilters","currentUserRoles","currentUserName","currentUserId","currentUserEmail","createClient","activeTab","setActiveTab","useState","searchTerm","setSearchTerm","vendorFilter","setVendorFilter","selectedEmployee","setSelectedEmployee","purchaseNumberFilter","setPurchaseNumberFilter","itemNameFilter","setItemNameFilter","specificationFilter","setSpecificationFilter","approvalStatusFilter","setApprovalStatusFilter","remarkFilter","setRemarkFilter","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","isAdmin","includes","isPurchaseManager","isLeadBuyer","roleCase","useMemo","length","some","r","computeDefaultEmployee","useCallback","tabKey","defaultEmployee","visiblePurchases","cacheKey","join","has","get","result","filter","p","requester_name","size","firstKey","keys","next","delete","set","error","clear","tabFilteredPurchases","purchase","matches","middlePending","middle_manager_status","finalPending","final_manager_status","middleRejected","finalRejected","isRequest","payment_category","notPaid","is_payment_completed","isSeonJin","progress_type","isIlban","finalApproved","notReceived","is_received","employeeFilteredPurchases","vendorFilteredPurchases","vendor_name","additionalFilteredPurchases","filtered","term","trim","toLowerCase","purchase_order_number","items","item","item_name","specification","remark","searchFilteredPurchases","project_vendor","filteredPurchases","sort","a","b","dateA","request_date","Date","getTime","tabCounts","countPurchases","getUniqueOrderCount","Set","map","getFilteredDataForTab","pendingData","purchaseData","receiptData","doneData","pendingFiltered","purchaseFiltered","receiptFiltered","pending","receipt","done","FastPurchaseTable","lazy","__vitePreload","import","__VITE_PRELOAD__","TableSkeleton","memo","jsx","className","children","Array","_","i","jsxs","displayName","LazyPurchaseTable","onRefresh","onPaymentComplete","onReceiptComplete","Suspense","fallback","PurchaseItemsModal","NAV_TABS","key","label","PurchaseListMain","onEmailToggle","showEmailButton","navigate","useNavigate","location","useLocation","supabase","editingId","setEditingId","editingData","setEditingData","selectedPurchase","setSelectedPurchase","isModalOpen","setIsModalOpen","loading","refreshPurchases","loadPurchases","setPurchases","setVendors","setEmployees","setLoading","setCurrentUserRoles","setCurrentUserName","setCurrentUserEmail","setCurrentUserId","initializationRef","useRef","async","current","now","cacheValid","employeeData","roles","purchase_role","isArray","String","split","name","full_name","email","id","logger","vendorResult","employeeResult","userResult","Promise","all","from","select","auth","getUser","vendorData","data","user","eq","maybeSingle","loadInitialData","forceRefresh","employeeList","empData","authError","toast","order","ascending","limit","today","toISOString","processedData","d","startsWith","request","firstItem","purchase_request_items","requesterEmployee","find","emp","requester_id","Number","delivery_request_date","payment_completed_at","currency","request_type","vendor","vendor_payment_schedule","vendor_contacts","requester_full_name","quantity","unit_price_value","amount_value","sales_order_number","project_item","line_number","contact_name","received_at","is_po_download","link","total_amount","reduce","sum","purchase_status","usePurchaseData","URLSearchParams","search","style","marginTop","marginBottom","Button","onClick","Plus","tab","Badge","variant","Card","CardContent","Package","purchaseId","update","success","delivery_status","isOpen","onClose","onUpdate"],"ignoreList":[],"sources":["../../src/hooks/usePurchaseData.ts","../../src/hooks/useFastPurchaseFilters.ts","../../src/hooks/useDebounce.ts","../../src/components/purchase/LazyPurchaseTable.tsx","../../src/components/purchase/PurchaseListMain.tsx"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport { createClient } from '@/lib/supabase/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\nexport interface Purchase {\n  id: number;\n  purchase_order_number?: string;\n  request_date: string;\n  delivery_request_date?: string;\n  progress_type: string;\n  is_payment_completed: boolean;\n  payment_category: string;\n  payment_completed_at?: string;\n  currency: string;\n  request_type: string;\n  vendor?: {\n    vendor_name: string;\n    vendor_payment_schedule?: string;\n  };\n  vendor_name: string;\n  vendor_payment_schedule?: string;\n  vendor_id?: number;\n  contact_id?: number;\n  vendor_contacts?: {\n    contact_name: string;\n  } | Array<{\n    contact_name: string;\n  }>;\n  contact_name?: string;\n  requester_id: string;\n  requester_name: string;\n  requester_full_name: string;\n  project_vendor: string;\n  sales_order_number: string;\n  project_item: string;\n  middle_manager_status?: string;\n  final_manager_status?: string;\n  total_amount: number;\n  is_received: boolean;\n  received_at?: string;\n\n  is_po_download?: boolean;\n  items?: any[];\n  purchase_request_items?: any[];\n  item_name?: string;\n  specification?: string;\n  quantity?: number;\n  unit_price_value?: number;\n  amount_value?: number;\n  remark?: string;\n  line_number?: number;\n  link?: string;\n  purchase_status?: string;\n}\n\nexport interface Vendor {\n  id: number;\n  vendor_name: string;\n  vendor_contacts?: any[];\n}\n\nexport interface Employee {\n  id: string;\n  name: string;\n  email: string;\n  full_name?: string;\n}\n\n// 캐시 관리\nconst globalCache = {\n  purchases: null as Purchase[] | null,\n  vendors: null as Vendor[] | null,\n  employees: null as Employee[] | null,\n  lastFetch: 0,\n  userInfo: null as any,\n  CACHE_DURATION: 2 * 60 * 1000 // 2분 캐싱으로 성능 향상\n};\n\n// 캐시 강제 초기화 함수 (디버깅용)\nexport const clearPurchaseCache = () => {\n  globalCache.purchases = null;\n  globalCache.vendors = null;\n  globalCache.employees = null;\n  globalCache.userInfo = null;\n  globalCache.lastFetch = 0;\n};\n\nexport const usePurchaseData = () => {\n  const [purchases, setPurchases] = useState<Purchase[]>([]);\n  const [vendors, setVendors] = useState<Vendor[]>([]);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentUserRoles, setCurrentUserRoles] = useState<string[]>([]);\n  const [currentUserName, setCurrentUserName] = useState<string>('');\n  const [currentUserEmail, setCurrentUserEmail] = useState<string>('');\n  const [currentUserId, setCurrentUserId] = useState<string>('');\n  \n  const supabase = createClient();\n  const initializationRef = useRef(false);\n\n  // 초기 데이터 로드 (업체 목록, 사용자 권한) - 캐싱 적용\n  useEffect(() => {\n    const loadInitialData = async () => {\n      if (initializationRef.current) return;\n      initializationRef.current = true;\n      \n      const now = Date.now();\n      const cacheValid = globalCache.lastFetch && (now - globalCache.lastFetch) < globalCache.CACHE_DURATION;\n      \n      try {\n        // 캐시된 데이터가 유효한 경우 사용\n        if (cacheValid && globalCache.vendors && globalCache.employees && globalCache.userInfo) {\n          try {\n            setVendors(globalCache.vendors);\n            setEmployees(globalCache.employees);\n            \n            const employeeData = globalCache.userInfo;\n            if (employeeData) {\n              let roles: string[] = [];\n              if (employeeData.purchase_role) {\n                if (Array.isArray(employeeData.purchase_role)) {\n                  roles = employeeData.purchase_role.map((r: any) => String(r).trim());\n                } else {\n                  const roleString = String(employeeData.purchase_role);\n                  roles = roleString\n                    .split(',')\n                    .map((r: string) => r.trim())\n                    .filter((r: string) => r.length > 0);\n                }\n              }\n              \n              setCurrentUserRoles(roles);\n              setCurrentUserName(employeeData.name || employeeData.full_name || '');\n              setCurrentUserEmail(employeeData.email || '');\n              setCurrentUserId(employeeData.id || '');\n            }\n            return;\n          } catch (error) {\n            logger.error('캐시 데이터 사용 중 오류', error);\n            // 캐시 초기화\n            globalCache.purchases = null;\n            globalCache.vendors = null;\n            globalCache.employees = null;\n            globalCache.userInfo = null;\n            globalCache.lastFetch = 0;\n          }\n        }\n        \n        // 캐시가 없거나 만료된 경우 새로 로드\n        const [vendorResult, employeeResult, userResult] = await Promise.all([\n          supabase.from('vendors').select('*'),\n          supabase.from('employees').select('*'),\n          supabase.auth.getUser()\n        ]);\n\n        if (vendorResult.error) {\n          throw vendorResult.error;\n        }\n        const vendorData = vendorResult.data || [];\n        setVendors(vendorData);\n        globalCache.vendors = vendorData;\n        \n        if (employeeResult.error) {\n          throw employeeResult.error;\n        }\n        const employeeData = employeeResult.data || [];\n        setEmployees(employeeData);\n        globalCache.employees = employeeData;\n\n        // 사용자 권한 및 이름 로드\n        if (userResult.data.user && !userResult.error) {\n          // email로 직원 정보 찾기 (올바른 방법)\n          let employeeData = null;\n          if (userResult.data.user.email) {\n            const emailResult = await supabase\n              .from('employees')\n              .select('*')\n              .eq('email', userResult.data.user.email)\n              .maybeSingle();\n            \n            employeeData = emailResult.data;\n          }\n          \n          if (employeeData) {\n            globalCache.userInfo = employeeData;\n            \n            let roles: string[] = [];\n            if (employeeData.purchase_role) {\n              if (Array.isArray(employeeData.purchase_role)) {\n                roles = employeeData.purchase_role.map((r: any) => String(r).trim());\n              } else {\n                const roleString = String(employeeData.purchase_role);\n                roles = roleString\n                  .split(',')\n                  .map((r: string) => r.trim())\n                  .filter((r: string) => r.length > 0);\n              }\n            }\n            \n            \n            setCurrentUserRoles(roles);\n            setCurrentUserName(employeeData.name || employeeData.full_name || '');\n            setCurrentUserEmail(employeeData.email || '');\n            setCurrentUserId(employeeData.id || '');\n          }\n          \n          globalCache.lastFetch = now;\n        }\n      } catch (error) {\n        logger.error('초기 데이터 로드 실패', error);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // 발주 목록 로드 - 캐싱 및 최적화 적용\n  const loadPurchases = useCallback(async (forceRefresh?: boolean) => {\n    setLoading(true);\n    \n    try {\n      // 캐시 확인\n      const now = Date.now();\n      const cacheValid = globalCache.lastFetch && (now - globalCache.lastFetch) < globalCache.CACHE_DURATION;\n      \n      \n      if (!forceRefresh && cacheValid && globalCache.purchases) {\n        try {\n          setPurchases(globalCache.purchases);\n          setLoading(false);\n          return;\n        } catch (error) {\n          logger.error('발주 데이터 캐시 사용 중 오류', error);\n          // 캐시 초기화\n          globalCache.purchases = null;\n          globalCache.lastFetch = 0;\n        }\n      }\n      \n      // employees 데이터 준비\n      let employeeList = employees;\n      if (employeeList.length === 0) {\n        employeeList = globalCache.employees || [];\n        if (employeeList.length === 0) {\n          const { data: empData } = await supabase\n            .from('employees')\n            .select('*');\n          employeeList = empData || [];\n        }\n      }\n      \n      const { data: { user }, error: authError } = await supabase.auth.getUser();\n      \n      if (authError || !user) {\n        logger.error('사용자 인증 실패', authError);\n        toast.error('로그인이 필요합니다.');\n        setLoading(false);\n        return;\n      }\n\n      // 승인대기 항목을 놓치지 않기 위해 시간 제한 제거\n      \n      // 먼저 purchase_requests만 가져오기 (vendors JOIN 제거)\n      const { data, error } = await supabase\n        .from('purchase_requests')\n        .select(`\n          *,\n          purchase_request_items(*)\n        `)\n        .order('request_date', { ascending: false })\n        .limit(1000); // 성능 최적화: 최대 1000건\n\n      if (error) {\n        throw error;\n      }\n\n      \n      // 오늘 발주 항목 확인\n      const today = new Date().toISOString().split('T')[0];\n      const todayItems = (data || []).filter((d: any) => d.request_date?.startsWith(today));\n\n      // 데이터 변환 (hanslwebapp과 동일)\n      const processedData = (data || []).map((request: any) => {\n        // 첫 번째 품목 정보 (기존 방식과 호환성 유지)\n        const firstItem = request.purchase_request_items?.[0] || {};\n        \n        // requester_id로 employee 찾기\n        const requesterEmployee = employeeList.find(emp => emp.id === request.requester_id);\n        \n        return {\n          id: Number(request.id),\n          purchase_order_number: request.purchase_order_number as string,\n          request_date: request.request_date as string,\n          delivery_request_date: request.delivery_request_date as string,\n          progress_type: request.progress_type as string,\n          payment_completed_at: request.payment_completed_at as string,\n          payment_category: request.payment_category as string,\n          currency: request.currency as string,\n          request_type: request.request_type as string,\n          vendor: undefined, // vendors JOIN 제거됨\n          vendor_name: request.vendor_name || '', // purchase_requests 테이블의 vendor_name 사용\n          vendor_payment_schedule: '', // vendors JOIN 없으므로 빈값\n          vendor_contacts: [], // vendors JOIN 없으므로 빈배열\n          requester_id: request.requester_id as string,\n          requester_name: request.requester_name as string,\n          requester_full_name: requesterEmployee?.full_name || requesterEmployee?.name || request.requester_name || '',\n          item_name: firstItem.item_name as string || '',\n          specification: firstItem.specification as string || '',\n          quantity: Number(firstItem.quantity) || 0,\n          unit_price_value: Number(firstItem.unit_price_value) || 0,\n          amount_value: Number(firstItem.amount_value) || 0,\n          remark: firstItem.remark as string || '',\n          project_vendor: request.project_vendor as string,\n          sales_order_number: request.sales_order_number as string,\n          project_item: request.project_item as string,\n          line_number: Number(firstItem.line_number) || 1,\n          contact_name: '', // vendor_contacts JOIN 없으므로 빈값\n          middle_manager_status: request.middle_manager_status,\n          final_manager_status: request.final_manager_status,\n          is_received: !!request.is_received,\n          received_at: request.received_at as string,\n          is_payment_completed: !!request.is_payment_completed,\n          is_po_download: !!request.is_po_download,\n          link: firstItem.link as string | undefined,\n          // 전체 품목 리스트 추가 (hanslwebapp과 동일하게 items로 통일) - line_number로 정렬\n          items: (request.purchase_request_items || []).sort((a: any, b: any) => \n            (a.line_number || 0) - (b.line_number || 0)),\n          // 총 금액 계산\n          total_amount: request.purchase_request_items?.reduce((sum: number, item: any) => \n            sum + (Number(item.amount_value) || 0), 0) || 0,\n          purchase_status: request.purchase_status || 'pending'\n        };\n      });\n\n\n      // 데이터 로드 완료 및 캐싱\n      setPurchases(processedData);\n      globalCache.purchases = processedData;\n      globalCache.lastFetch = now;\n    } catch (error) {\n      logger.error('발주 목록 로드 실패', error);\n      toast.error('발주 목록을 불러올 수 없습니다.');\n    } finally {\n      setLoading(false);\n    }\n  }, [employees]);\n\n  useEffect(() => {\n    loadPurchases();\n  }, [loadPurchases]);\n\n  return {\n    purchases,\n    vendors,\n    employees,\n    loading,\n    currentUserRoles,\n    currentUserName,\n    currentUserEmail,\n    currentUserId,\n    refreshPurchases: loadPurchases\n  };\n};\n","import { useState, useMemo, useEffect, useCallback } from 'react';\nimport { useDebounce } from '@/hooks/useDebounce';\nimport { createClient } from '@/lib/supabase/client';\nimport { Purchase } from './usePurchaseData';\n\n// 상수 정의 - 특정 직원의 발주요청 숨김 (본인이 아닌 경우에만)\nconst HIDDEN_EMPLOYEES = ['정희웅'];  // 정현웅 제거\n\n// 메모이제이션 캐시\nconst filterCache = new Map();\nconst CACHE_SIZE_LIMIT = 100;\n\nexport const useFastPurchaseFilters = (purchases: Purchase[], currentUserRoles: string[], currentUserName: string, currentUserId?: string, currentUserEmail?: string) => {\n  const supabase = createClient();\n  const [activeTab, setActiveTab] = useState('pending');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [vendorFilter, setVendorFilter] = useState('');\n  // 초기값 설정 - hanslwebapp과 동일하게 빈 문자열로 시작\n  const [selectedEmployee, setSelectedEmployee] = useState<string>('');\n  const [purchaseNumberFilter, setPurchaseNumberFilter] = useState('');\n  const [itemNameFilter, setItemNameFilter] = useState('');\n  const [specificationFilter, setSpecificationFilter] = useState('');\n  const [approvalStatusFilter, setApprovalStatusFilter] = useState('');\n  const [remarkFilter, setRemarkFilter] = useState('');\n  \n  \n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n  \n  // 권한별 로직 계산\n  const isAdmin = currentUserRoles?.includes('app_admin');\n  const isFinalApprover = currentUserRoles?.includes('final_approver');\n  const isMiddleManager = currentUserRoles?.includes('middle_manager');\n  const isPurchaseManager = currentUserRoles?.includes('purchase_manager');\n  const hasApprovalRole = isAdmin || isFinalApprover || isMiddleManager;\n  \n  // lead buyer 권한 체크 추가\n  const isLeadBuyer = currentUserRoles?.includes('raw_material_manager') || \n                      currentUserRoles?.includes('consumable_manager') || \n                      currentUserRoles?.includes('purchase_manager');\n\n  // hanslwebapp과 동일한 로직 - roleCase 계산 (lead buyer 추가)\n  const roleCase = useMemo(() => {\n    if (!currentUserRoles || currentUserRoles.length === 0) return 1; // null\n    if (isPurchaseManager) return 2; // purchase_manager\n    if (currentUserRoles.some(r => ['middle_manager', 'final_approver', 'app_admin', 'ceo'].includes(r))) return 3;\n    return 1;\n  }, [currentUserRoles, isPurchaseManager]);\n  \n  // 탭별 기본 직원 필터 계산 (구매현황은 lead buyer와 app_admin만 전체 보기)\n  const computeDefaultEmployee = useCallback(\n    (tabKey: string): string => {\n      if (!currentUserName) return 'all';\n      \n      // 구매현황 탭은 lead buyer와 app_admin만 전체 보기\n      if (tabKey === 'purchase') {\n        if (isLeadBuyer || isAdmin) {\n          return 'all';\n        }\n        return currentUserName;\n      }\n      \n      switch (roleCase) {\n        case 1: // role null\n          if (tabKey === 'done') return 'all';\n          return currentUserName;\n        case 2: // purchase_manager\n          if (tabKey === 'done') return 'all';\n          return currentUserName; // pending & receipt\n        case 3: // 관리자 권한\n          return 'all';\n        default:\n          return currentUserName;\n      }\n    },\n    [currentUserName, roleCase, isLeadBuyer, isAdmin]\n  );\n  \n  // 탭 변경 또는 사용자/역할 로딩 시 기본값 설정 (hanslwebapp과 동일)\n  useEffect(() => {\n    if (!currentUserName) return;\n    const defaultEmployee = computeDefaultEmployee(activeTab);\n    setSelectedEmployee(defaultEmployee);\n  }, [activeTab, currentUserName, roleCase, computeDefaultEmployee]);\n  \n  // 1단계: 권한별 필터링 (캐싱 적용)\n  const visiblePurchases = useMemo(() => {\n    \n    try {\n      const cacheKey = `visible_${purchases.length}_${currentUserRoles.join(',')}`;\n      if (filterCache.has(cacheKey)) {\n        return filterCache.get(cacheKey);\n      }\n      \n      let result;\n      if (currentUserRoles.includes('purchase_manager') || currentUserRoles.includes('app_admin')) {\n        result = purchases;\n      } else {\n        result = purchases.filter(p => !HIDDEN_EMPLOYEES.includes(p.requester_name));\n      }\n      \n      \n      // 캐시 크기 제한\n      if (filterCache.size >= CACHE_SIZE_LIMIT) {\n        const firstKey = filterCache.keys().next().value;\n        filterCache.delete(firstKey);\n      }\n      filterCache.set(cacheKey, result);\n      return result;\n    } catch (error) {\n      // 캐시 초기화 후 직접 계산\n      filterCache.clear();\n      if (currentUserRoles.includes('purchase_manager') || currentUserRoles.includes('app_admin')) {\n        return purchases;\n      } else {\n        return purchases.filter(p => !HIDDEN_EMPLOYEES.includes(p.requester_name));\n      }\n    }\n  }, [purchases, currentUserRoles]);\n\n\n  // 2단계: 탭별 필터링 (최적화 적용)\n  const tabFilteredPurchases = useMemo(() => {\n    const cacheKey = `tab_${visiblePurchases.length}_${activeTab}`;\n    if (filterCache.has(cacheKey)) {\n      return filterCache.get(cacheKey);\n    }\n    \n    \n    const result = visiblePurchases.filter((purchase: Purchase) => {\n      let matches = false;\n      \n      switch (activeTab) {\n        case 'pending':\n          // 중간승인자나 최종승인자 중 하나라도 pending이면 승인대기\n          const middlePending = ['pending', '대기', '', null, undefined].includes(purchase.middle_manager_status as any);\n          const finalPending = ['pending', '대기', '', null, undefined].includes(purchase.final_manager_status as any);\n          \n          // 반려된 경우는 제외\n          const middleRejected = purchase.middle_manager_status === 'rejected';\n          const finalRejected = purchase.final_manager_status === 'rejected';\n          \n          if (middleRejected || finalRejected) return false;\n          \n          // 중간승인 대기 또는 최종승인 대기\n          matches = middlePending || finalPending;\n          \n          return matches;\n          \n        case 'purchase': {\n          // DB 확인 결과: '구매 요청' (띄어쓰기 있음) 또는 '발주'\n          const isRequest = purchase.payment_category === '구매 요청';\n          const notPaid = !purchase.is_payment_completed;\n          const isSeonJin = (purchase.progress_type || '').includes('선진행');\n          const isIlban = (purchase.progress_type || '').includes('일반');\n          const finalApproved = purchase.final_manager_status === 'approved';\n          \n          if (!isRequest || !notPaid) {\n            matches = false;\n          } else {\n            matches = (isSeonJin) || (isIlban && finalApproved);\n          }\n          \n          return matches;\n        }\n        \n        case 'receipt': {\n          // 입고현황: 미입고 & (선진행 or 최종승인)\n          const notReceived = !purchase.is_received;\n          const isSeonJin = (purchase.progress_type || '').includes('선진행');\n          const finalApproved = purchase.final_manager_status === 'approved';\n          matches = notReceived && (isSeonJin || finalApproved);\n          return matches;\n        }\n        \n        case 'done':\n          matches = true;\n          return matches;\n          \n        default:\n          return true;\n      }\n    });\n    \n    if (filterCache.size >= CACHE_SIZE_LIMIT) {\n      const firstKey = filterCache.keys().next().value;\n      filterCache.delete(firstKey);\n    }\n    filterCache.set(cacheKey, result);\n    return result;\n  }, [visiblePurchases, activeTab]);\n\n  // 3단계: 직원 필터링 (최적화 적용)\n  const employeeFilteredPurchases = useMemo(() => {\n    const cacheKey = `employee_${tabFilteredPurchases.length}_${selectedEmployee}`;\n    if (filterCache.has(cacheKey)) {\n      return filterCache.get(cacheKey);\n    }\n    \n    let result;\n    if (selectedEmployee && selectedEmployee !== 'all' && selectedEmployee !== '전체') {\n      result = tabFilteredPurchases.filter((purchase: Purchase) => purchase.requester_name === selectedEmployee);\n    } else {\n      result = tabFilteredPurchases;\n    }\n    \n    if (filterCache.size >= CACHE_SIZE_LIMIT) {\n      const firstKey = filterCache.keys().next().value;\n      filterCache.delete(firstKey);\n    }\n    filterCache.set(cacheKey, result);\n    return result;\n  }, [tabFilteredPurchases, selectedEmployee]);\n\n  // 4단계: 업체 필터링 (업체 선택시만 실행)\n  const vendorFilteredPurchases = useMemo(() => {\n    if (!vendorFilter) {\n      return employeeFilteredPurchases;\n    }\n    return employeeFilteredPurchases.filter((purchase: Purchase) => purchase.vendor_name === vendorFilter);\n  }, [employeeFilteredPurchases, vendorFilter]);\n\n  // 5단계: 추가 필터 적용\n  const additionalFilteredPurchases = useMemo(() => {\n    let filtered = vendorFilteredPurchases;\n    \n    // 발주요청번호 필터\n    if (purchaseNumberFilter) {\n      const term = purchaseNumberFilter.trim().toLowerCase();\n      filtered = filtered.filter((p: Purchase) => p.purchase_order_number?.toLowerCase().includes(term));\n    }\n    \n    // 품명 필터\n    if (itemNameFilter) {\n      const term = itemNameFilter.trim().toLowerCase();\n      filtered = filtered.filter((p: Purchase) => {\n        if (p.items && p.items.length > 0) {\n          return p.items.some((item: any) => item.item_name?.toLowerCase().includes(term));\n        }\n        return false;\n      });\n    }\n    \n    // 규격 필터\n    if (specificationFilter) {\n      const term = specificationFilter.trim().toLowerCase();\n      filtered = filtered.filter((p: Purchase) => {\n        if (p.items && p.items.length > 0) {\n          return p.items.some((item: any) => item.specification?.toLowerCase().includes(term));\n        }\n        return false;\n      });\n    }\n    \n    // 승인상태 필터\n    if (approvalStatusFilter && approvalStatusFilter !== 'all') {\n      filtered = filtered.filter((p: Purchase) => {\n        switch (approvalStatusFilter) {\n          case 'pending':\n            return !p.final_manager_status || p.final_manager_status === 'pending' || p.final_manager_status === '대기';\n          case 'approved':\n            return p.final_manager_status === 'approved';\n          case 'rejected':\n            return p.final_manager_status === 'rejected' || p.middle_manager_status === 'rejected';\n          default:\n            return true;\n        }\n      });\n    }\n    \n    // 비고 필터\n    if (remarkFilter) {\n      const term = remarkFilter.trim().toLowerCase();\n      filtered = filtered.filter((p: Purchase) => {\n        if (p.items && p.items.length > 0) {\n          return p.items.some((item: any) => item.remark?.toLowerCase().includes(term));\n        }\n        return false;\n      });\n    }\n    \n    return filtered;\n  }, [vendorFilteredPurchases, purchaseNumberFilter, itemNameFilter, specificationFilter, approvalStatusFilter, remarkFilter]);\n\n  // 6단계: 검색 필터링 (검색어 변경시만 실행)\n  const searchFilteredPurchases = useMemo(() => {\n    if (!debouncedSearchTerm) {\n      return additionalFilteredPurchases;\n    }\n    \n    const term = debouncedSearchTerm.trim().toLowerCase();\n    \n    return additionalFilteredPurchases.filter((purchase: Purchase) => {\n      // 빠른 검색 (기본 필드만)\n      if (purchase.purchase_order_number?.toLowerCase().includes(term) ||\n          purchase.vendor_name?.toLowerCase().includes(term) ||\n          purchase.requester_name?.toLowerCase().includes(term) ||\n          purchase.project_vendor?.toLowerCase().includes(term)) {\n        return true;\n      }\n      \n      // 품목 검색 (필요할 때만)\n      if (purchase.items && purchase.items.length > 0) {\n        return purchase.items.some((item: any) => \n          (item.item_name && item.item_name.toLowerCase().includes(term)) ||\n          (item.specification && item.specification.toLowerCase().includes(term))\n        );\n      }\n      \n      return false;\n    });\n  }, [additionalFilteredPurchases, debouncedSearchTerm]);\n\n  // 7단계: 최종 정렬 - 최신순 (내림차순)\n  const filteredPurchases = useMemo(() => {\n    const result = [...searchFilteredPurchases].sort((a, b) => {\n      // request_date를 기준으로 내림차순 정렬 (최신이 위로)\n      const dateA = a.request_date ? new Date(a.request_date).getTime() : 0;\n      const dateB = b.request_date ? new Date(b.request_date).getTime() : 0;\n      return dateB - dateA;\n    });\n    \n    \n    return result;\n  }, [searchFilteredPurchases, activeTab]);\n\n  // 탭 카운트 (hanslwebapp과 동일한 조건)\n  const tabCounts = useMemo(() => {\n    // 특정 직원 발주요청 숨김 처리\n    const countPurchases = visiblePurchases;\n    \n    // 날짜 필터 제거 - 전체 데이터 사용\n    const dateFilteredForCount = countPurchases;\n    \n    // 각 탭의 고유 발주요청번호 카운트 (중복 제거)\n    const getUniqueOrderCount = (filtered: Purchase[]) => {\n      return new Set(filtered.map(p => p.purchase_order_number)).size;\n    };\n    \n    // 각 탭별로 기본 직원 필터 계산 (카운트용)\n    const getFilteredDataForTab = (tabKey: string) => {\n      // 구매현황 탭은 특별 처리\n      if (tabKey === 'purchase') {\n        if (isLeadBuyer || isAdmin) {\n          return countPurchases;\n        } else {\n          return countPurchases.filter((p: Purchase) => p.requester_name === currentUserName);\n        }\n      }\n      \n      const defaultEmployee = computeDefaultEmployee(tabKey);\n      \n      if (defaultEmployee === 'all' || defaultEmployee === '전체') {\n        return countPurchases;\n      } else {\n        return countPurchases.filter((p: Purchase) => p.requester_name === defaultEmployee);\n      }\n    };\n    \n    // 각 탭별 데이터 필터링\n    const pendingData = getFilteredDataForTab('pending');\n    const purchaseData = getFilteredDataForTab('purchase');\n    const receiptData = getFilteredDataForTab('receipt');\n    const doneData = getFilteredDataForTab('done');\n    \n    const pendingFiltered = pendingData.filter((p: Purchase) => {\n      // 중간승인자나 최종승인자 중 하나라도 pending이면 승인대기\n      const middlePending = ['pending', '대기', '', null, undefined].includes(p.middle_manager_status as any);\n      const finalPending = ['pending', '대기', '', null, undefined].includes(p.final_manager_status as any);\n      \n      // 반려된 경우는 제외\n      const middleRejected = p.middle_manager_status === 'rejected';\n      const finalRejected = p.final_manager_status === 'rejected';\n      \n      if (middleRejected || finalRejected) return false;\n      \n      // 중간승인 대기 또는 최종승인 대기\n      return middlePending || finalPending;\n    });\n    \n    const purchaseFiltered = purchaseData.filter((p: Purchase) => {\n      const isRequest = p.payment_category === '구매 요청';\n      const notPaid = !p.is_payment_completed;\n      if (!isRequest || !notPaid) return false;\n      const isSeonJin = (p.progress_type || '').includes('선진행');\n      const isIlban = (p.progress_type || '').includes('일반');\n      const finalApproved = p.final_manager_status === 'approved';\n      return (isSeonJin) || (isIlban && finalApproved);\n    });\n    \n    const receiptFiltered = receiptData.filter((p: Purchase) => {\n      const notReceived = !p.is_received;\n      const isSeonJin = (p.progress_type || '').includes('선진행');\n      const finalApproved = p.final_manager_status === 'approved';\n      return notReceived && (isSeonJin || finalApproved);\n    });\n    \n    const counts = {\n      pending: getUniqueOrderCount(pendingFiltered),\n      purchase: getUniqueOrderCount(purchaseFiltered),\n      receipt: getUniqueOrderCount(receiptFiltered),\n      done: getUniqueOrderCount(doneData)  // 전체 항목\n    };\n    \n    return counts;\n  }, [visiblePurchases, roleCase, currentUserName, computeDefaultEmployee, isLeadBuyer, isAdmin]);\n\n\n  return {\n    // States\n    activeTab,\n    searchTerm,\n    vendorFilter,\n    selectedEmployee,\n    purchaseNumberFilter,\n    itemNameFilter,\n    specificationFilter,\n    approvalStatusFilter,\n    remarkFilter,\n    \n    // Setters\n    setActiveTab,\n    setSearchTerm,\n    setVendorFilter,\n    setSelectedEmployee,\n    setPurchaseNumberFilter,\n    setItemNameFilter,\n    setSpecificationFilter,\n    setApprovalStatusFilter,\n    setRemarkFilter,\n    \n    // Computed values\n    filteredPurchases,\n    tabCounts\n  };\n};","import { useEffect, useState } from 'react';\n\n/**\n * Hook to debounce a value\n * Useful for search inputs and other expensive operations\n */\nexport function useDebounce<T>(value: T, delay: number = 500): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    // Set up the timeout\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Clean up the timeout if value changes\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}","import { memo, lazy, Suspense } from 'react';\nimport { Purchase } from '@/hooks/usePurchaseData';\n\n// Lazy load the heavy table component\nconst FastPurchaseTable = lazy(() => import('./FastPurchaseTable'));\n\ninterface LazyPurchaseTableProps {\n  purchases: Purchase[];\n  activeTab: string;\n  currentUserRoles: string[];\n  onRefresh: () => Promise<void>;\n  onPaymentComplete: (id: number) => Promise<void>;\n  onReceiptComplete: (id: number) => Promise<void>;\n}\n\n// Memoized loading component\nconst TableSkeleton = memo(() => (\n  <div className=\"p-4 space-y-4\">\n    {[...Array(5)].map((_, i) => (\n      <div key={i} className=\"flex space-x-4 animate-pulse\">\n        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n      </div>\n    ))}\n  </div>\n));\nTableSkeleton.displayName = 'TableSkeleton';\n\n// Main component with memoization\nconst LazyPurchaseTable = memo<LazyPurchaseTableProps>(({\n  purchases,\n  activeTab,\n  currentUserRoles,\n  onRefresh,\n  onPaymentComplete,\n  onReceiptComplete\n}) => (\n  <Suspense fallback={<TableSkeleton />}>\n    <FastPurchaseTable\n      purchases={purchases}\n      activeTab={activeTab}\n      currentUserRoles={currentUserRoles}\n      onRefresh={onRefresh}\n      onPaymentComplete={onPaymentComplete}\n      onReceiptComplete={onReceiptComplete}\n    />\n  </Suspense>\n));\n\nLazyPurchaseTable.displayName = 'LazyPurchaseTable';\n\nexport default LazyPurchaseTable;","\nimport { useState, lazy, Suspense, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { usePurchaseData, clearPurchaseCache } from \"@/hooks/usePurchaseData\";\nimport { useFastPurchaseFilters } from \"@/hooks/useFastPurchaseFilters\";\nimport LazyPurchaseTable from \"@/components/purchase/LazyPurchaseTable\";\n\nimport { Plus, Package } from \"lucide-react\";\nimport { generatePurchaseOrderExcelJS, PurchaseOrderData } from \"@/utils/exceljs/generatePurchaseOrderExcel\";\n\n// Lazy load modal for better performance\nconst PurchaseItemsModal = lazy(() => import(\"@/components/purchase/PurchaseItemsModal\"));\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// Tabs 컴포넌트를 제거하고 직접 구현 (hanslwebapp 방식)\nimport { Button } from \"@/components/ui/button\";\nimport { createClient } from \"@/lib/supabase/client\";\nimport { toast } from \"sonner\";\nimport { Purchase } from \"@/hooks/usePurchaseData\";\n\ninterface PurchaseListMainProps {\n  onEmailToggle?: () => void;\n  showEmailButton?: boolean;\n}\n\n// 화면 상단의 탭(진행상태별) 목록\nconst NAV_TABS: { key: string; label: string }[] = [\n  { key: 'pending', label: '승인대기' },\n  { key: 'purchase', label: '구매 현황' },\n  { key: 'receipt', label: '입고 현황' },\n  { key: 'done', label: '전체 항목' },\n];\n\n// 발주 목록 메인 컴포넌트\nexport default function PurchaseListMain({ onEmailToggle, showEmailButton = true }: PurchaseListMainProps) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const supabase = createClient();\n  const [editingId, setEditingId] = useState<number | null>(null);\n  const [editingData, setEditingData] = useState<any>({});\n  const [selectedPurchase, setSelectedPurchase] = useState<Purchase | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  // 발주 데이터 및 사용자 정보\n  const {\n    purchases,\n    vendors,\n    employees,\n    loading,\n    currentUserRoles,\n    currentUserName,\n    currentUserEmail,\n    currentUserId,\n    refreshPurchases: loadPurchases\n  } = usePurchaseData();\n  \n  const isAdmin = currentUserRoles?.includes('app_admin');\n  \n\n  // 필터링 및 탭 관리\n  const {\n    activeTab,\n    searchTerm,\n    vendorFilter,\n    selectedEmployee,\n    purchaseNumberFilter,\n    itemNameFilter,\n    specificationFilter,\n    approvalStatusFilter,\n    remarkFilter,\n    setActiveTab,\n    setSearchTerm,\n    setVendorFilter,\n    setSelectedEmployee,\n    setPurchaseNumberFilter,\n    setItemNameFilter,\n    setSpecificationFilter,\n    setApprovalStatusFilter,\n    setRemarkFilter,\n    filteredPurchases,\n    tabCounts\n  } = useFastPurchaseFilters(purchases, currentUserRoles, currentUserName, currentUserId, currentUserEmail);\n  \n  // URL 쿼리 파라미터에서 탭 설정\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const tab = searchParams.get('tab');\n    if (tab === 'purchase') {\n      setActiveTab('purchase');\n    }\n  }, [location.search, setActiveTab]);\n  \n\n  // 상태에 따른 배지 생성\n  const getStatusBadge = (purchase: Purchase) => {\n    if (purchase.is_received) {\n      return <Badge className=\"bg-green-50 text-green-700 business-radius-badge\">입고완료</Badge>;\n    } else if (purchase.middle_manager_status === 'approved' && purchase.final_manager_status === 'approved') {\n      return <Badge className=\"bg-hansl-50 text-hansl-700 business-radius-badge\">구매진행</Badge>;\n    } else if (purchase.middle_manager_status === 'rejected' || purchase.final_manager_status === 'rejected') {\n      return <Badge className=\"bg-red-50 text-red-700 business-radius-badge\">반려</Badge>;\n    } else {\n      return <Badge className=\"bg-yellow-50 text-yellow-700 business-radius-badge\">승인대기</Badge>;\n    }\n  };\n\n  // 입고 현황 계산\n  const getReceiptProgress = (purchase: Purchase) => {\n    if (!purchase.items || purchase.items.length === 0) return { received: 0, total: 0, percentage: 0 };\n    \n    const total = purchase.items.length;\n    const received = purchase.items.filter(item => item.is_received || item.delivery_status === 'received').length;\n    const percentage = total > 0 ? Math.round((received / total) * 100) : 0;\n    \n    return { received, total, percentage };\n  };\n\n  // 선진행 체크 함수\n  const isAdvancePayment = (progress_type?: string) => {\n    return progress_type === '선진행' || progress_type?.trim() === '선진행' || progress_type?.includes('선진행');\n  };\n\n  // 편집 시작\n  const handleEditStart = (purchase: Purchase) => {\n    if (!currentUserRoles || !currentUserRoles.includes('app_admin')) return;\n    setEditingId(purchase.id);\n    setEditingData({\n      vendor_name: purchase.vendor_name,\n      project_vendor: purchase.project_vendor,\n      sales_order_number: purchase.sales_order_number,\n      project_item: purchase.project_item,\n      delivery_request_date: purchase.delivery_request_date ? \n        purchase.delivery_request_date.split('T')[0] : '',\n      total_amount: purchase.total_amount,\n    });\n  };\n\n  // 편집 저장\n  const handleEditSave = async () => {\n    if (!currentUserRoles || !currentUserRoles.includes('app_admin') || !editingId) return;\n    \n    try {\n      const { error } = await supabase\n        .from('purchase_requests')\n        .update(editingData)\n        .eq('id', editingId);\n\n      if (error) throw error;\n\n      toast.success('수정이 완료되었습니다.');\n      setEditingId(null);\n      setEditingData({});\n      await loadPurchases();\n    } catch (error) {\n      toast.error('수정 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 편집 취소\n  const handleEditCancel = () => {\n    setEditingId(null);\n    setEditingData({});\n  };\n\n  // 엑셀 다운로드\n  const handleExcelDownload = async (purchase: Purchase) => {\n    try {\n      // DB에서 직접 모든 품목 조회\n      const { data: purchaseRequest, error: requestError } = await supabase\n        .from('purchase_requests')\n        .select('*')\n        .eq('purchase_order_number', purchase.purchase_order_number)\n        .single();\n\n      if (requestError || !purchaseRequest) {\n        toast.error('해당 발주요청번호의 데이터를 찾을 수 없습니다.');\n        return;\n      }\n\n      // 품목 데이터 조회\n      const { data: orderItems, error: itemsError } = await supabase\n        .from('purchase_request_items')\n        .select('*')\n        .eq('purchase_order_number', purchase.purchase_order_number)\n        .order('line_number');\n\n      if (itemsError || !orderItems || orderItems.length === 0) {\n        toast.error('해당 발주요청번호의 품목 데이터를 찾을 수 없습니다.');\n        return;\n      }\n\n      // 업체 상세 정보 및 담당자 정보 조회\n      const vendorInfo = {\n        vendor_name: purchase.vendor_name,\n        vendor_phone: '',\n        vendor_fax: '',\n        vendor_contact_name: ''\n      };\n\n      try {\n        const vendorId = purchaseRequest.vendor_id || purchase.vendor_id;\n        const contactId = purchaseRequest.contact_id || purchase.contact_id;\n        \n        // vendor 정보 조회\n        if (vendorId) {\n          const { data: vendorData, error: vendorError } = await supabase\n            .from('vendors')\n            .select('vendor_phone, vendor_fax')\n            .eq('id', vendorId)\n            .single();\n\n          if (vendorData && !vendorError) {\n            vendorInfo.vendor_phone = vendorData.vendor_phone || '';\n            vendorInfo.vendor_fax = vendorData.vendor_fax || '';\n          }\n        }\n\n        // vendor_contacts에서 contact_id로 담당자 정보 조회\n        if (contactId) {\n          const { data: contactData, error: contactError } = await supabase\n            .from('vendor_contacts')\n            .select('contact_name, contact_phone, contact_email')\n            .eq('id', contactId)\n            .single();\n          if (contactData && !contactError) {\n            vendorInfo.vendor_contact_name = contactData.contact_name || '';\n          }\n        }\n      } catch (error) {\n      }\n\n      const excelData: PurchaseOrderData = {\n        purchase_order_number: purchaseRequest.purchase_order_number || '',\n        request_date: purchaseRequest.request_date,\n        delivery_request_date: purchaseRequest.delivery_request_date,\n        requester_name: purchaseRequest.requester_name,\n        vendor_name: vendorInfo.vendor_name || '',\n        vendor_contact_name: vendorInfo.vendor_contact_name,\n        vendor_phone: vendorInfo.vendor_phone,\n        vendor_fax: vendorInfo.vendor_fax,\n        project_vendor: purchaseRequest.project_vendor,\n        sales_order_number: purchaseRequest.sales_order_number,\n        project_item: purchaseRequest.project_item,\n        items: orderItems.map((item: any) => ({\n          line_number: item.line_number,\n          item_name: item.item_name,\n          specification: item.specification,\n          quantity: item.quantity,\n          unit_price_value: item.unit_price_value,\n          amount_value: item.amount_value,\n          remark: item.remark,\n          currency: purchaseRequest.currency || 'KRW'\n        }))\n      };\n\n      // 코드 기반 ExcelJS 생성 (템플릿 없이 서식 직접 정의)\n      const blob = await generatePurchaseOrderExcelJS(excelData);\n      \n      // 다운로드용 파일명: 발주서_{업체명}_발주요청번호\n      const downloadFilename = `발주서_${excelData.vendor_name}_${excelData.purchase_order_number}.xlsx`;\n\n      // 사용자에게 즉시 다운로드 제공\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = downloadFilename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n      toast.success('엑셀 파일이 다운로드되었습니다.');\n      \n      // DB에 다운로드 완료 플래그(is_po_download) 업데이트 - lead buyer만 해당\n      try {\n        const isLeadBuyer = currentUserRoles && currentUserRoles.includes('lead buyer');\n\n        if (isLeadBuyer) {\n          const { error: downloadFlagErr } = await supabase\n            .from('purchase_requests')\n            .update({ is_po_download: true })\n            .eq('purchase_order_number', purchase.purchase_order_number);\n          if (downloadFlagErr) {\n          } else {\n            // 화면 업데이트\n            await loadPurchases();\n          }\n        }\n      } catch (flagErr) {\n      }\n    } catch (error) {\n      toast.error('엑셀 다운로드에 실패했습니다.');\n    }\n  };\n\n  // 최적화된 핸들러들\n  const handleReceiptComplete = async (purchaseId: number) => {\n    try {\n      const { error } = await supabase\n        .from('purchase_requests')\n        .update({ \n          is_received: true,\n          received_at: new Date().toISOString()\n        })\n        .eq('id', purchaseId);\n\n      if (error) throw error;\n      \n      // 개별 품목도 모두 입고완료 처리\n      await supabase\n        .from('purchase_request_items')\n        .update({ \n          is_received: true,\n          delivery_status: 'received'\n        })\n        .eq('purchase_request_id', purchaseId);\n      \n      toast.success('입고완료 처리되었습니다.');\n      await loadPurchases();\n    } catch (error) {\n      toast.error('처리 중 오류가 발생했습니다.');\n    }\n  };\n\n  const handlePaymentComplete = async (purchaseId: number) => {\n    try {\n      const { error } = await supabase\n        .from('purchase_requests')\n        .update({ \n          is_payment_completed: true,\n          payment_completed_at: new Date().toISOString()\n        })\n        .eq('id', purchaseId);\n\n      if (error) throw error;\n      \n      // 개별 품목도 모두 구매완료 처리\n      await supabase\n        .from('purchase_request_items')\n        .update({ \n          is_payment_completed: true\n        })\n        .eq('purchase_request_id', purchaseId);\n      \n      toast.success('구매완료 처리되었습니다.');\n      await loadPurchases();\n    } catch (error) {\n      toast.error('처리 중 오류가 발생했습니다.');\n    }\n  };\n\n  const handleItemsClick = (purchase: Purchase) => {\n    setSelectedPurchase(purchase);\n    setIsModalOpen(true);\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4\">\n        <div>\n          <h1 className=\"page-title\">발주요청 관리</h1>\n          <p className=\"page-subtitle\" style={{marginTop:'-2px',marginBottom:'-4px'}}>Purchase Management</p>\n        </div>\n        <Button \n          onClick={() => navigate('/purchase/new')}\n          className=\"mt-4 sm:mt-0 bg-hansl-500 hover:bg-hansl-600\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          새 발주요청 작성\n        </Button>\n      </div>\n\n\n      {/* 직접 구현한 탭 (hanslwebapp 방식) - 빠른 성능 */}\n      <div className=\"space-y-3\">\n        {/* 탭 버튼들 - 모바일 반응형 개선 */}\n        <div className=\"flex flex-col sm:flex-row sm:space-x-1 space-y-1 sm:space-y-0 bg-gray-50 p-1 business-radius-card border border-gray-200\">\n          {NAV_TABS.map((tab) => (\n            <button\n              key={tab.key}\n              onClick={() => setActiveTab(tab.key)}\n              className={`flex-1 flex items-center justify-center space-x-2 py-2.5 px-3 sm:px-4 business-radius-button text-xs sm:text-sm font-medium transition-colors ${\n                activeTab === tab.key\n                  ? 'text-hansl-600 bg-white shadow-sm border border-gray-200'\n                  : 'text-gray-600 bg-transparent hover:text-gray-900 hover:bg-white/50'\n              }`}\n            >\n              <span className=\"whitespace-nowrap\">{tab.label}</span>\n              <Badge \n                variant=\"secondary\" \n                className={`text-[10px] sm:text-xs business-radius-badge ${\n                  activeTab === tab.key \n                    ? 'bg-hansl-50 text-hansl-700' \n                    : 'bg-gray-100 text-gray-600'\n                }`}\n              >\n                {tabCounts[tab.key as keyof typeof tabCounts]}\n              </Badge>\n            </button>\n          ))}\n        </div>\n\n        {/* 탭 콘텐츠 */}\n        <Card className=\"overflow-hidden border border-gray-200\">\n          <CardContent className=\"p-0\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"w-8 h-8 border-2 border-hansl-500 border-t-transparent rounded-full animate-spin\" />\n                <span className=\"ml-3 text-gray-600\">로딩 중...</span>\n              </div>\n            ) : filteredPurchases.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">발주요청서가 없습니다</h3>\n                <p className=\"text-gray-600\">새로운 발주요청서를 작성해보세요.</p>\n              </div>\n            ) : (\n              <LazyPurchaseTable \n                purchases={filteredPurchases} \n                activeTab={activeTab}\n                currentUserRoles={currentUserRoles}\n                onRefresh={loadPurchases}\n                onPaymentComplete={handlePaymentComplete}\n                onReceiptComplete={handleReceiptComplete}\n              />\n            )}\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* 세부항목 모달 */}\n      {selectedPurchase && (\n        <Suspense fallback={<div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\"><div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white\"></div></div>}>\n          <PurchaseItemsModal\n            isOpen={isModalOpen}\n            onClose={() => {\n              setIsModalOpen(false);\n              setSelectedPurchase(null);\n            }}\n            purchase={{\n              ...selectedPurchase,\n              vendor_name: selectedPurchase.vendor_name || '',\n              project_vendor: selectedPurchase.project_vendor || '',\n              sales_order_number: selectedPurchase.sales_order_number || '',\n              project_item: selectedPurchase.project_item || ''\n            }}\n            isAdmin={isAdmin || false}\n            onUpdate={loadPurchases}\n          />\n        </Suspense>\n      )}\n    </div>\n  );\n}"],"file":"assets/PurchaseListMain-D7GaAtq6.js"}