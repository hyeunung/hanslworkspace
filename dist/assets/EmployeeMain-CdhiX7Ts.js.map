{"version":3,"mappings":"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","names":["EmployeeService","createClient","filters","query","data","error","logger","id","employeeData","existingEmployee","existingSlackEmployee","employeeId","updateData","purchaseRequests","currentEmployee","selectError","role","emp","employee","userId","requiredRoles","employeeService","PURCHASE_ROLES","EmployeeFilters","onFiltersChange","onExport","onCreateNew","onAttendanceDownload","localSearch","setLocalSearch","useState","departments","setDepartments","positions","setPositions","useEffect","deptResult","posResult","handleSearchSubmit","e","handleDepartmentChange","value","handlePositionChange","handleRoleChange","handleStatusChange","clearFilters","hasFilters","jsxs","jsx","Button","Calendar","Download","Plus","Search","Input","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","dept","pos","X","EmployeeTable","employees","onEdit","onView","onRefresh","loadingId","setLoadingId","currentUserRole","setCurrentUserRole","supabase","sortedData","sortConfig","handleSort","useTableSort","user","isHRorAdmin","canViewSensitive","canEdit","handleToggleStatus","result","toast","handleDelete","getRoleDisplayName","getRoleBadgeColor","Fragment","Table","TableHeader","TableRow","TableHead","SortableHeader","TableBody","TableCell","formatDate","Badge","DropdownMenu","DropdownMenuTrigger","MoreHorizontal","DropdownMenuContent","DropdownMenuItem","Eye","Edit","ToggleLeft","ToggleRight","Trash2","MobileCard","MobileCardHeader","MobileCardItem","MobileCardActions","EmployeeModal","isOpen","onClose","onSave","mode","isSubmitting","setIsSubmitting","form","useForm","onSubmit","getTitle","isReadOnly","Dialog","DialogContent","DialogHeader","DialogTitle","Form","FormField","field","FormItem","FormLabel","FormControl","FormMessage","DialogFooter","generateAttendanceExcel","workbook","ExcelJS","worksheet","titleRow","titleCell","employeeRow","employeeCell","periodRow","periodCell","headerRow","cell","colNumber","isWeekendOrHolidayFunc","dateString","date","dayOfWeek","year","month","day","holidays","dateStr","record","workStatus","isWeekendOrHoliday","dataRow","isSpecialDay","isLeaveDay","buffer","getDayOfWeek","formatDateWithDay","AttendanceDownload","selectedEmployee","setSelectedEmployee","startDate","setStartDate","endDate","setEndDate","isDownloading","setIsDownloading","setCurrentMonth","now","start","end","setLastMonth","handleDownload","selectedEmp","attendanceRecords","allDates","recordMap","excelRecords","dateWithDay","dateObj","isWeekend","excelData","blob","url","a","handleClose","User","Combobox","b","EmployeeMain","setEmployees","filteredEmployees","setFilteredEmployees","loading","setLoading","setFilters","isModalOpen","setIsModalOpen","modalMode","setModalMode","isAttendanceModalOpen","setIsAttendanceModalOpen","loadEmployees","handleCreateNew","handleEdit","handleView","handleModalClose","handleSave","handleExport","XLSX","__vitePreload","ws","wb","filename"],"ignoreList":[],"sources":["../../src/services/employeeService.ts","../../src/components/employee/EmployeeFilters.tsx","../../src/components/employee/EmployeeTable.tsx","../../src/components/employee/EmployeeModal.tsx","../../src/utils/exceljs/generateAttendanceExcel.ts","../../src/components/employee/AttendanceDownload.tsx","../../src/components/employee/EmployeeMain.tsx"],"sourcesContent":["import { createClient } from \"@/lib/supabase/client\";\nimport { Employee, EmployeeFormData, EmployeeFilters, PurchaseRole } from \"@/types/purchase\";\nimport { logger } from \"@/lib/logger\";\n\nclass EmployeeService {\n  private supabase;\n\n  constructor() {\n    this.supabase = createClient();\n  }\n\n  // 직원 목록 조회\n  async getEmployees(filters?: EmployeeFilters): Promise<{ success: boolean; data?: Employee[]; error?: string }> {\n    try {\n      let query = this.supabase\n        .from('employees')\n        .select('*')\n        .order('name');\n\n      // 검색 필터 적용\n      if (filters?.search) {\n        query = query.or(`\n          name.ilike.%${filters.search}%,\n          email.ilike.%${filters.search}%,\n          phone.ilike.%${filters.search}%,\n          position.ilike.%${filters.search}%,\n          department.ilike.%${filters.search}%,\n          slack_id.ilike.%${filters.search}%\n        `);\n      }\n\n      // 부서 필터 적용\n      if (filters?.department) {\n        query = query.eq('department', filters.department);\n      }\n\n      // 직급 필터 적용\n      if (filters?.position) {\n        query = query.eq('position', filters.position);\n      }\n\n      // 권한 필터 적용\n      if (filters?.purchase_role) {\n        query = query.eq('purchase_role', filters.purchase_role);\n      }\n\n      // 활성 상태 필터 적용\n      if (filters?.is_active !== undefined) {\n        query = query.eq('is_active', filters.is_active);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      logger.error('직원 목록 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 상세 조회\n  async getEmployee(id: string): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 생성\n  async createEmployee(employeeData: EmployeeFormData): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      // 이메일 중복 체크\n      if (employeeData.email) {\n        const { data: existingEmployee } = await this.supabase\n          .from('employees')\n          .select('id')\n          .eq('email', employeeData.email)\n          .single();\n\n        if (existingEmployee) {\n          return { success: false, error: '이미 등록된 이메일입니다.' };\n        }\n      }\n\n      // Slack ID 중복 체크\n      if (employeeData.slack_id) {\n        const { data: existingSlackEmployee } = await this.supabase\n          .from('employees')\n          .select('id')\n          .eq('slack_id', employeeData.slack_id)\n          .single();\n\n        if (existingSlackEmployee) {\n          return { success: false, error: '이미 등록된 Slack ID입니다.' };\n        }\n      }\n\n      // ID 생성 (UUID 형태)\n      const employeeId = crypto.randomUUID();\n\n      const { data, error } = await this.supabase\n        .from('employees')\n        .insert({\n          id: employeeId,\n          ...employeeData,\n          purchase_role: employeeData.purchase_role?.join(',') || null,\n          is_active: true\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 생성 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 수정\n  async updateEmployee(id: string, employeeData: Partial<EmployeeFormData>): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      // 이메일 중복 체크 (자신 제외)\n      if (employeeData.email) {\n        const { data: existingEmployee } = await this.supabase\n          .from('employees')\n          .select('id')\n          .eq('email', employeeData.email)\n          .neq('id', id)\n          .single();\n\n        if (existingEmployee) {\n          return { success: false, error: '이미 등록된 이메일입니다.' };\n        }\n      }\n\n      // Slack ID 중복 체크 (자신 제외)\n      if (employeeData.slack_id) {\n        const { data: existingSlackEmployee } = await this.supabase\n          .from('employees')\n          .select('id')\n          .eq('slack_id', employeeData.slack_id)\n          .neq('id', id)\n          .single();\n\n        if (existingSlackEmployee) {\n          return { success: false, error: '이미 등록된 Slack ID입니다.' };\n        }\n      }\n\n      const updateData = {\n        ...employeeData,\n        purchase_role: employeeData.purchase_role ? employeeData.purchase_role.join(',') : undefined\n      };\n      \n      // undefined 값 제거\n      if (updateData.purchase_role === undefined) {\n        delete updateData.purchase_role;\n      }\n      \n      const { data, error } = await this.supabase\n        .from('employees')\n        .update(updateData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 수정 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 삭제 (소프트 삭제)\n  async deleteEmployee(id: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      // 발주 요청과 연결된 직원인지 확인\n      const { data: purchaseRequests } = await this.supabase\n        .from('purchase_requests')\n        .select('id')\n        .eq('requester_id', id)\n        .limit(1);\n\n      if (purchaseRequests && purchaseRequests.length > 0) {\n        // 발주 요청과 연결된 직원은 비활성화만 가능\n        const { error } = await this.supabase\n          .from('employees')\n          .update({ is_active: false })\n          .eq('id', id);\n\n        if (error) throw error;\n\n        return { success: true };\n      } else {\n        // 연결된 데이터가 없으면 완전 삭제\n        const { error } = await this.supabase\n          .from('employees')\n          .delete()\n          .eq('id', id);\n\n        if (error) throw error;\n\n        return { success: true };\n      }\n    } catch (error) {\n      logger.error('직원 삭제 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 활성화/비활성화 토글\n  async toggleEmployeeStatus(id: string): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      // 현재 상태 조회\n      const { data: currentEmployee, error: selectError } = await this.supabase\n        .from('employees')\n        .select('is_active')\n        .eq('id', id)\n        .single();\n\n      if (selectError) throw selectError;\n\n      // 상태 토글\n      const { data, error } = await this.supabase\n        .from('employees')\n        .update({ is_active: !currentEmployee.is_active })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 상태 변경 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n\n\n  // 권한 변경\n  async updateEmployeeRole(id: string, role: PurchaseRole | null): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .update({ purchase_role: role })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 권한 변경 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 부서 목록 조회\n  async getDepartments(): Promise<{ success: boolean; data?: string[]; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .select('department')\n        .not('department', 'is', null)\n        .not('department', 'eq', '');\n\n      if (error) throw error;\n\n      // 중복 제거하고 정렬\n      const departments = [...new Set((data || []).map(emp => emp.department))].sort();\n\n      return { success: true, data: departments };\n    } catch (error) {\n      logger.error('부서 목록 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직급 목록 조회\n  async getPositions(): Promise<{ success: boolean; data?: string[]; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .select('position')\n        .not('position', 'is', null)\n        .not('position', 'eq', '');\n\n      if (error) throw error;\n\n      // 중복 제거하고 정렬\n      const positions = [...new Set((data || []).map(emp => emp.position))].sort();\n\n      return { success: true, data: positions };\n    } catch (error) {\n      logger.error('직급 목록 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // Excel 내보내기용 데이터 준비\n  async getEmployeesForExport(): Promise<{ success: boolean; data?: Array<Record<string, string>>; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .select('*')\n        .order('name');\n\n      if (error) throw error;\n\n      // Excel 형식에 맞게 데이터 변환\n      const exportData = (data || []).map(employee => ({\n        '이름': employee.name,\n        '이메일': employee.email || '',\n        '전화번호': employee.phone || '',\n        '주소': employee.adress || '',\n        '부서': employee.department || '',\n        '직급': employee.position || '',\n        '권한': this.getRoleDisplayName(employee.purchase_role),\n        'Slack ID': employee.slack_id || '',\n        '상태': employee.is_active ? '활성' : '비활성',\n        '등록일': employee.created_at ? new Date(employee.created_at).toLocaleDateString('ko-KR') : ''\n      }));\n\n      return { success: true, data: exportData };\n    } catch (error) {\n      logger.error('직원 Excel 내보내기 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 권한명 표시용 변환\n  private getRoleDisplayName(role?: string): string {\n    const roleNames: Record<string, string> = {\n      'app_admin': '앱 관리자',\n      'ceo': 'CEO',\n      'final_approver': '최종 승인자',\n      'middle_manager': '중간 관리자',\n      'lead buyer': '수석 구매자',\n      'buyer': '구매자'\n    };\n    \n    return roleNames[role || ''] || role || '권한 없음';\n  }\n\n  // 권한 체크 함수\n  async checkPermission(userId: string, requiredRoles: string[]): Promise<{ success: boolean; hasPermission?: boolean; error?: string }> {\n    try {\n      const { data: employee } = await this.supabase\n        .from('employees')\n        .select('purchase_role, is_active')\n        .eq('id', userId)\n        .single();\n\n      if (!employee || !employee.is_active) {\n        return { success: true, hasPermission: false };\n      }\n\n      const hasPermission = requiredRoles.includes(employee.purchase_role);\n      return { success: true, hasPermission };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n}\n\nexport const employeeService = new EmployeeService();","\nimport { useState, useEffect } from 'react'\nimport { EmployeeFilters as EmployeeFiltersType, PurchaseRole } from '@/types/purchase'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Search, X, Download, Plus, Calendar } from 'lucide-react'\nimport { employeeService } from '@/services/employeeService'\n\ninterface EmployeeFiltersProps {\n  filters: EmployeeFiltersType\n  onFiltersChange: (filters: EmployeeFiltersType) => void\n  onExport: () => void\n  onCreateNew: () => void\n  onAttendanceDownload: () => void\n}\n\nconst PURCHASE_ROLES: { value: PurchaseRole; label: string }[] = [\n  { value: 'app_admin', label: '앱 관리자' },\n  { value: 'ceo', label: 'CEO' },\n  { value: 'final_approver', label: '최종 승인자' },\n  { value: 'middle_manager', label: '중간 관리자' },\n  { value: 'lead buyer', label: '수석 구매자' },\n  { value: 'buyer', label: '구매자' },\n]\n\nexport default function EmployeeFilters({ \n  filters, \n  onFiltersChange, \n  onExport,\n  onCreateNew,\n  onAttendanceDownload\n}: EmployeeFiltersProps) {\n  const [localSearch, setLocalSearch] = useState(filters.search || '')\n  const [departments, setDepartments] = useState<string[]>([])\n  const [positions, setPositions] = useState<string[]>([])\n\n  useEffect(() => {\n    // 부서와 직급 목록 로드\n    const loadOptions = async () => {\n      const [deptResult, posResult] = await Promise.all([\n        employeeService.getDepartments(),\n        employeeService.getPositions()\n      ])\n      \n      if (deptResult.success) {\n        setDepartments(deptResult.data || [])\n      }\n      \n      if (posResult.success) {\n        setPositions(posResult.data || [])\n      }\n    }\n    \n    loadOptions()\n  }, [])\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onFiltersChange({\n      ...filters,\n      search: localSearch.trim() || undefined\n    })\n  }\n\n  const handleDepartmentChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      department: value === 'all' ? undefined : value\n    })\n  }\n\n  const handlePositionChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      position: value === 'all' ? undefined : value\n    })\n  }\n\n  const handleRoleChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      purchase_role: value === 'all' ? undefined : value === 'none' ? '' : value\n    })\n  }\n\n  const handleStatusChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      is_active: value === 'all' ? undefined : value === 'active'\n    })\n  }\n\n  const clearFilters = () => {\n    setLocalSearch('')\n    onFiltersChange({})\n  }\n\n  const hasFilters = filters.search || \n                     filters.department || \n                     filters.position || \n                     filters.purchase_role || \n                     filters.is_active !== undefined\n\n  return (\n    <div className=\"space-y-4\">\n      {/* 상단 액션 버튼 */}\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n        <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">직원 관리</h2>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onAttendanceDownload}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Calendar className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            <span className=\"hidden sm:inline\">출근현황표</span>\n            <span className=\"sm:hidden\">출근</span>\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={onExport}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Download className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            <span className=\"hidden sm:inline\">Excel 내보내기</span>\n            <span className=\"sm:hidden\">Excel</span>\n          </Button>\n          <Button \n            onClick={onCreateNew}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Plus className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            직원 등록\n          </Button>\n        </div>\n      </div>\n\n      {/* 필터 섹션 */}\n      <div className=\"bg-white p-3 sm:p-4 rounded-lg border space-y-4\">\n        <form onSubmit={handleSearchSubmit} className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 sm:items-end sm:flex-wrap\">\n          {/* 검색 */}\n          <div className=\"flex-1 sm:min-w-[250px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              검색\n            </label>\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 sm:left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-3 h-3 sm:w-4 sm:h-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"이름, 이메일, 전화번호로 검색\"\n                value={localSearch}\n                onChange={(e) => setLocalSearch(e.target.value)}\n                className=\"pl-8 sm:pl-10 text-sm h-9\"\n              />\n            </div>\n          </div>\n\n          {/* 부서 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[120px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              부서\n            </label>\n            <Select\n              value={filters.department || 'all'}\n              onValueChange={handleDepartmentChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 부서</SelectItem>\n                {departments.map((dept) => (\n                  <SelectItem key={dept} value={dept}>\n                    {dept}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 직급 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[120px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              직급\n            </label>\n            <Select\n              value={filters.position || 'all'}\n              onValueChange={handlePositionChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 직급</SelectItem>\n                {positions.map((pos) => (\n                  <SelectItem key={pos} value={pos}>\n                    {pos}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 권한 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[140px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              권한\n            </label>\n            <Select\n              value={filters.purchase_role || 'all'}\n              onValueChange={handleRoleChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 권한</SelectItem>\n                <SelectItem value=\"none\">권한 없음</SelectItem>\n                {PURCHASE_ROLES.map((role) => (\n                  <SelectItem key={role.value} value={role.value}>\n                    {role.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 상태 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[100px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              상태\n            </label>\n            <Select\n              value={\n                filters.is_active === undefined \n                  ? 'all' \n                  : filters.is_active \n                    ? 'active' \n                    : 'inactive'\n              }\n              onValueChange={handleStatusChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체</SelectItem>\n                <SelectItem value=\"active\">활성</SelectItem>\n                <SelectItem value=\"inactive\">비활성</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 검색 및 초기화 버튼 */}\n          <div className=\"flex gap-2 w-full sm:w-auto\">\n            <Button type=\"submit\" className=\"flex-1 sm:flex-none h-9 text-sm\">\n              검색\n            </Button>\n            {hasFilters && (\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={clearFilters}\n                className=\"flex items-center gap-1 h-9 text-sm\"\n              >\n                <X className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                <span className=\"hidden sm:inline\">초기화</span>\n                <span className=\"sm:hidden\">초기</span>\n              </Button>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Employee, PurchaseRole } from '@/types/purchase'\nimport { formatDate } from '@/utils/helpers'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { \n  MoreHorizontal, \n  Edit, \n  Trash2, \n  Eye, \n  ToggleLeft, \n  ToggleRight,\n  Shield\n} from 'lucide-react'\nimport { employeeService } from '@/services/employeeService'\nimport { toast } from 'sonner'\nimport { useTableSort } from '@/hooks/useTableSort'\nimport { SortableHeader } from '@/components/ui/sortable-header'\nimport { MobileCard, MobileCardItem, MobileCardHeader, MobileCardActions } from '@/components/ui/mobile-card'\n\ninterface EmployeeTableProps {\n  employees: Employee[]\n  onEdit: (employee: Employee) => void\n  onView: (employee: Employee) => void\n  onRefresh: () => void\n}\n\nexport default function EmployeeTable({ employees, onEdit, onView, onRefresh }: EmployeeTableProps) {\n  const [loadingId, setLoadingId] = useState<string | null>(null)\n  const [currentUserRole, setCurrentUserRole] = useState<string | null>(null)\n  const supabase = createClient()\n  const { sortedData, sortConfig, handleSort } = useTableSort(employees, 'name', 'asc')\n\n  // 현재 사용자 권한 확인\n  useEffect(() => {\n    const checkUserRole = async () => {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (user) {\n        const { data: employee } = await supabase\n          .from('employees')\n          .select('role, purchase_role')  // role 필드도 가져오기\n          .eq('id', user.id)\n          .single()\n        \n        if (employee) {\n          setCurrentUserRole(employee.role || '')  // role 필드 사용 (hr, admin)\n        }\n      }\n    }\n    checkUserRole()\n  }, [])\n\n  // 민감한 정보 볼 수 있는 권한 체크 (hr, admin만) - hanslwebapp과 동일\n  const isHRorAdmin = currentUserRole === 'hr' || currentUserRole === 'admin'\n  const canViewSensitive = isHRorAdmin\n  const canEdit = isHRorAdmin\n\n  const handleToggleStatus = async (employee: Employee) => {\n    setLoadingId(employee.id)\n    try {\n      const result = await employeeService.toggleEmployeeStatus(employee.id)\n      \n      if (result.success) {\n        toast.success(`직원이 ${employee.is_active ? '비활성화' : '활성화'}되었습니다.`)\n        onRefresh()\n      } else {\n        toast.error(result.error || '상태 변경에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('상태 변경 중 오류가 발생했습니다.')\n    } finally {\n      setLoadingId(null)\n    }\n  }\n\n  const handleDelete = async (employee: Employee) => {\n    if (!confirm(`정말로 '${employee.name}' 직원을 삭제하시겠습니까?`)) {\n      return\n    }\n\n    setLoadingId(employee.id)\n    try {\n      const result = await employeeService.deleteEmployee(employee.id)\n      \n      if (result.success) {\n        toast.success('직원이 삭제되었습니다.')\n        onRefresh()\n      } else {\n        toast.error(result.error || '삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('삭제 중 오류가 발생했습니다.')\n    } finally {\n      setLoadingId(null)\n    }\n  }\n\n  const getRoleDisplayName = (role?: string) => {\n    const roleNames: Record<string, string> = {\n      'app_admin': '앱 관리자',\n      'ceo': 'CEO',\n      'final_approver': '최종 승인자',\n      'middle_manager': '중간 관리자',\n      'lead buyer': '수석 구매자',\n      'buyer': '구매자'\n    }\n    \n    return roleNames[role || ''] || '권한 없음'\n  }\n\n  const getRoleBadgeColor = (role?: string) => {\n    const colorMap: Record<string, string> = {\n      'app_admin': 'bg-purple-100 text-purple-800',\n      'ceo': 'bg-red-100 text-red-800',\n      'final_approver': 'bg-hansl-100 text-hansl-800',\n      'middle_manager': 'bg-green-100 text-green-800',\n      'lead buyer': 'bg-yellow-100 text-yellow-800',\n      'buyer': 'bg-gray-100 text-gray-800'\n    }\n    \n    return colorMap[role || ''] || 'bg-gray-100 text-gray-600'\n  }\n\n  // formatDate는 utils/helpers.ts에서 import\n\n  return (\n    <>\n      {/* Desktop Table View */}\n      <div className=\"hidden lg:block border rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-16 min-w-[50px]\">\n              <SortableHeader\n                sortKey=\"employeeID\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('employeeID' as keyof Employee)}\n              >\n                사번\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-14 min-w-[45px]\">\n              <SortableHeader\n                sortKey=\"name\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('name' as keyof Employee)}\n              >\n                이름\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-12 min-w-[40px]\">\n              <SortableHeader\n                sortKey=\"position\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('position' as keyof Employee)}\n              >\n                직급\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-16 min-w-[50px]\">\n              <SortableHeader\n                sortKey=\"department\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('department' as keyof Employee)}\n              >\n                부서\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-20 min-w-[70px]\">\n              <SortableHeader\n                sortKey=\"phone\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('phone' as keyof Employee)}\n              >\n                연락처\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-32 min-w-[100px]\">\n              <SortableHeader\n                sortKey=\"email\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('email' as keyof Employee)}\n              >\n                이메일\n              </SortableHeader>\n            </TableHead>\n            {/* 연차 정보는 모든 사용자에게 표시 */}\n            <TableHead className=\"w-11 min-w-[40px] text-center\">생성</TableHead>\n            <TableHead className=\"w-11 min-w-[40px] text-center\">사용</TableHead>\n            <TableHead className=\"w-11 min-w-[40px] text-center\">남은</TableHead>\n            {/* lg 이상에서만 표시되는 칼럼들 */}\n            <TableHead className=\"hidden lg:table-cell w-18 min-w-[60px]\">\n              <SortableHeader\n                sortKey=\"join_date\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('join_date' as keyof Employee)}\n              >\n                입사일\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"hidden lg:table-cell w-20 min-w-[70px]\">\n              <SortableHeader\n                sortKey=\"birthday\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('birthday' as keyof Employee)}\n              >\n                생년월일\n              </SortableHeader>\n            </TableHead>\n            {/* HR/Admin만 볼 수 있는 민감한 정보 */}\n            {isHRorAdmin && (\n              <>\n                <TableHead className=\"hidden xl:table-cell w-14 min-w-[45px]\">은행</TableHead>\n                <TableHead className=\"hidden xl:table-cell w-24 min-w-[80px]\">계좌번호</TableHead>\n                <TableHead className=\"hidden 2xl:table-cell min-w-[120px]\">주소</TableHead>\n                <TableHead>\n                  <SortableHeader\n                    sortKey=\"purchase_role\"\n                    currentSortKey={sortConfig.key as string | null}\n                    sortDirection={sortConfig.direction}\n                    onSort={() => handleSort('purchase_role' as keyof Employee)}\n                  >\n                    권한\n                  </SortableHeader>\n                </TableHead>\n                <TableHead>\n                  <SortableHeader\n                    sortKey=\"slack_id\"\n                    currentSortKey={sortConfig.key as string | null}\n                    sortDirection={sortConfig.direction}\n                    onSort={() => handleSort('slack_id' as keyof Employee)}\n                  >\n                    Slack ID\n                  </SortableHeader>\n                </TableHead>\n                <TableHead>\n                  <SortableHeader\n                    sortKey=\"is_active\"\n                    currentSortKey={sortConfig.key as string | null}\n                    sortDirection={sortConfig.direction}\n                    onSort={() => handleSort('is_active' as keyof Employee)}\n                  >\n                    상태\n                  </SortableHeader>\n                </TableHead>\n              </>\n            )}\n                <TableHead className=\"w-16 min-w-[50px]\">작업</TableHead>\n              </TableRow>\n            </TableHeader>\n        <TableBody>\n          {employees.length === 0 ? (\n            <TableRow>\n              <TableCell colSpan={canViewSensitive ? 14 : 7} className=\"text-center py-8 text-gray-500\">\n                등록된 직원이 없습니다.\n              </TableCell>\n            </TableRow>\n          ) : (\n            sortedData.map((employee) => (\n              <TableRow key={employee.id}>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">\n                  {employee.employeeID || employee.employee_number || employee.id.slice(0, 8)}\n                </TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">\n                  {employee.name}\n                </TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.position || '-'}</TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.department || '-'}</TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.phone || '-'}</TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.email || '-'}</TableCell>\n                {/* 연차 정보는 모든 사용자에게 표시 */}\n                <TableCell className=\"text-center text-[11px] px-1 py-1.5\">\n                  {employee.annual_leave_granted_current_year || 0}\n                </TableCell>\n                <TableCell className=\"text-center text-[11px] px-1 py-1.5\">\n                  {employee.used_annual_leave || 0}\n                </TableCell>\n                <TableCell className=\"text-center text-[11px] px-1 py-1.5\">\n                  {employee.remaining_annual_leave !== undefined \n                    ? employee.remaining_annual_leave\n                    : '-'}\n                </TableCell>\n                {/* lg 이상에서만 표시되는 칼럼들 */}\n                <TableCell className=\"hidden lg:table-cell text-[11px] px-2 py-1.5\">\n                  {formatDate(employee.join_date)}\n                </TableCell>\n                <TableCell className=\"hidden lg:table-cell text-[11px] px-2 py-1.5\">\n                  {formatDate(employee.birthday)}\n                </TableCell>\n                {/* HR/Admin만 볼 수 있는 민감한 정보 */}\n                {isHRorAdmin && (\n                  <>\n                    <TableCell className=\"hidden xl:table-cell text-[11px] px-2 py-1.5\">{employee.bank || '-'}</TableCell>\n                    <TableCell className=\"hidden xl:table-cell text-[11px] px-2 py-1.5\">{employee.bank_account || '-'}</TableCell>\n                    <TableCell className=\"hidden 2xl:table-cell text-[11px] px-2 py-1.5\">{employee.adress || '-'}</TableCell>\n                    <TableCell className=\"px-2 py-1.5\">\n                      <Badge\n                        className={`text-[10px] px-1.5 py-0.5 ${getRoleBadgeColor(employee.purchase_role)}`}\n                      >\n                        {getRoleDisplayName(employee.purchase_role)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.slack_id || '-'}</TableCell>\n                    <TableCell className=\"px-2 py-1.5\">\n                      <Badge\n                        variant={employee.is_active ? 'default' : 'secondary'}\n                        className={`text-[10px] px-1.5 py-0.5 ${employee.is_active ? 'bg-green-100 text-green-800' : ''}`}\n                      >\n                        {employee.is_active ? '활성' : '비활성'}\n                      </Badge>\n                    </TableCell>\n                  </>\n                )}\n                <TableCell className=\"px-1 py-1.5\">\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"h-7 w-7 p-0\"\n                        disabled={loadingId === employee.id}\n                      >\n                        <MoreHorizontal className=\"h-3 w-3\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem onClick={() => onView(employee)}>\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        상세 보기\n                      </DropdownMenuItem>\n                      {canEdit && (\n                        <>\n                          <DropdownMenuItem onClick={() => onEdit(employee)}>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            수정\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => handleToggleStatus(employee)}>\n                            {employee.is_active ? (\n                              <>\n                                <ToggleLeft className=\"mr-2 h-4 w-4\" />\n                                비활성화\n                              </>\n                            ) : (\n                              <>\n                                <ToggleRight className=\"mr-2 h-4 w-4\" />\n                                활성화\n                              </>\n                            )}\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => handleDelete(employee)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            삭제\n                          </DropdownMenuItem>\n                        </>\n                      )}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n          </Table>\n        </div>\n      </div>\n\n      {/* Tablet View */}\n      <div className=\"hidden md:block lg:hidden\">\n        <div className=\"overflow-x-auto border rounded-lg\">\n          <table className=\"w-full min-w-[700px]\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-16\">사번</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-20\">이름</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-20\">직급</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-24\">부서</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm\">연락처</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm\">이메일</th>\n                {isHRorAdmin && (\n                  <>\n                    <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-24\">권한</th>\n                    <th className=\"text-center p-3 font-medium text-gray-900 text-sm w-16\">상태</th>\n                  </>\n                )}\n                <th className=\"text-center p-3 font-medium text-gray-900 text-sm w-16\">작업</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {sortedData.length === 0 ? (\n                <tr>\n                  <td colSpan={isHRorAdmin ? 9 : 7} className=\"text-center py-8 text-gray-500\">\n                    등록된 직원이 없습니다.\n                  </td>\n                </tr>\n              ) : (\n                sortedData.map((employee) => (\n                  <tr key={employee.id} className=\"hover:bg-gray-50\">\n                    <td className=\"p-3 text-sm\">\n                      {employee.employeeID || employee.employee_number || employee.id.slice(0, 8)}\n                    </td>\n                    <td className=\"p-3 text-sm font-medium\">{employee.name}</td>\n                    <td className=\"p-3 text-sm\">{employee.position || '-'}</td>\n                    <td className=\"p-3 text-sm\">{employee.department || '-'}</td>\n                    <td className=\"p-3 text-sm\">{employee.phone || '-'}</td>\n                    <td className=\"p-3 text-sm\">{employee.email || '-'}</td>\n                    {isHRorAdmin && (\n                      <>\n                        <td className=\"p-3\">\n                          <Badge className={`text-xs ${getRoleBadgeColor(employee.purchase_role)}`}>\n                            {getRoleDisplayName(employee.purchase_role)}\n                          </Badge>\n                        </td>\n                        <td className=\"p-3 text-center\">\n                          <Badge\n                            variant={employee.is_active ? 'default' : 'secondary'}\n                            className={`text-xs ${employee.is_active ? 'bg-green-100 text-green-800' : ''}`}\n                          >\n                            {employee.is_active ? '활성' : '비활성'}\n                          </Badge>\n                        </td>\n                      </>\n                    )}\n                    <td className=\"p-3 text-center\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => onView(employee)}>\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            상세 보기\n                          </DropdownMenuItem>\n                          {canEdit && (\n                            <>\n                              <DropdownMenuItem onClick={() => onEdit(employee)}>\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                수정\n                              </DropdownMenuItem>\n                              <DropdownMenuItem onClick={() => handleToggleStatus(employee)}>\n                                {employee.is_active ? (\n                                  <>\n                                    <ToggleLeft className=\"mr-2 h-4 w-4\" />\n                                    비활성화\n                                  </>\n                                ) : (\n                                  <>\n                                    <ToggleRight className=\"mr-2 h-4 w-4\" />\n                                    활성화\n                                  </>\n                                )}\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleDelete(employee)}\n                                className=\"text-red-600\"\n                              >\n                                <Trash2 className=\"mr-2 h-4 w-4\" />\n                                삭제\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Mobile Card View */}\n      <div className=\"block md:hidden space-y-3\">\n        {sortedData.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            등록된 직원이 없습니다.\n          </div>\n        ) : (\n          sortedData.map((employee) => (\n            <MobileCard key={employee.id}>\n              <MobileCardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <span>{employee.name}</span>\n                  <Badge\n                    variant={employee.is_active ? 'default' : 'secondary'}\n                    className={employee.is_active ? 'bg-green-100 text-green-800' : ''}\n                  >\n                    {employee.is_active ? '활성' : '비활성'}\n                  </Badge>\n                </div>\n              </MobileCardHeader>\n              \n              <MobileCardItem label=\"사번\" value={employee.employeeID || employee.employee_number || employee.id.slice(0, 8)} />\n              <MobileCardItem label=\"직급\" value={employee.position || '-'} />\n              <MobileCardItem label=\"부서\" value={employee.department || '-'} />\n              <MobileCardItem label=\"연락처\" value={employee.phone || '-'} />\n              <MobileCardItem label=\"이메일\" value={employee.email || '-'} />\n              \n              {canViewSensitive && (\n                <>\n                  <MobileCardItem \n                    label=\"권한\" \n                    value={\n                      <Badge className={getRoleBadgeColor(employee.purchase_role)}>\n                        {getRoleDisplayName(employee.purchase_role)}\n                      </Badge>\n                    } \n                  />\n                  <MobileCardItem label=\"Slack ID\" value={employee.slack_id || '-'} />\n                  <MobileCardItem label=\"주소\" value={employee.adress || '-'} />\n                  <MobileCardItem label=\"은행\" value={employee.bank || '-'} />\n                  <MobileCardItem label=\"계좌번호\" value={employee.bank_account || '-'} />\n                  <MobileCardItem \n                    label=\"연차\" \n                    value={employee.remaining_annual_leave !== undefined ? `${employee.remaining_annual_leave}일` : '-'} \n                  />\n                </>\n              )}\n              \n              <MobileCardActions>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => onView(employee)}\n                >\n                  <Eye className=\"w-4 h-4\" />\n                </Button>\n                {canEdit && (\n                  <>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => onEdit(employee)}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleToggleStatus(employee)}\n                      disabled={loadingId === employee.id}\n                    >\n                      {employee.is_active ? (\n                        <ToggleLeft className=\"w-4 h-4\" />\n                      ) : (\n                        <ToggleRight className=\"w-4 h-4\" />\n                      )}\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"text-red-600\"\n                      onClick={() => handleDelete(employee)}\n                      disabled={loadingId === employee.id}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </>\n                )}\n              </MobileCardActions>\n            </MobileCard>\n          ))\n        )}\n      </div>\n    </>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Employee, EmployeeFormData, PurchaseRole } from '@/types/purchase'\nimport { Button } from '@/components/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useForm } from 'react-hook-form'\nimport { employeeService } from '@/services/employeeService'\nimport { toast } from 'sonner'\n\ninterface EmployeeModalProps {\n  isOpen: boolean\n  onClose: () => void\n  employee?: Employee | null\n  onSave: () => void\n  mode: 'create' | 'edit' | 'view'\n}\n\nconst PURCHASE_ROLES: { value: PurchaseRole; label: string }[] = [\n  { value: 'app_admin', label: '앱 관리자' },\n  { value: 'ceo', label: 'CEO' },\n  { value: 'final_approver', label: '최종 승인자' },\n  { value: 'middle_manager', label: '중간 관리자' },\n  { value: 'lead buyer', label: '수석 구매자' },\n  { value: 'buyer', label: '구매자' },\n]\n\nexport default function EmployeeModal({ isOpen, onClose, employee, onSave, mode }: EmployeeModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [departments, setDepartments] = useState<string[]>([])\n  const [positions, setPositions] = useState<string[]>([])\n\n  const form = useForm<EmployeeFormData>({\n    defaultValues: {\n      name: '',\n      email: '',\n      phone: '',\n      position: '',\n      department: '',\n      purchase_role: [],\n      slack_id: '',\n    }\n  })\n\n  useEffect(() => {\n    // 부서와 직급 목록 로드\n    const loadOptions = async () => {\n      const [deptResult, posResult] = await Promise.all([\n        employeeService.getDepartments(),\n        employeeService.getPositions()\n      ])\n      \n      if (deptResult.success) {\n        setDepartments(deptResult.data || [])\n      }\n      \n      if (posResult.success) {\n        setPositions(posResult.data || [])\n      }\n    }\n    \n    loadOptions()\n  }, [])\n\n  useEffect(() => {\n    if (employee && isOpen) {\n      form.reset({\n        name: employee.name || '',\n        email: employee.email || '',\n        phone: employee.phone || '',\n        position: employee.position || '',\n        department: employee.department || '',\n        purchase_role: employee.purchase_role ? employee.purchase_role.split(',') : [],\n        slack_id: employee.slack_id || '',\n      })\n    } else if (!employee && isOpen) {\n      form.reset({\n        name: '',\n        email: '',\n        phone: '',\n        position: '',\n        department: '',\n        purchase_role: [],\n        slack_id: '',\n      })\n    }\n  }, [employee, isOpen, form])\n\n  const onSubmit = async (data: EmployeeFormData) => {\n    setIsSubmitting(true)\n    \n    try {\n      let result\n      \n      if (mode === 'create') {\n        result = await employeeService.createEmployee(data)\n      } else if (mode === 'edit' && employee) {\n        result = await employeeService.updateEmployee(employee.id, data)\n      }\n\n      if (result?.success) {\n        toast.success(mode === 'create' ? '직원이 등록되었습니다.' : '직원 정보가 수정되었습니다.')\n        onSave()\n        onClose()\n      } else {\n        toast.error(result?.error || '처리 중 오류가 발생했습니다.')\n      }\n    } catch (error) {\n      toast.error('처리 중 오류가 발생했습니다.')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const getTitle = () => {\n    switch (mode) {\n      case 'create': return '직원 등록'\n      case 'edit': return '직원 수정'\n      case 'view': return '직원 상세'\n      default: return '직원'\n    }\n  }\n\n  const isReadOnly = mode === 'view'\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-[95vw] sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{getTitle()}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                rules={{\n                  required: '이름을 입력해주세요.'\n                }}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>이름 *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"이름을 입력하세요\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                rules={{\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: \"올바른 이메일 형식을 입력해주세요.\"\n                  }\n                }}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>이메일</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"email\"\n                        placeholder=\"user@example.com\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>전화번호</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"010-0000-0000\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"slack_id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Slack ID</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"U01234567890\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"department\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>부서</FormLabel>\n                    <FormControl>\n                      {isReadOnly ? (\n                        <Input {...field} disabled />\n                      ) : (\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"부서를 선택하세요\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {departments.map((dept) => (\n                              <SelectItem key={dept} value={dept}>\n                                {dept}\n                              </SelectItem>\n                            ))}\n                            <SelectItem value=\"custom\">직접 입력</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      )}\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"position\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>직급</FormLabel>\n                    <FormControl>\n                      {isReadOnly ? (\n                        <Input {...field} disabled />\n                      ) : (\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"직급을 선택하세요\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {positions.map((pos) => (\n                              <SelectItem key={pos} value={pos}>\n                                {pos}\n                              </SelectItem>\n                            ))}\n                            <SelectItem value=\"custom\">직접 입력</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      )}\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"purchase_role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>권한</FormLabel>\n                    <FormControl>\n                      <Select \n                        onValueChange={(value) => field.onChange(value === 'none' ? [] : [value])} \n                        defaultValue={field.value?.[0] || 'none'}\n                        disabled={isReadOnly}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"권한을 선택하세요\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">권한 없음</SelectItem>\n                          {PURCHASE_ROLES.map((role) => (\n                            <SelectItem key={role.value} value={role.value}>\n                              {role.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {mode === 'view' && employee && (\n              <div className=\"pt-4 border-t\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-500\">상태:</span>\n                    <span className={`ml-2 px-2 py-1 rounded text-xs ${\n                      employee.is_active \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-gray-100 text-gray-600'\n                    }`}>\n                      {employee.is_active ? '활성' : '비활성'}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">등록일:</span>\n                    <span className=\"ml-2\">\n                      {employee.created_at ? new Date(employee.created_at).toLocaleDateString('ko-KR') : '-'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <DialogFooter className=\"gap-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                {mode === 'view' ? '닫기' : '취소'}\n              </Button>\n              {!isReadOnly && (\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting \n                    ? (mode === 'create' ? '등록 중...' : '수정 중...')\n                    : (mode === 'create' ? '등록' : '수정')\n                  }\n                </Button>\n              )}\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  )\n}","import ExcelJS from 'exceljs';\n\nexport interface AttendanceData {\n  employeeName: string;\n  employeeId: string;\n  department: string;\n  startDate: string;\n  endDate: string;\n  records: AttendanceRecord[];\n}\n\nexport interface AttendanceRecord {\n  date: string;\n  dayOfWeek: string;\n  employeeName: string;\n  employeeId: string;\n  department: string;\n  position: string;\n  workType: string;\n  clockIn?: string;\n  clockOut?: string;\n  status: string;\n  remarks?: string;\n}\n\nexport async function generateAttendanceExcel(data: AttendanceData): Promise<Blob> {\n  const workbook = new ExcelJS.Workbook();\n  const worksheet = workbook.addWorksheet('출근현황표');\n\n  // 엑셀 페이지 설정\n  worksheet.pageSetup = {\n    paperSize: 9, // A4\n    orientation: 'portrait',\n    margins: {\n      left: 0.7,\n      right: 0.7,\n      top: 0.75,\n      bottom: 0.75,\n      header: 0.3,\n      footer: 0.3,\n    },\n  };\n\n  // 컬럼 너비 설정 (이미지에서 본 레이아웃에 맞춤)\n  worksheet.columns = [\n    { width: 12 }, // 날짜\n    { width: 8 },  // 이름\n    { width: 12 }, // 사번\n    { width: 8 },  // 부서\n    { width: 6 },  // 직급\n    { width: 8 },  // 근무형태\n    { width: 12 }, // 출근시간\n    { width: 12 }, // 퇴근시간\n    { width: 8 },  // 출퇴근상태\n    { width: 8 },  // 근무상태\n  ];\n\n  // 제목 헤더 (1페이지 표시)\n  const titleRow = worksheet.addRow(['1']);\n  titleRow.height = 25;\n  worksheet.mergeCells('A1:J1');\n  const titleCell = worksheet.getCell('A1');\n  titleCell.value = '1';\n  titleCell.font = { name: '맑은 고딕', size: 14, bold: true };\n  titleCell.alignment = { horizontal: 'center', vertical: 'middle' };\n\n  // 공백 행\n  worksheet.addRow([]);\n\n  // 직원명과 조회기간 헤더\n  const employeeRow = worksheet.addRow([`${data.employeeName} 내역 (21)`]);\n  employeeRow.height = 20;\n  worksheet.mergeCells('A3:J3');\n  const employeeCell = worksheet.getCell('A3');\n  employeeCell.font = { name: '맑은 고딕', size: 12, bold: true };\n  employeeCell.alignment = { horizontal: 'left', vertical: 'middle' };\n\n  const periodRow = worksheet.addRow([`조회기간: ${data.startDate} ~ ${data.endDate}`]);\n  periodRow.height = 20;\n  worksheet.mergeCells('A4:J4');\n  const periodCell = worksheet.getCell('A4');\n  periodCell.font = { name: '맑은 고딕', size: 10 };\n  periodCell.alignment = { horizontal: 'left', vertical: 'middle' };\n\n  // 테이블 헤더\n  const headerRow = worksheet.addRow([\n    '날짜',\n    '이름', \n    '사번',\n    '부서',\n    '직급',\n    '근무형태',\n    '출근시간',\n    '퇴근시간',\n    '출퇴근상태',\n    '근무상태'\n  ]);\n  \n  headerRow.height = 25;\n  \n  // 헤더 스타일링\n  headerRow.eachCell((cell, colNumber) => {\n    cell.font = { name: '맑은 고딕', size: 10, bold: true };\n    cell.alignment = { horizontal: 'center', vertical: 'middle' };\n    cell.border = {\n      top: { style: 'thin' },\n      left: { style: 'thin' },\n      bottom: { style: 'thin' },\n      right: { style: 'thin' }\n    };\n    cell.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: 'FFE0E0E0' }\n    };\n  });\n\n  // 주말/공휴일 확인 함수\n  const isWeekendOrHolidayFunc = (dateString: string): boolean => {\n    const date = new Date(dateString.split('(')[0]); // 날짜 부분만 추출\n    const dayOfWeek = date.getDay();\n    \n    // 주말 (토요일: 6, 일요일: 0)\n    if (dayOfWeek === 0 || dayOfWeek === 6) {\n      return true;\n    }\n    \n    // 공휴일 (간단한 공휴일 목록 - 확장 가능)\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    \n    // 기본 공휴일 (추가 필요시 확장)\n    const holidays = [\n      `${year}-01-01`, // 신정\n      `${year}-03-01`, // 삼일절\n      `${year}-05-05`, // 어린이날\n      `${year}-06-06`, // 현충일\n      `${year}-08-15`, // 광복절\n      `${year}-10-03`, // 개천절\n      `${year}-10-09`, // 한글날\n      `${year}-12-25`, // 크리스마스\n    ];\n    \n    const dateStr = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    return holidays.includes(dateStr);\n  };\n\n  // 데이터 행 추가\n  data.records.forEach(record => {\n    // 연차/공휴일 판단을 위한 근무상태 결정\n    let workStatus = record.remarks || '-';\n    const isWeekendOrHoliday = isWeekendOrHolidayFunc(record.date);\n    \n    // 연차나 공휴일인 경우 근무상태에 표시\n    if (record.remarks && record.remarks.includes('연차')) {\n      workStatus = '연차';\n    } else if (isWeekendOrHoliday) {\n      const date = new Date(record.date.split('(')[0]);\n      const dayOfWeek = date.getDay();\n      \n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        workStatus = '주말';\n      } else {\n        workStatus = '공휴일';\n      }\n    }\n\n    const dataRow = worksheet.addRow([\n      record.date,\n      record.employeeName,\n      record.employeeId,\n      record.department,\n      record.position,\n      record.workType,\n      record.clockIn || '-',\n      record.clockOut || '-',\n      record.status,\n      workStatus\n    ]);\n\n    dataRow.height = 20;\n    \n    const isSpecialDay = isWeekendOrHoliday;\n    const isLeaveDay = record.remarks && record.remarks.includes('연차');\n    \n    // 데이터 행 스타일링\n    dataRow.eachCell((cell, colNumber) => {\n      cell.font = { name: '맑은 고딕', size: 9 };\n      cell.alignment = { \n        horizontal: colNumber === 1 ? 'center' : 'left', // 날짜는 가운데, 나머지는 왼쪽\n        vertical: 'middle' \n      };\n      cell.border = {\n        top: { style: 'thin' },\n        left: { style: 'thin' },\n        bottom: { style: 'thin' },\n        right: { style: 'thin' }\n      };\n      \n      // 출근시간과 퇴근시간은 가운데 정렬\n      if (colNumber === 7 || colNumber === 8) {\n        cell.alignment = { horizontal: 'center', vertical: 'middle' };\n      }\n      \n      // 색상 우선순위: 연차 > 주말/공휴일 > 일반 상태\n      if (isLeaveDay) {\n        // 연차는 연녹색으로 표기\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFE8F5E8' } // 연녹색\n        };\n      } else if (isSpecialDay) {\n        // 주말/공휴일은 연붉은색으로 표기\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFFFE8E8' } // 연붉은색\n        };\n      }\n    });\n  });\n\n  // 엑셀 파일을 Blob으로 변환\n  const buffer = await workbook.xlsx.writeBuffer();\n  return new Blob([buffer], { \n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n  });\n}\n\n// 요일 계산 함수\nexport function getDayOfWeek(dateString: string): string {\n  const date = new Date(dateString);\n  const days = ['일', '월', '화', '수', '목', '금', '토'];\n  return days[date.getDay()];\n}\n\n// 날짜 포맷팅 함수 (YYYY-MM-DD를 YYYY-MM-DD(요일)로 변환)\nexport function formatDateWithDay(dateString: string): string {\n  const dayOfWeek = getDayOfWeek(dateString);\n  return `${dateString}(${dayOfWeek})`;\n}","import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Combobox, ComboboxOption } from '@/components/ui/combobox'\nimport { Download, Calendar, User, X } from 'lucide-react'\nimport { Employee } from '@/types/purchase'\nimport { toast } from 'sonner'\nimport { createClient } from '@/lib/supabase/client'\nimport { generateAttendanceExcel, formatDateWithDay } from '@/utils/exceljs/generateAttendanceExcel'\n\ninterface AttendanceDownloadProps {\n  employees: Employee[]\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport default function AttendanceDownload({ employees, isOpen, onClose }: AttendanceDownloadProps) {\n  const [selectedEmployee, setSelectedEmployee] = useState<string>('')\n  const [startDate, setStartDate] = useState<string>('')\n  const [endDate, setEndDate] = useState<string>('')\n  const [isDownloading, setIsDownloading] = useState(false)\n  \n  const supabase = createClient()\n\n  // 기본 날짜 설정 (이번 달)\n  const setCurrentMonth = () => {\n    const now = new Date()\n    const start = new Date(now.getFullYear(), now.getMonth(), 1)\n    const end = new Date(now.getFullYear(), now.getMonth() + 1, 0)\n    \n    setStartDate(start.toISOString().split('T')[0])\n    setEndDate(end.toISOString().split('T')[0])\n  }\n\n  // 지난 달 설정\n  const setLastMonth = () => {\n    const now = new Date()\n    const start = new Date(now.getFullYear(), now.getMonth() - 1, 1)\n    const end = new Date(now.getFullYear(), now.getMonth(), 0)\n    \n    setStartDate(start.toISOString().split('T')[0])\n    setEndDate(end.toISOString().split('T')[0])\n  }\n\n  const handleDownload = async () => {\n    if (!selectedEmployee) {\n      toast.error('직원을 선택해주세요.')\n      return\n    }\n    \n    if (!startDate || !endDate) {\n      toast.error('조회 기간을 설정해주세요.')\n      return\n    }\n    \n    if (new Date(startDate) > new Date(endDate)) {\n      toast.error('시작일이 종료일보다 늦을 수 없습니다.')\n      return\n    }\n\n    setIsDownloading(true)\n    \n    try {\n      // 선택된 직원 정보 가져오기\n      const selectedEmp = employees.find(emp => emp.id === selectedEmployee)\n      if (!selectedEmp) {\n        throw new Error('선택된 직원 정보를 찾을 수 없습니다.')\n      }\n\n      // 출근 기록 조회\n      const { data: attendanceRecords, error } = await supabase\n        .from('attendance_records')\n        .select('*')\n        .eq('employee_id', selectedEmployee)\n        .gte('date', startDate)\n        .lte('date', endDate)\n        .order('date', { ascending: true })\n\n      if (error) {\n        throw new Error('출근 기록을 조회하는데 실패했습니다.')\n      }\n\n      // 날짜 범위 내의 모든 날짜 생성 (출근 기록이 없는 날도 포함)\n      const allDates: string[] = []\n      const start = new Date(startDate)\n      const end = new Date(endDate)\n      \n      for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {\n        allDates.push(date.toISOString().split('T')[0])\n      }\n\n      // 출근 기록을 날짜별로 매핑\n      const recordMap = new Map()\n      attendanceRecords?.forEach(record => {\n        recordMap.set(record.date, record)\n      })\n\n      // 엑셀 데이터 구성\n      const excelRecords = allDates.map(date => {\n        const record = recordMap.get(date)\n        const dateWithDay = formatDateWithDay(date)\n        const dayOfWeek = dateWithDay.split('(')[1]?.split(')')[0] || ''\n        \n        // 주말인지 확인 (토요일: 6, 일요일: 0)\n        const dateObj = new Date(date)\n        const isWeekend = dateObj.getDay() === 0 || dateObj.getDay() === 6\n        \n        return {\n          date: dateWithDay,\n          dayOfWeek,\n          employeeName: selectedEmp.name || '',\n          employeeId: selectedEmp.employeeID || selectedEmp.employee_number || '',\n          department: selectedEmp.department || '',\n          position: selectedEmp.position || '',\n          workType: '사원', // 기본값, 필요시 데이터베이스에서 가져올 수 있음\n          clockIn: record?.clock_in || (isWeekend ? '-' : ''),\n          clockOut: record?.clock_out || (isWeekend ? '-' : ''),\n          status: record?.status === '정상 출근' ? '정상 출근' : (record?.status || (isWeekend ? '' : '')),\n          remarks: record?.remarks || ''\n        }\n      })\n\n      // 엑셀 파일 생성\n      const excelData = {\n        employeeName: selectedEmp.name || '',\n        employeeId: selectedEmp.employee_id || '',\n        department: selectedEmp.department || '',\n        startDate,\n        endDate,\n        records: excelRecords\n      }\n\n      const blob = await generateAttendanceExcel(excelData)\n      \n      // 파일 다운로드\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = `출근현황표_${selectedEmp.name}_${startDate}_${endDate}.xlsx`\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      window.URL.revokeObjectURL(url)\n      \n      toast.success('출근현황표가 다운로드되었습니다.')\n      \n      // 다운로드 성공 후 모달 닫기\n      onClose()\n      \n    } catch (error) {\n      console.error('출근현황표 다운로드 오류:', error)\n      toast.error(error instanceof Error ? error.message : '다운로드 중 오류가 발생했습니다.')\n    } finally {\n      setIsDownloading(false)\n    }\n  }\n\n  // 모달이 닫힐 때 상태 초기화\n  const handleClose = () => {\n    setSelectedEmployee('')\n    setStartDate('')\n    setEndDate('')\n    setIsDownloading(false)\n    onClose()\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-[520px] max-h-[85vh] overflow-y-auto\">\n        {/* 헤더 */}\n        <DialogHeader className=\"pb-6 space-y-3\">\n          <DialogTitle className=\"flex items-center text-2xl font-bold text-gray-900\">\n            <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-hansl-400 to-hansl-600 flex items-center justify-center mr-4 shadow-sm\">\n              <Calendar className=\"w-6 h-6 text-white\" />\n            </div>\n            출근현황표 다운로드\n          </DialogTitle>\n          <p className=\"text-gray-600 leading-relaxed pl-16\">\n            직원과 조회 기간을 선택하여 출근현황을<br />\n            엑셀 파일로 간편하게 다운로드하세요\n          </p>\n        </DialogHeader>\n        \n        {/* 콘텐츠 */}\n        <div className=\"space-y-8 py-2\">\n          {/* 직원 선택 섹션 */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-blue-50 flex items-center justify-center\">\n                <User className=\"w-4 h-4 text-blue-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">직원 선택</h3>\n            </div>\n            <div className=\"pl-11\">\n              <Combobox\n                value={selectedEmployee}\n                onValueChange={setSelectedEmployee}\n                options={employees\n                  .filter(emp => emp.name && emp.name.trim() !== '')\n                  .sort((a, b) => (a.name || '').localeCompare(b.name || ''))\n                  .map((employee): ComboboxOption => ({\n                    value: employee.id,\n                    label: `${employee.name} (${employee.department || '부서없음'})`\n                  }))}\n                placeholder=\"직원명 검색...\"\n                searchPlaceholder=\"직원 이름 검색...\"\n                emptyText=\"검색 결과가 없습니다\"\n                className=\"h-10 text-sm border-gray-200 focus:border-hansl-400 focus:ring-1 focus:ring-hansl-100\"\n              />\n            </div>\n          </div>\n\n          {/* 기간 선택 섹션 */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-green-50 flex items-center justify-center\">\n                <Calendar className=\"w-4 h-4 text-green-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">조회 기간</h3>\n            </div>\n            <div className=\"pl-11 space-y-4\">\n              {/* 날짜 입력 */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-gray-700\">시작일</label>\n                  <Input\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => setStartDate(e.target.value)}\n                    className=\"h-9 text-sm border-gray-200 focus:border-hansl-400 focus:ring-1 focus:ring-hansl-100\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-gray-700\">종료일</label>\n                  <Input\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => setEndDate(e.target.value)}\n                    className=\"h-9 text-sm border-gray-200 focus:border-hansl-400 focus:ring-1 focus:ring-hansl-100\"\n                  />\n                </div>\n              </div>\n              \n              {/* 빠른 선택 */}\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-gray-700\">빠른 선택</p>\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={setCurrentMonth}\n                    className=\"h-8 px-4 text-sm border-gray-200 hover:bg-hansl-50 hover:border-hansl-300 hover:text-hansl-700 transition-colors\"\n                  >\n                    이번 달\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={setLastMonth}\n                    className=\"h-8 px-4 text-sm border-gray-200 hover:bg-hansl-50 hover:border-hansl-300 hover:text-hansl-700 transition-colors\"\n                  >\n                    지난 달\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 하단 액션 버튼 */}\n        <div className=\"flex gap-3 pt-6 mt-2 border-t border-gray-100\">\n          <Button\n            variant=\"outline\"\n            onClick={handleClose}\n            className=\"flex-1 h-10 text-sm font-medium border-gray-200 hover:bg-gray-50 transition-colors\"\n            disabled={isDownloading}\n          >\n            취소\n          </Button>\n          <Button\n            onClick={handleDownload}\n            disabled={isDownloading || !selectedEmployee || !startDate || !endDate}\n            className=\"flex-1 h-10 text-sm bg-gradient-to-r from-hansl-500 to-hansl-600 hover:from-hansl-600 hover:to-hansl-700 text-white font-medium shadow-sm transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            {isDownloading ? '다운로드 중...' : '엑셀 다운로드'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Employee, EmployeeFilters as EmployeeFiltersType } from '@/types/purchase'\nimport { employeeService } from '@/services/employeeService'\nimport EmployeeFilters from '@/components/employee/EmployeeFilters'\nimport EmployeeTable from '@/components/employee/EmployeeTable'\nimport EmployeeModal from '@/components/employee/EmployeeModal'\nimport AttendanceDownload from '@/components/employee/AttendanceDownload'\nimport { toast } from 'sonner'\n// XLSX는 사용할 때만 동적으로 import (성능 최적화)\n\ntype ModalMode = 'create' | 'edit' | 'view'\n\nexport default function EmployeeMain() {\n  const [employees, setEmployees] = useState<Employee[]>([])\n  const [filteredEmployees, setFilteredEmployees] = useState<Employee[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filters, setFilters] = useState<EmployeeFiltersType>({})\n  \n  // 모달 상태\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n  const [modalMode, setModalMode] = useState<ModalMode>('create')\n  \n  // 출근현황표 모달 상태\n  const [isAttendanceModalOpen, setIsAttendanceModalOpen] = useState(false)\n\n  // 직원 목록 로드\n  const loadEmployees = async () => {\n    setLoading(true)\n    try {\n      const result = await employeeService.getEmployees(filters)\n      \n      if (result.success && result.data) {\n        setEmployees(result.data)\n        setFilteredEmployees(result.data)\n      } else {\n        toast.error(result.error || '직원 목록을 불러오는데 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('직원 목록을 불러오는 중 오류가 발생했습니다.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 초기 로드\n  useEffect(() => {\n    loadEmployees()\n  }, [])\n\n  // 필터 변경 시 직원 목록 다시 로드\n  useEffect(() => {\n    loadEmployees()\n  }, [filters])\n\n  // 모달 핸들러\n  const handleCreateNew = () => {\n    setSelectedEmployee(null)\n    setModalMode('create')\n    setIsModalOpen(true)\n  }\n\n  const handleEdit = (employee: Employee) => {\n    setSelectedEmployee(employee)\n    setModalMode('edit')\n    setIsModalOpen(true)\n  }\n\n  const handleView = (employee: Employee) => {\n    setSelectedEmployee(employee)\n    setModalMode('view')\n    setIsModalOpen(true)\n  }\n\n  const handleModalClose = () => {\n    setIsModalOpen(false)\n    setSelectedEmployee(null)\n  }\n\n  const handleSave = () => {\n    loadEmployees()\n  }\n\n  // Excel 내보내기 (동적 import로 성능 최적화)\n  const handleExport = async () => {\n    try {\n      const result = await employeeService.getEmployeesForExport()\n      \n      if (result.success && result.data) {\n        // XLSX를 사용할 때만 동적으로 import\n        const XLSX = await import('xlsx')\n        \n        const ws = XLSX.utils.json_to_sheet(result.data)\n        const wb = XLSX.utils.book_new()\n        XLSX.utils.book_append_sheet(wb, ws, '직원 목록')\n        \n        // 파일명에 현재 날짜 추가\n        const today = new Date().toISOString().slice(0, 10)\n        const filename = `직원_목록_${today}.xlsx`\n        \n        XLSX.writeFile(wb, filename)\n        toast.success('Excel 파일이 다운로드되었습니다.')\n      } else {\n        toast.error(result.error || 'Excel 내보내기에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('Excel 내보내기 중 오류가 발생했습니다.')\n    }\n  }\n\n  if (loading && employees.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">직원 목록을 불러오는 중...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n      {/* 필터 섹션 */}\n      <EmployeeFilters\n        filters={filters}\n        onFiltersChange={setFilters}\n        onExport={handleExport}\n        onCreateNew={handleCreateNew}\n        onAttendanceDownload={() => setIsAttendanceModalOpen(true)}\n      />\n\n      {/* 테이블 섹션 */}\n      <div className=\"bg-white rounded-lg border\">\n        <div className=\"p-4 border-b\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium\">직원 목록</h3>\n            <div className=\"text-sm text-gray-600\">\n              {loading ? '로딩 중...' : `총 ${filteredEmployees.length}명의 직원`}\n            </div>\n          </div>\n        </div>\n        \n        <EmployeeTable\n          employees={filteredEmployees}\n          onEdit={handleEdit}\n          onView={handleView}\n          onRefresh={loadEmployees}\n        />\n      </div>\n\n      {/* 직원 모달 */}\n      <EmployeeModal\n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n        employee={selectedEmployee}\n        onSave={handleSave}\n        mode={modalMode}\n      />\n\n      {/* 출근현황표 다운로드 모달 */}\n      <AttendanceDownload\n        employees={employees}\n        isOpen={isAttendanceModalOpen}\n        onClose={() => setIsAttendanceModalOpen(false)}\n      />\n      </div>\n    </>\n  )\n}"],"file":"assets/EmployeeMain-CdhiX7Ts.js"}