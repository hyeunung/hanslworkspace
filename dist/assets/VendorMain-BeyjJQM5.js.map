{"version":3,"mappings":"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","names":["VendorService","createClient","filters","query","data","error","logger","id","vendorData","existingVendor","existingVendorByName","purchaseRequests","currentVendor","selectError","vendorId","vendor","vendorService","VendorFilters","onFiltersChange","onExport","onCreateNew","localSearch","setLocalSearch","useState","handleSearchSubmit","e","handleStatusChange","value","clearFilters","hasFilters","jsxs","jsx","Button","Download","Plus","Search","Input","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","X","VendorTable","vendors","onEdit","onView","onRefresh","loadingId","setLoadingId","sortedData","sortConfig","handleSort","useTableSort","handleToggleStatus","result","toast","handleDelete","Fragment","Table","TableHeader","TableRow","TableHead","SortableHeader","TableBody","TableCell","Badge","contact","idx","formatDate","DropdownMenu","DropdownMenuTrigger","MoreHorizontal","DropdownMenuContent","DropdownMenuItem","Eye","Edit","ToggleLeft","ToggleRight","Trash2","MobileCard","MobileCardHeader","MobileCardItem","MobileCardActions","VendorModal","isOpen","onClose","onSave","mode","isSubmitting","setIsSubmitting","form","useForm","useEffect","onSubmit","getTitle","isReadOnly","Dialog","DialogContent","DialogHeader","DialogTitle","Form","FormField","field","FormItem","FormLabel","FormControl","FormMessage","Textarea","DialogFooter","VendorMain","setVendors","filteredVendors","setFilteredVendors","loading","setLoading","setFilters","isModalOpen","setIsModalOpen","selectedVendor","setSelectedVendor","modalMode","setModalMode","loadVendors","handleCreateNew","handleEdit","handleView","handleModalClose","handleSave","handleExport","XLSX","__vitePreload","ws","wb","filename"],"ignoreList":[],"sources":["../../src/services/vendorService.ts","../../src/components/vendor/VendorFilters.tsx","../../src/components/vendor/VendorTable.tsx","../../src/components/vendor/VendorModal.tsx","../../src/components/vendor/VendorMain.tsx"],"sourcesContent":["import { createClient } from \"@/lib/supabase/client\";\nimport { Vendor, VendorFormData, VendorFilters, VendorContact } from \"@/types/purchase\";\nimport { logger } from \"@/lib/logger\";\n\nclass VendorService {\n  private supabase;\n\n  constructor() {\n    this.supabase = createClient();\n  }\n\n  // 업체 목록 조회\n  async getVendors(filters?: VendorFilters): Promise<{ success: boolean; data?: Vendor[]; error?: string }> {\n    try {\n      let query = this.supabase\n        .from('vendors')\n        .select('*,vendor_contacts(*)')\n        .order('vendor_name');\n\n      // 검색 필터 적용\n      if (filters?.search) {\n        query = query.or(`\n          vendor_name.ilike.%${filters.search}%,\n          business_number.ilike.%${filters.search}%,\n          representative.ilike.%${filters.search}%,\n          contact_phone.ilike.%${filters.search}%,\n          email.ilike.%${filters.search}%\n        `);\n      }\n\n      // 활성 상태 필터 적용\n      if (filters?.is_active !== undefined) {\n        query = query.eq('is_active', filters.is_active);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      logger.error('업체 목록 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 상세 조회\n  async getVendor(id: number): Promise<{ success: boolean; data?: Vendor; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('업체 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 생성\n  async createVendor(vendorData: VendorFormData): Promise<{ success: boolean; data?: Vendor; error?: string }> {\n    try {\n      // 사업자번호 중복 체크\n      if (vendorData.business_number) {\n        const { data: existingVendor } = await this.supabase\n          .from('vendors')\n          .select('id')\n          .eq('business_number', vendorData.business_number)\n          .single();\n\n        if (existingVendor) {\n          return { success: false, error: '이미 등록된 사업자번호입니다.' };\n        }\n      }\n\n      // 업체명 중복 체크\n      const { data: existingVendorByName } = await this.supabase\n        .from('vendors')\n        .select('id')\n        .eq('vendor_name', vendorData.vendor_name)\n        .single();\n\n      if (existingVendorByName) {\n        return { success: false, error: '이미 등록된 업체명입니다.' };\n      }\n\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .insert({\n          ...vendorData,\n          is_active: true\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('업체 생성 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 수정\n  async updateVendor(id: number, vendorData: Partial<VendorFormData>): Promise<{ success: boolean; data?: Vendor; error?: string }> {\n    try {\n      // 사업자번호 중복 체크 (자신 제외)\n      if (vendorData.business_number) {\n        const { data: existingVendor } = await this.supabase\n          .from('vendors')\n          .select('id')\n          .eq('business_number', vendorData.business_number)\n          .neq('id', id)\n          .single();\n\n        if (existingVendor) {\n          return { success: false, error: '이미 등록된 사업자번호입니다.' };\n        }\n      }\n\n      // 업체명 중복 체크 (자신 제외)\n      if (vendorData.vendor_name) {\n        const { data: existingVendorByName } = await this.supabase\n          .from('vendors')\n          .select('id')\n          .eq('vendor_name', vendorData.vendor_name)\n          .neq('id', id)\n          .single();\n\n        if (existingVendorByName) {\n          return { success: false, error: '이미 등록된 업체명입니다.' };\n        }\n      }\n\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .update(vendorData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('업체 수정 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 삭제 (소프트 삭제)\n  async deleteVendor(id: number): Promise<{ success: boolean; error?: string }> {\n    try {\n      // 발주 요청과 연결된 업체인지 확인\n      const { data: purchaseRequests } = await this.supabase\n        .from('purchase_requests')\n        .select('id')\n        .eq('vendor_id', id)\n        .limit(1);\n\n      if (purchaseRequests && purchaseRequests.length > 0) {\n        // 발주 요청과 연결된 업체는 비활성화만 가능\n        const { error } = await this.supabase\n          .from('vendors')\n          .update({ is_active: false })\n          .eq('id', id);\n\n        if (error) throw error;\n\n        return { success: true };\n      } else {\n        // 연결된 데이터가 없으면 완전 삭제\n        const { error } = await this.supabase\n          .from('vendors')\n          .delete()\n          .eq('id', id);\n\n        if (error) throw error;\n\n        return { success: true };\n      }\n    } catch (error) {\n      logger.error('업체 삭제 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 활성화/비활성화 토글\n  async toggleVendorStatus(id: number): Promise<{ success: boolean; data?: Vendor; error?: string }> {\n    try {\n      // 현재 상태 조회\n      const { data: currentVendor, error: selectError } = await this.supabase\n        .from('vendors')\n        .select('is_active')\n        .eq('id', id)\n        .single();\n\n      if (selectError) throw selectError;\n\n      // 상태 토글\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .update({ is_active: !currentVendor.is_active })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('업체 상태 변경 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 업체 연락처 조회\n  async getVendorContacts(vendorId: number): Promise<{ success: boolean; data?: VendorContact[]; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('vendor_contacts')\n        .select('*')\n        .eq('vendor_id', vendorId)\n        .order('contact_name');\n\n      if (error) throw error;\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      logger.error('업체 연락처 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // Excel 내보내기용 데이터 준비\n  async getVendorsForExport(): Promise<{ success: boolean; data?: Array<Record<string, string>>; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('vendors')\n        .select('*')\n        .order('vendor_name');\n\n      if (error) throw error;\n\n      // Excel 형식에 맞게 데이터 변환\n      const exportData = (data || []).map(vendor => ({\n        '업체명': vendor.vendor_name,\n        '사업자번호': vendor.business_number || '',\n        '대표자': vendor.representative || '',\n        '연락처': vendor.contact_phone || '',\n        '주소': vendor.address || '',\n        '이메일': vendor.email || '',\n        '상태': vendor.is_active ? '활성' : '비활성',\n        '등록일': vendor.created_at ? new Date(vendor.created_at).toLocaleDateString('ko-KR') : ''\n      }));\n\n      return { success: true, data: exportData };\n    } catch (error) {\n      logger.error('업체 Excel 내보내기 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n}\n\nexport const vendorService = new VendorService();","\nimport { useState } from 'react'\nimport { VendorFilters as VendorFiltersType } from '@/types/purchase'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Search, X, Download, Plus } from 'lucide-react'\n\ninterface VendorFiltersProps {\n  filters: VendorFiltersType\n  onFiltersChange: (filters: VendorFiltersType) => void\n  onExport: () => void\n  onCreateNew: () => void\n}\n\nexport default function VendorFilters({ \n  filters, \n  onFiltersChange, \n  onExport,\n  onCreateNew \n}: VendorFiltersProps) {\n  const [localSearch, setLocalSearch] = useState(filters.search || '')\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onFiltersChange({\n      ...filters,\n      search: localSearch.trim() || undefined\n    })\n  }\n\n  const handleStatusChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      is_active: value === 'all' ? undefined : value === 'active'\n    })\n  }\n\n  const clearFilters = () => {\n    setLocalSearch('')\n    onFiltersChange({})\n  }\n\n  const hasFilters = filters.search || filters.is_active !== undefined\n\n  return (\n    <div className=\"space-y-4\">\n      {/* 상단 액션 버튼 */}\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n        <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">업체 관리</h2>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onExport}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Download className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            <span className=\"hidden sm:inline\">Excel 내보내기</span>\n            <span className=\"sm:hidden\">Excel</span>\n          </Button>\n          <Button \n            onClick={onCreateNew}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Plus className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            업체 등록\n          </Button>\n        </div>\n      </div>\n\n      {/* 필터 섹션 */}\n      <div className=\"bg-white p-3 sm:p-4 rounded-lg border space-y-4\">\n        <form onSubmit={handleSearchSubmit} className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 sm:items-end\">\n          {/* 검색 */}\n          <div className=\"flex-1\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              검색\n            </label>\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 sm:left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-3 h-3 sm:w-4 sm:h-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"업체명, 사업자번호, 연락처 검색\"\n                value={localSearch}\n                onChange={(e) => setLocalSearch(e.target.value)}\n                className=\"pl-8 sm:pl-10 text-sm h-9\"\n              />\n            </div>\n          </div>\n\n          {/* 상태 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[120px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              상태\n            </label>\n            <Select\n              value={\n                filters.is_active === undefined \n                  ? 'all' \n                  : filters.is_active \n                    ? 'active' \n                    : 'inactive'\n              }\n              onValueChange={handleStatusChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체</SelectItem>\n                <SelectItem value=\"active\">활성</SelectItem>\n                <SelectItem value=\"inactive\">비활성</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 검색 및 초기화 버튼 */}\n          <div className=\"flex gap-2 w-full sm:w-auto\">\n            <Button type=\"submit\" className=\"flex-1 sm:flex-none h-9 text-sm\">\n              검색\n            </Button>\n            {hasFilters && (\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={clearFilters}\n                className=\"flex items-center gap-1 h-9 text-sm\"\n              >\n                <X className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                <span className=\"hidden sm:inline\">초기화</span>\n                <span className=\"sm:hidden\">초기</span>\n              </Button>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","\nimport { useState } from 'react'\nimport { Vendor } from '@/types/purchase'\nimport { formatDate } from '@/utils/helpers'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { \n  MoreHorizontal, \n  Edit, \n  Trash2, \n  Eye, \n  ToggleLeft, \n  ToggleRight \n} from 'lucide-react'\nimport { vendorService } from '@/services/vendorService'\nimport { toast } from 'sonner'\nimport { useTableSort } from '@/hooks/useTableSort'\nimport { SortableHeader } from '@/components/ui/sortable-header'\nimport { MobileCard, MobileCardItem, MobileCardHeader, MobileCardActions } from '@/components/ui/mobile-card'\n\ninterface VendorTableProps {\n  vendors: Vendor[]\n  onEdit: (vendor: Vendor) => void\n  onView: (vendor: Vendor) => void\n  onRefresh: () => void\n}\n\nexport default function VendorTable({ vendors, onEdit, onView, onRefresh }: VendorTableProps) {\n  const [loadingId, setLoadingId] = useState<number | null>(null)\n  const { sortedData, sortConfig, handleSort } = useTableSort(vendors, 'vendor_name', 'asc')\n\n  const handleToggleStatus = async (vendor: Vendor) => {\n    setLoadingId(vendor.id)\n    try {\n      const result = await vendorService.toggleVendorStatus(vendor.id)\n      \n      if (result.success) {\n        toast.success(`업체가 ${vendor.is_active ? '비활성화' : '활성화'}되었습니다.`)\n        onRefresh()\n      } else {\n        toast.error(result.error || '상태 변경에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('상태 변경 중 오류가 발생했습니다.')\n    } finally {\n      setLoadingId(null)\n    }\n  }\n\n  const handleDelete = async (vendor: Vendor) => {\n    if (!confirm(`정말로 '${vendor.vendor_name}' 업체를 삭제하시겠습니까?`)) {\n      return\n    }\n\n    setLoadingId(vendor.id)\n    try {\n      const result = await vendorService.deleteVendor(vendor.id)\n      \n      if (result.success) {\n        toast.success('업체가 삭제되었습니다.')\n        onRefresh()\n      } else {\n        toast.error(result.error || '삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('삭제 중 오류가 발생했습니다.')\n    } finally {\n      setLoadingId(null)\n    }\n  }\n\n  // formatDate는 utils/helpers.ts에서 import\n\n  return (\n    <>\n      {/* Desktop Table View */}\n      <div className=\"hidden lg:block border rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"w-24 min-w-[80px] lg:w-32\">\n              <SortableHeader\n                sortKey=\"vendor_name\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('vendor_name' as keyof Vendor)}\n              >\n                업체명\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-16 min-w-[50px] text-center\">담당자</TableHead>\n            <TableHead className=\"min-w-[200px]\">담당자 정보</TableHead>\n            <TableHead className=\"w-20 min-w-[60px]\">\n              <SortableHeader\n                sortKey=\"created_at\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('created_at' as keyof Vendor)}\n              >\n                등록일\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-14 min-w-[45px] text-center\">작업</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {vendors.length === 0 ? (\n            <TableRow>\n              <TableCell colSpan={5} className=\"text-center py-8 text-gray-500\">\n                등록된 업체가 없습니다.\n              </TableCell>\n            </TableRow>\n          ) : (\n            sortedData.map((vendor) => (\n              <TableRow key={vendor.id}>\n                <TableCell className=\"font-medium text-[11px] px-2 py-1.5\">\n                  {vendor.vendor_name}\n                </TableCell>\n                <TableCell className=\"text-center text-[11px] px-1 py-1.5\">\n                  <Badge variant=\"outline\" className=\"text-[10px] px-1 py-0\">\n                    {vendor.vendor_contacts?.length || 0}명\n                  </Badge>\n                </TableCell>\n                <TableCell className=\"px-2 py-1.5\">\n                  <div className=\"space-y-0.5\">\n                    {vendor.vendor_contacts && vendor.vendor_contacts.length > 0 ? (\n                      vendor.vendor_contacts.slice(0, 2).map((contact: any, idx: number) => (\n                        <div key={idx} className=\"text-[10px]\">\n                          <span className=\"font-medium\">{contact.contact_name}</span>\n                          <span className=\"text-gray-500 ml-1\">{contact.contact_phone}</span>\n                          {contact.contact_email && (\n                            <span className=\"text-gray-500 ml-1 truncate inline-block max-w-[180px]\">{contact.contact_email}</span>\n                          )}\n                        </div>\n                      ))\n                    ) : (\n                      <span className=\"text-gray-400 text-[10px]\">담당자 없음</span>\n                    )}\n                    {vendor.vendor_contacts && vendor.vendor_contacts.length > 2 && (\n                      <span className=\"text-[10px] text-gray-500\">외 {vendor.vendor_contacts.length - 2}명</span>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{formatDate(vendor.created_at)}</TableCell>\n                <TableCell className=\"px-1 py-1.5 text-center\">\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"h-7 w-7 p-0\"\n                        disabled={loadingId === vendor.id}\n                      >\n                        <MoreHorizontal className=\"h-3 w-3\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem onClick={() => onView(vendor)}>\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        상세 보기\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => onEdit(vendor)}>\n                        <Edit className=\"mr-2 h-4 w-4\" />\n                        수정\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => handleToggleStatus(vendor)}>\n                        {vendor.is_active ? (\n                          <>\n                            <ToggleLeft className=\"mr-2 h-4 w-4\" />\n                            비활성화\n                          </>\n                        ) : (\n                          <>\n                            <ToggleRight className=\"mr-2 h-4 w-4\" />\n                            활성화\n                          </>\n                        )}\n                      </DropdownMenuItem>\n                      <DropdownMenuItem \n                        onClick={() => handleDelete(vendor)}\n                        className=\"text-red-600\"\n                      >\n                        <Trash2 className=\"mr-2 h-4 w-4\" />\n                        삭제\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n          </Table>\n        </div>\n      </div>\n\n      {/* Tablet View */}\n      <div className=\"hidden md:block lg:hidden\">\n        <div className=\"overflow-x-auto border rounded-lg\">\n          <table className=\"w-full min-w-[600px]\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm\">업체명</th>\n                <th className=\"text-center p-3 font-medium text-gray-900 text-sm w-20\">담당자</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm\">연락처</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-24\">등록일</th>\n                <th className=\"text-center p-3 font-medium text-gray-900 text-sm w-16\">작업</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {sortedData.length === 0 ? (\n                <tr>\n                  <td colSpan={5} className=\"text-center py-8 text-gray-500\">\n                    등록된 업체가 없습니다.\n                  </td>\n                </tr>\n              ) : (\n                sortedData.map((vendor) => (\n                  <tr key={vendor.id} className=\"hover:bg-gray-50\">\n                    <td className=\"p-3 font-medium text-sm\">{vendor.vendor_name}</td>\n                    <td className=\"p-3 text-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {vendor.vendor_contacts?.length || 0}명\n                      </Badge>\n                    </td>\n                    <td className=\"p-3 text-sm\">\n                      {vendor.vendor_contacts && vendor.vendor_contacts.length > 0 ? (\n                        <div>\n                          <div className=\"font-medium\">{vendor.vendor_contacts[0].contact_name}</div>\n                          <div className=\"text-gray-500 text-xs\">{vendor.vendor_contacts[0].contact_phone}</div>\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">담당자 없음</span>\n                      )}\n                    </td>\n                    <td className=\"p-3 text-sm\">{formatDate(vendor.created_at)}</td>\n                    <td className=\"p-3 text-center\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => onView(vendor)}>\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            상세 보기\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => onEdit(vendor)}>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            수정\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => handleToggleStatus(vendor)}>\n                            {vendor.is_active ? (\n                              <>\n                                <ToggleLeft className=\"mr-2 h-4 w-4\" />\n                                비활성화\n                              </>\n                            ) : (\n                              <>\n                                <ToggleRight className=\"mr-2 h-4 w-4\" />\n                                활성화\n                              </>\n                            )}\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => handleDelete(vendor)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            삭제\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Mobile Card View */}\n      <div className=\"block md:hidden space-y-3\">\n        {sortedData.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            등록된 업체가 없습니다.\n          </div>\n        ) : (\n          sortedData.map((vendor) => (\n            <MobileCard key={vendor.id}>\n              <MobileCardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <span>{vendor.vendor_name}</span>\n                  <Badge variant=\"outline\">\n                    {vendor.vendor_contacts?.length || 0}명\n                  </Badge>\n                </div>\n              </MobileCardHeader>\n              \n              <MobileCardItem \n                label=\"담당자\" \n                value={\n                  <div className=\"space-y-1\">\n                    {vendor.vendor_contacts && vendor.vendor_contacts.length > 0 ? (\n                      vendor.vendor_contacts.slice(0, 2).map((contact: any, idx: number) => (\n                        <div key={idx} className=\"text-sm\">\n                          <div className=\"font-medium\">{contact.contact_name}</div>\n                          <div className=\"text-gray-500 text-xs\">{contact.contact_phone}</div>\n                          {contact.contact_email && (\n                            <div className=\"text-gray-500 text-xs\">{contact.contact_email}</div>\n                          )}\n                        </div>\n                      ))\n                    ) : (\n                      <span className=\"text-gray-400\">담당자 없음</span>\n                    )}\n                    {vendor.vendor_contacts && vendor.vendor_contacts.length > 2 && (\n                      <span className=\"text-sm text-gray-500\">외 {vendor.vendor_contacts.length - 2}명</span>\n                    )}\n                  </div>\n                } \n              />\n              <MobileCardItem label=\"등록일\" value={formatDate(vendor.created_at)} />\n              \n              <MobileCardActions>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => onView(vendor)}\n                >\n                  <Eye className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => onEdit(vendor)}\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => handleToggleStatus(vendor)}\n                  disabled={loadingId === vendor.id}\n                >\n                  {vendor.is_active ? (\n                    <ToggleLeft className=\"w-4 h-4\" />\n                  ) : (\n                    <ToggleRight className=\"w-4 h-4\" />\n                  )}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"text-red-600\"\n                  onClick={() => handleDelete(vendor)}\n                  disabled={loadingId === vendor.id}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </MobileCardActions>\n            </MobileCard>\n          ))\n        )}\n      </div>\n    </>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Vendor, VendorFormData } from '@/types/purchase'\nimport { Button } from '@/components/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useForm } from 'react-hook-form'\nimport { vendorService } from '@/services/vendorService'\nimport { toast } from 'sonner'\n\ninterface VendorModalProps {\n  isOpen: boolean\n  onClose: () => void\n  vendor?: Vendor | null\n  onSave: () => void\n  mode: 'create' | 'edit' | 'view'\n}\n\nexport default function VendorModal({ isOpen, onClose, vendor, onSave, mode }: VendorModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const form = useForm<VendorFormData>({\n    defaultValues: {\n      vendor_name: '',\n      business_number: '',\n      representative: '',\n      contact_phone: '',\n      address: '',\n      email: '',\n    }\n  })\n\n  useEffect(() => {\n    if (vendor && isOpen) {\n      form.reset({\n        vendor_name: vendor.vendor_name || '',\n        business_number: vendor.business_number || '',\n        representative: vendor.representative || '',\n        contact_phone: vendor.contact_phone || '',\n        address: vendor.address || '',\n        email: vendor.email || '',\n      })\n    } else if (!vendor && isOpen) {\n      form.reset({\n        vendor_name: '',\n        business_number: '',\n        representative: '',\n        contact_phone: '',\n        address: '',\n        email: '',\n      })\n    }\n  }, [vendor, isOpen, form])\n\n  const onSubmit = async (data: VendorFormData) => {\n    setIsSubmitting(true)\n    \n    try {\n      let result\n      \n      if (mode === 'create') {\n        result = await vendorService.createVendor(data)\n      } else if (mode === 'edit' && vendor) {\n        result = await vendorService.updateVendor(vendor.id, data)\n      }\n\n      if (result?.success) {\n        toast.success(mode === 'create' ? '업체가 등록되었습니다.' : '업체 정보가 수정되었습니다.')\n        onSave()\n        onClose()\n      } else {\n        toast.error(result?.error || '처리 중 오류가 발생했습니다.')\n      }\n    } catch (error) {\n      toast.error('처리 중 오류가 발생했습니다.')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const getTitle = () => {\n    switch (mode) {\n      case 'create': return '업체 등록'\n      case 'edit': return '업체 수정'\n      case 'view': return '업체 상세'\n      default: return '업체'\n    }\n  }\n\n  const isReadOnly = mode === 'view'\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-[95vw] sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{getTitle()}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"vendor_name\"\n                rules={{\n                  required: '업체명을 입력해주세요.'\n                }}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>업체명 *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"업체명을 입력하세요\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"business_number\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>사업자번호</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"000-00-00000\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"representative\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>대표자</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"대표자명을 입력하세요\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"contact_phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>연락처</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"010-0000-0000\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>이메일</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"email\"\n                        placeholder=\"company@example.com\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>주소</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      {...field} \n                      placeholder=\"주소를 입력하세요\"\n                      className=\"min-h-[80px]\"\n                      disabled={isReadOnly}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {mode === 'view' && vendor && (\n              <div className=\"pt-4 border-t\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-500\">상태:</span>\n                    <span className={`ml-2 px-2 py-1 rounded text-xs ${\n                      vendor.is_active \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-gray-100 text-gray-600'\n                    }`}>\n                      {vendor.is_active ? '활성' : '비활성'}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">등록일:</span>\n                    <span className=\"ml-2\">\n                      {vendor.created_at ? new Date(vendor.created_at).toLocaleDateString('ko-KR') : '-'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <DialogFooter className=\"gap-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                {mode === 'view' ? '닫기' : '취소'}\n              </Button>\n              {!isReadOnly && (\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting \n                    ? (mode === 'create' ? '등록 중...' : '수정 중...')\n                    : (mode === 'create' ? '등록' : '수정')\n                  }\n                </Button>\n              )}\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Vendor, VendorFilters as VendorFiltersType } from '@/types/purchase'\nimport { vendorService } from '@/services/vendorService'\nimport VendorFilters from '@/components/vendor/VendorFilters'\nimport VendorTable from '@/components/vendor/VendorTable'\nimport VendorModal from '@/components/vendor/VendorModal'\nimport { toast } from 'sonner'\n// XLSX는 사용할 때만 동적으로 import (성능 최적화)\n\ntype ModalMode = 'create' | 'edit' | 'view'\n\nexport default function VendorMain() {\n  const [vendors, setVendors] = useState<Vendor[]>([])\n  const [filteredVendors, setFilteredVendors] = useState<Vendor[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filters, setFilters] = useState<VendorFiltersType>({})\n  \n  // 모달 상태\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [selectedVendor, setSelectedVendor] = useState<Vendor | null>(null)\n  const [modalMode, setModalMode] = useState<ModalMode>('create')\n\n  // 업체 목록 로드\n  const loadVendors = async () => {\n    setLoading(true)\n    try {\n      const result = await vendorService.getVendors(filters)\n      \n      if (result.success && result.data) {\n        setVendors(result.data)\n        setFilteredVendors(result.data)\n      } else {\n        toast.error(result.error || '업체 목록을 불러오는데 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('업체 목록을 불러오는 중 오류가 발생했습니다.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 필터 변경 시 업체 목록 로드 (초기 로드 포함)\n  useEffect(() => {\n    loadVendors()\n  }, [filters])\n\n  // 모달 핸들러\n  const handleCreateNew = () => {\n    setSelectedVendor(null)\n    setModalMode('create')\n    setIsModalOpen(true)\n  }\n\n  const handleEdit = (vendor: Vendor) => {\n    setSelectedVendor(vendor)\n    setModalMode('edit')\n    setIsModalOpen(true)\n  }\n\n  const handleView = (vendor: Vendor) => {\n    setSelectedVendor(vendor)\n    setModalMode('view')\n    setIsModalOpen(true)\n  }\n\n  const handleModalClose = () => {\n    setIsModalOpen(false)\n    setSelectedVendor(null)\n  }\n\n  const handleSave = () => {\n    loadVendors()\n  }\n\n  // Excel 내보내기 (동적 import로 성능 최적화)\n  const handleExport = async () => {\n    try {\n      const result = await vendorService.getVendorsForExport()\n      \n      if (result.success && result.data) {\n        // XLSX를 사용할 때만 동적으로 import\n        const XLSX = await import('xlsx')\n        \n        const ws = XLSX.utils.json_to_sheet(result.data)\n        const wb = XLSX.utils.book_new()\n        XLSX.utils.book_append_sheet(wb, ws, '업체 목록')\n        \n        // 파일명에 현재 날짜 추가\n        const today = new Date().toISOString().slice(0, 10)\n        const filename = `업체_목록_${today}.xlsx`\n        \n        XLSX.writeFile(wb, filename)\n        toast.success('Excel 파일이 다운로드되었습니다.')\n      } else {\n        toast.error(result.error || 'Excel 내보내기에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('Excel 내보내기 중 오류가 발생했습니다.')\n    }\n  }\n\n  if (loading && vendors.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">업체 목록을 불러오는 중...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n      {/* 필터 섹션 */}\n      <VendorFilters\n        filters={filters}\n        onFiltersChange={setFilters}\n        onExport={handleExport}\n        onCreateNew={handleCreateNew}\n      />\n\n      {/* 테이블 섹션 */}\n      <div className=\"bg-white rounded-lg border\">\n        <div className=\"p-4 border-b\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center gap-3\">\n              <h3 className=\"text-lg font-medium\">업체 목록</h3>\n              <span className=\"px-3 py-1 bg-blue-50 text-blue-600 text-sm font-semibold rounded-full\">\n                총 {filteredVendors.length}개\n              </span>\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              {loading && '업데이트 중...'}\n            </div>\n          </div>\n        </div>\n        \n        <VendorTable\n          vendors={filteredVendors}\n          onEdit={handleEdit}\n          onView={handleView}\n          onRefresh={loadVendors}\n        />\n      </div>\n\n      {/* 모달 */}\n      <VendorModal\n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n        vendor={selectedVendor}\n        onSave={handleSave}\n        mode={modalMode}\n      />\n      </div>\n    </>\n  )\n}"],"file":"assets/VendorMain-BeyjJQM5.js"}