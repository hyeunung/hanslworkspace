{"version":3,"mappings":"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","names":["ReactSelect","lazy","__vitePreload","PurchaseNewMain","navigate","useNavigate","supabase","createClient","user","setUser","useState","employeeName","setEmployeeName","employees","setEmployees","defaultRequesterLoaded","setDefaultRequesterLoaded","addCount","setAddCount","vendorSearchTerm","setVendorSearchTerm","useEffect","data","error","dbEmp","emp","currentUser","vendors","setVendors","contacts","setContacts","vendor","setVendor","selectedContacts","setSelectedContacts","currency","setCurrency","loading","setLoading","setError","inputValues","setInputValues","isContactDialogOpen","setIsContactDialogOpen","contactsForEdit","setContactsForEdit","hasChanges","setHasChanges","isSubmittingRef","useRef","control","rhHandleSubmit","watch","setValue","reset","getValues","useFormRH","fields","append","remove","update","useFieldArray","empData","employeeData","fallbackName","toast","selectedVendor","updatedItems","item","idx","calcAmount","f","checkRequiredFields","requestType","progressType","paymentCategory","vendorId","isFormValid","setIsFormValid","generatePurchaseOrderNumber","today","prefix","existingOrders","queryError","nextNumber","maxSequence","order","parts","sequenceStr","sequence","safeNextNumber","handleSubmit","currentEmployee","prId","purchaseOrderNumber","maxRetries","retryCount","pr","prError","sum","i","resolve","retryError","itemErr","notifyResponse","notifyResult","errorText","err","totalAmount","openContactsManager","existingContacts","c","newEmptyContact","handleContactChange","index","field","value","prev","contact","addNewContactSlot","removeContactSlot","_","handleSaveAllContacts","jsxs","e","jsx","Label","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Suspense","v","option","opt","base","val","selectedOption","employee","inputValue","Input","Badge","Button","_idx","remainingSlots","itemsToAdd","Plus","newQuantity","cleanValue","finalValue","numVal","newState","X","Fragment","Save","Dialog","DialogContent","DialogHeader","DialogTitle","DialogFooter","DialogClose"],"ignoreList":[],"sources":["../../src/components/purchase/PurchaseNewMain.tsx"],"sourcesContent":["import { useState, useEffect, useRef, useLayoutEffect, lazy, Suspense } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, X, Save, Calculator, Pencil, Trash2 } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { createClient } from \"@/lib/supabase/client\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useForm as useFormRH, Controller, useFieldArray } from \"react-hook-form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogClose } from \"@/components/ui/dialog\";\nimport { FormValues, FormItem } from \"@/types/purchase\";\nimport { toast } from \"sonner\";\nimport { DatePicker } from \"@/components/ui/datepicker\";\nimport { Separator } from \"@/components/ui/separator\";\nconst ReactSelect = lazy(() => import('react-select'));\n\ninterface EmployeeOption {\n  value: string;\n  label: string;\n}\n\nexport default function PurchaseNewMain() {\n  const navigate = useNavigate();\n  const supabase = createClient();\n  \n  const [user, setUser] = useState<any>(null);\n  const [employeeName, setEmployeeName] = useState<string>(\"\");\n  const [employees, setEmployees] = useState<{id: string; name: string; email?: string; phone?: string; address?: string; position?: string; department?: string;}[]>([]);\n  const [defaultRequesterLoaded, setDefaultRequesterLoaded] = useState(false);\n  const [addCount, setAddCount] = useState(1);\n  const [vendorSearchTerm, setVendorSearchTerm] = useState(\"\");\n  \n  // 초기 사용자 정보 로드\n  useEffect(() => {\n    const getUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      setUser(user);\n    };\n    getUser();\n  }, []);\n\n  useEffect(() => {\n    // DB에서 직원 목록 가져오기\n    const loadEmployees = async () => {\n      try {\n        const { data, error } = await supabase\n          .from('employees')\n          .select('id, name, email, phone, address, position, department')\n          .order('name');\n        \n        \n        if (data && !error && data.length > 0) {\n          setEmployees(data.map(dbEmp => ({\n            id: dbEmp.id,\n            name: dbEmp.name,\n            email: dbEmp.email || '',\n            phone: dbEmp.phone || '',\n            address: dbEmp.address || '',\n            position: dbEmp.position || '',\n            department: dbEmp.department || ''\n          })));\n          \n          // 이미 설정된 employeeName이 있고 employees 배열에 해당 직원이 있는지 확인\n          if (employeeName && !data.find(emp => emp.name === employeeName)) {\n            // 현재 사용자를 employees 배열에 추가\n            const currentUser = {\n              id: user?.id || 'current-user',\n              name: employeeName,\n              email: user?.email || '',\n              phone: '',\n              address: '',\n              position: '',\n              department: ''\n            };\n            setEmployees([...data.map(dbEmp => ({\n              id: dbEmp.id,\n              name: dbEmp.name,\n              email: dbEmp.email || '',\n              phone: dbEmp.phone || '',\n              address: dbEmp.address || '',\n              position: dbEmp.position || '',\n              department: dbEmp.department || ''\n            })), currentUser]);\n          }\n        } else {\n          // DB에서 못 불러와도 현재 사용자만이라도 추가\n          if (employeeName) {\n            setEmployees([{\n              id: user?.id || 'current-user',\n              name: employeeName,\n              email: user?.email || '',\n              phone: '',\n              address: '',\n              position: '',\n              department: ''\n            }]);\n          } else {\n            setEmployees([]);\n          }\n        }\n      } catch (err) {\n        // 오류 발생 시에도 현재 사용자 추가\n        if (employeeName) {\n          setEmployees([{\n            id: user?.id || 'current-user',\n            name: employeeName,\n            email: user?.email || '',\n            phone: '',\n            address: '',\n            position: '',\n            department: ''\n          }]);\n        } else {\n          setEmployees([]);\n        }\n      }\n    };\n    \n    // user 상태와 관계없이 직원 목록 로드\n    loadEmployees();\n  }, [employeeName, user]);\n\n  const [vendors, setVendors] = useState<{ id: number; vendor_name: string }[]>([]);\n  const [contacts, setContacts] = useState<{ id: number; contact_name: string; contact_email: string; contact_phone: string; position: string }[]>([]);\n  const [vendor, setVendor] = useState(\"\");\n  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);\n  const [currency, setCurrency] = useState(\"KRW\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [inputValues, setInputValues] = useState<{[key: string]: string}>({});\n  const [isContactDialogOpen, setIsContactDialogOpen] = useState(false);\n  const [contactsForEdit, setContactsForEdit] = useState<{ id?: number; contact_name: string; contact_email: string; contact_phone: string; position: string; isNew?: boolean }[]>([]);\n  const [hasChanges, setHasChanges] = useState(false);\n  // 중복 제출 방지용 ref\n  const isSubmittingRef = useRef(false);\n\n  const { control, handleSubmit: rhHandleSubmit, watch, setValue, reset, getValues } = useFormRH<FormValues>({\n    defaultValues: {\n      progress_type: \"\",\n      payment_category: \"\",\n      currency: \"KRW\",\n      po_template_type: \"일반\",\n      request_type: \"\",\n      contacts: [],\n      sales_order_number: '',\n      project_vendor: '',\n      project_item: '',\n      delivery_request_date: '',\n      vendor_id: 0,\n      requester_name: \"\",\n      items: [\n        {\n          line_number: 1,\n          item_name: \"\",\n          specification: \"\",\n          quantity: 1,\n          unit_price_value: 0,\n          unit_price_currency: \"KRW\",\n          amount_value: 0,\n          amount_currency: \"KRW\",\n          remark: \"\",\n          link: \"\",\n        },\n      ],\n      request_date: new Date().toISOString().slice(0, 10),\n    }\n  });\n\n  const { fields, append, remove, update } = useFieldArray({\n    control,\n    name: \"items\"\n  });\n\n  // 사용자 정보로 구매요청자 기본값 설정\n  useEffect(() => {\n    if (!user?.email || defaultRequesterLoaded) return;\n    \n    const loadUserName = async () => {\n      const { data: empData } = await supabase\n        .from('employees')\n        .select('name')\n        .eq('email', user.email)\n        .single();\n      \n      if (empData?.name) {\n        setEmployeeName(empData.name);\n        setValue('requester_name', empData.name);\n        setDefaultRequesterLoaded(true);\n      }\n    };\n    loadUserName();\n  }, [user, supabase, setValue, defaultRequesterLoaded]);\n\n  // 업체 목록 로드\n  useEffect(() => {\n    const setDefaultRequester = async () => {\n      if (user?.email && setValue && !defaultRequesterLoaded) {\n        try {\n          const { data: employeeData, error } = await supabase\n            .from('employees')\n            .select('name')\n            .eq('email', user.email)\n            .single();\n          \n          if (employeeData && !error) {\n            setEmployeeName(employeeData.name);\n            // React Hook Form의 setValue를 약간의 지연 후 호출\n            setTimeout(() => {\n              setValue('requester_name', employeeData.name, { \n                shouldValidate: true,\n                shouldDirty: true \n              });\n            }, 100);\n            setDefaultRequesterLoaded(true);\n          } else {\n            const fallbackName = user.email.split('@')[0] || \"사용자\";\n            setEmployeeName(fallbackName);\n            setTimeout(() => {\n              setValue('requester_name', fallbackName, { \n                shouldValidate: true,\n                shouldDirty: true \n              });\n            }, 100);\n            setDefaultRequesterLoaded(true);\n          }\n        } catch (err) {\n          const fallbackName = user.email?.split('@')[0] || \"사용자\";\n          setEmployeeName(fallbackName);\n          setTimeout(() => {\n            setValue('requester_name', fallbackName, { \n              shouldValidate: true,\n              shouldDirty: true \n            });\n          }, 100);\n          setDefaultRequesterLoaded(true);\n        }\n      }\n    };\n    \n    setDefaultRequester();\n  }, [user, setValue, defaultRequesterLoaded]);\n\n  // Vendors 로드\n  useEffect(() => {\n    const loadVendors = async () => {\n      try {\n        const { data, error } = await supabase\n          .from(\"vendors\")\n          .select(\"*\")\n          .order(\"vendor_name\");\n        \n        if (error) throw error;\n        setVendors(data || []);\n      } catch (error) {\n        toast.error(\"업체 목록을 불러올 수 없습니다.\");\n      }\n    };\n\n    loadVendors();\n  }, []);\n\n  const selectedVendor = watch('vendor_id');\n\n  // 업체 변경 시 담당자 목록 로드\n  useEffect(() => {\n    const loadContacts = async () => {\n      if (selectedVendor) {\n        try {\n          const { data, error } = await supabase\n            .from('vendor_contacts')\n            .select('id, contact_name, contact_email, contact_phone, position')\n            .eq('vendor_id', selectedVendor);\n          \n          if (error) throw error;\n          setContacts(data || []);\n        } catch (error) {\n          setContacts([]);\n        }\n      } else {\n        setContacts([]);\n      }\n    };\n    \n    loadContacts();\n  }, [selectedVendor]);\n\n  // 통화 변경시 품목들의 통화도 업데이트\n  useEffect(() => {\n    const items = getValues(\"items\");\n    const updatedItems = items.map(item => ({\n      ...item,\n      unit_price_currency: currency,\n      amount_currency: currency\n    }));\n    setValue(\"items\", updatedItems);\n    setCurrency(currency);\n  }, [currency, setValue, getValues]);\n\n  // 수량이나 단가 변경 시 금액 자동 계산\n  useEffect(() => {\n    fields.forEach((item, idx) => {\n      const calcAmount = Number(item.quantity) * Number(item.unit_price_value);\n      if (item.amount_value !== calcAmount) {\n        update(idx, { ...item, amount_value: calcAmount });\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fields.map(f => `${f.quantity}-${f.unit_price_value}`).join(\",\")]);\n\n  // 품목 추가\n  const addItem = () => {\n    const currentItems = getValues(\"items\");\n    const nextLineNumber = Math.max(...currentItems.map(item => item.line_number), 0) + 1;\n    \n    append({\n      line_number: nextLineNumber,\n      item_name: \"\",\n      specification: \"\",\n      quantity: 1,\n      unit_price_value: 0,\n      unit_price_currency: currency,\n      amount_value: 0,\n      amount_currency: currency,\n      remark: \"\",\n      link: \"\"\n    });\n  };\n\n  // 금액 계산\n  const calculateAmount = (index: number) => {\n    const items = getValues(\"items\");\n    const item = items[index];\n    const amount = item.quantity * item.unit_price_value;\n    \n    // update 함수를 사용하여 fields 배열 직접 업데이트\n    update(index, { ...item, amount_value: amount });\n  };\n\n  // 전체 금액 계산\n  const getTotalAmount = () => {\n    const items = getValues(\"items\");\n    return items.reduce((sum, item) => sum + item.amount_value, 0);\n  };\n\n  // 필수 항목 체크 함수\n  const checkRequiredFields = () => {\n    const requestType = watch('request_type');\n    const progressType = watch('progress_type');\n    const paymentCategory = watch('payment_category');\n    const vendorId = watch('vendor_id');\n    \n    return !!(requestType && progressType && paymentCategory && vendorId && vendorId !== 0 && fields.length > 0);\n  };\n\n  // 실시간 필수항목 체크를 위한 state\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  // 필수항목 변경 감지\n  useEffect(() => {\n    setIsFormValid(checkRequiredFields());\n  }, [watch('request_type'), watch('progress_type'), watch('payment_category'), watch('vendor_id'), fields]);\n\n  // 발주요청번호 생성 함수 (재시도 로직 포함)\n  const generatePurchaseOrderNumber = async () => {\n    const today = new Date();\n    // 한국 시간대(UTC+9) 기준으로 날짜 생성\n    const koreaTime = new Date(today.getTime() + (9 * 60 * 60 * 1000));\n    const dateStr = koreaTime.toISOString().slice(0, 10).replace(/-/g, ''); // YYYYMMDD\n    const prefix = `F${dateStr}_`;\n    \n    // 오늘 날짜로 시작하는 발주요청번호들 조회 (유효한 숫자 형식만)\n    const { data: existingOrders, error: queryError } = await supabase\n      .from('purchase_requests')\n      .select('purchase_order_number')\n      .like('purchase_order_number', `${prefix}%`)\n      .order('purchase_order_number', { ascending: false });\n    \n    if (queryError) {\n    }\n    \n    // 다음 순번 계산 (숫자인 시퀀스만 찾기)\n    let nextNumber = 1;\n    let maxSequence = 0;\n    \n    if (existingOrders && existingOrders.length > 0) {\n      // 모든 발주요청번호를 확인하여 가장 큰 유효한 숫자 시퀀스 찾기\n      for (const order of existingOrders) {\n        const orderNumber = order.purchase_order_number;\n        \n        // 발주요청번호 형식: F20250612_001\n        const parts = orderNumber.split('_');\n        if (parts.length >= 2) {\n          const sequenceStr = parts[1];\n          const sequence = parseInt(sequenceStr, 10);\n          \n          // 유효한 숫자이고 현재 최대값보다 크면 업데이트\n          if (!isNaN(sequence) && sequence > maxSequence) {\n            maxSequence = sequence;\n          }\n        }\n      }\n      \n      nextNumber = maxSequence + 1;\n    }\n    \n    // 3자리 패딩으로 발주요청번호 생성\n    const safeNextNumber = isNaN(nextNumber) ? 1 : nextNumber;\n    const purchaseOrderNumber = `${prefix}${String(safeNextNumber).padStart(3, '0')}`;\n    \n    return purchaseOrderNumber;\n  };\n\n  // 폼 제출\n  const handleSubmit = async (data: FormValues) => {\n    const currentEmployee = employees.find(emp => emp.name === data.requester_name);\n    \n    if (isSubmittingRef.current) {\n      return;\n    }\n\n    if (!currentEmployee) {\n      setError(\"구매요청자 이름에 해당하는 직원이 없습니다. 이름을 정확히 입력해 주세요.\");\n      return;\n    }\n    \n    // 필수 항목이 모두 채워져 있는지 재확인\n    if (!checkRequiredFields()) {\n      return; // 버튼이 비활성화되어 있어야 하므로 별도 오류 메시지 없이 그냥 리턴\n    }\n\n    isSubmittingRef.current = true;\n    setLoading(true);\n    setError(\"\");\n    \n    try {\n\n      let prId: number = 0;\n      let purchaseOrderNumber: string = '';\n      const maxRetries = 5;\n      let retryCount = 0;\n\n      // 발주요청번호 중복 방지를 위한 재시도 로직\n      while (retryCount < maxRetries) {\n        try {\n          // 발주요청번호 자동 생성\n          purchaseOrderNumber = await generatePurchaseOrderNumber();\n\n          // 구매요청 등록 시도\n          const { data: pr, error: prError } = await supabase.from(\"purchase_requests\").insert({\n            requester_id: currentEmployee.id,\n            purchase_order_number: purchaseOrderNumber,\n            requester_name: data.requester_name,\n            requester_phone: currentEmployee?.phone,\n            requester_fax: null, // fax는 현재 employees 테이블에 없으므로 null\n            requester_address: currentEmployee?.address,\n            vendor_id: data.vendor_id,\n            sales_order_number: data.sales_order_number,\n            project_vendor: data.project_vendor,\n            project_item: data.project_item,\n            request_date: data.request_date,\n            delivery_request_date: data.delivery_request_date || null,\n            request_type: data.request_type,\n            progress_type: data.progress_type,\n            is_payment_completed: false,\n            payment_category: data.payment_category,\n            currency: currency,\n            total_amount: fields.reduce((sum, i) => sum + i.amount_value, 0),\n            unit_price_currency: fields[0]?.unit_price_currency || currency,\n            po_template_type: data.po_template_type,\n            contact_id: data.contact_id ? Number(data.contact_id) : null,\n          }).select(\"id\").single();\n          \n          // 발주요청번호 중복 에러가 아닌 다른 에러는 바로 throw\n          if (prError && !prError.message.includes('duplicate key value violates unique constraint')) {\n            throw prError;\n          }\n          \n          // 발주요청번호 중복 에러인 경우\n          if (prError && prError.message.includes('duplicate key value violates unique constraint')) {\n            retryCount++;\n            if (retryCount >= maxRetries) {\n              throw new Error(`발주요청번호 생성에 ${maxRetries}번 실패했습니다. 잠시 후 다시 시도해주세요.`);\n            }\n            // 재시도를 위해 짧은 대기\n            await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n            continue;\n          }\n          \n          // 성공한 경우\n          if (!pr) throw new Error(\"등록 실패\");\n          prId = pr.id;\n          break; // 성공 시 루프 종료\n          \n        } catch (retryError: any) {\n          // 발주요청번호 중복이 아닌 에러는 바로 throw\n          if (!retryError.message.includes('duplicate key value violates unique constraint')) {\n            throw retryError;\n          }\n          \n          retryCount++;\n          if (retryCount >= maxRetries) {\n            throw new Error(`발주요청번호 생성에 ${maxRetries}번 실패했습니다. 잠시 후 다시 시도해주세요.`);\n          }\n          \n          // 재시도를 위해 짧은 대기 (100-300ms 랜덤)\n          await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n        }\n      }\n\n      // 품목들 저장\n      for (const [idx, item] of fields.entries()) {\n        const { error: itemErr } = await supabase.from(\"purchase_request_items\").insert({\n          purchase_request_id: prId,\n          line_number: idx + 1,\n          item_name: item.item_name,\n          specification: item.specification,\n          quantity: item.quantity,\n          unit_price_value: item.unit_price_value,\n          unit_price_currency: currency,\n          amount_value: item.amount_value,\n          amount_currency: currency,\n          remark: item.remark,\n          link: item.link || null,\n        });\n        if (itemErr) throw itemErr;\n      }\n      \n      // 발주요청 성공 처리\n      \n      // 📨 중간관리자 DM 알림 발송 (품목 추가 완료 후 정확한 개수로)\n      try {\n        const notifyResponse = await fetch(`/api/purchase/${prId}/notify-middle-manager`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        \n        if (notifyResponse.ok) {\n          const notifyResult = await notifyResponse.json();\n        } else {\n          const errorText = await notifyResponse.text();\n        }\n      } catch (notifyError) {\n      }\n      \n      // 1. 폼 초기화\n      reset({\n        progress_type: \"\",\n        payment_category: \"\",\n        currency: \"KRW\",\n        po_template_type: \"일반\",\n        request_type: \"\",\n        contacts: [],\n        sales_order_number: '',\n        project_vendor: '',\n        project_item: '',\n        delivery_request_date: '',\n        vendor_id: 0,\n        requester_name: employeeName, // 요청자 이름은 유지\n        items: [\n          {\n            line_number: 1,\n            item_name: \"\",\n            specification: \"\",\n            quantity: 1,\n            unit_price_value: 0,\n            unit_price_currency: \"KRW\",\n            amount_value: 0,\n            amount_currency: \"KRW\",\n            remark: \"\",\n            link: \"\",\n          },\n        ],\n        request_date: new Date().toISOString().slice(0, 10),\n      });\n      \n      // 2. 상태 초기화\n      setVendor(\"\");\n      setSelectedContacts([]);\n      setCurrency(\"KRW\");\n      setError(\"\");\n      setLoading(false);\n      \n      // 3. 성공 메시지 표시\n      toast.success(\"발주요청서가 성공적으로 생성되었습니다.\");\n      \n      // 4. 발주요청 목록으로 이동\n      try {\n        await navigate('/purchase/list');\n      } catch (routerError) {\n        // 대체 라우팅 방법\n        window.location.href = '/purchase/list';\n      }\n      return;\n    } catch (err: any) {\n      setError(err.message || \"오류가 발생했습니다.\");\n      toast.error(err.message || \"발주요청서 저장에 실패했습니다.\");\n    } finally {\n      // 오류가 있었을 때만 실행됨 (성공 시에는 return으로 빠짐)\n      setLoading(false);\n      isSubmittingRef.current = false;\n    }\n  };\n\n  const totalAmount = fields.reduce((sum, item) => sum + item.amount_value, 0);\n\n  const openContactsManager = () => {\n    // 기존 담당자들을 복사하고 새로운 담당자 추가를 위한 빈 슬롯도 추가\n    const existingContacts = contacts.map(c => ({ ...c, isNew: false }));\n    const newEmptyContact = { contact_name: '', contact_email: '', contact_phone: '', position: '', isNew: true };\n    setContactsForEdit([...existingContacts, newEmptyContact]);\n    setHasChanges(false);\n    setIsContactDialogOpen(true);\n  };\n\n  const handleContactChange = (index: number, field: string, value: string) => {\n    setContactsForEdit(prev => prev.map((contact, i) => \n      i === index ? { ...contact, [field]: value } : contact\n    ));\n    setHasChanges(true);\n  };\n\n  const addNewContactSlot = () => {\n    setContactsForEdit(prev => [...prev, { contact_name: '', contact_email: '', contact_phone: '', position: '', isNew: true }]);\n    setHasChanges(true);\n  };\n\n  const removeContactSlot = (index: number) => {\n    setContactsForEdit(prev => prev.filter((_, i) => i !== index));\n    setHasChanges(true);\n  };\n\n  const handleSaveAllContacts = async () => {\n    if (!selectedVendor) return;\n    \n    try {\n      // @hansl로 끝나는 이메일 체크\n      const hanslEmails = contactsForEdit.filter(c => c.contact_email && c.contact_email.endsWith('@hansl.io'));\n      if (hanslEmails.length > 0) {\n        alert('한슬 직원 이메일은 업체 담당자로 등록할 수 없습니다.');\n        return;\n      }\n\n      for (const contact of contactsForEdit) {\n        if (contact.contact_name && contact.contact_email) {\n          if (!contact.isNew && contact.id) {\n            // 기존 담당자 업데이트\n            await supabase\n              .from('vendor_contacts')\n              .update({\n                contact_name: contact.contact_name,\n                contact_email: contact.contact_email,\n                contact_phone: contact.contact_phone || '',\n                position: contact.position || ''\n              })\n              .eq('id', contact.id);\n          } else if (contact.isNew) {\n            // 새로운 담당자 추가\n            await supabase\n              .from('vendor_contacts')\n              .insert({\n                vendor_id: selectedVendor,\n                contact_name: contact.contact_name,\n                contact_email: contact.contact_email,\n                contact_phone: contact.contact_phone || '',\n                position: contact.position || ''\n              });\n          }\n        }\n      }\n      \n      // 담당자 목록 새로고침\n      const { data } = await supabase\n        .from('vendor_contacts')\n        .select('id, contact_name, contact_email, contact_phone, position')\n        .eq('vendor_id', selectedVendor);\n      \n      if (data) setContacts(data);\n      setIsContactDialogOpen(false);\n      toast.success('담당자 정보가 저장되었습니다.');\n    } catch (error) {\n      toast.error('담당자 저장에 실패했습니다.');\n    }\n  };\n\n  const handleDeleteContact = async (contactId: number) => {\n    if (!confirm('정말 이 담당자를 삭제하시겠습니까?')) return;\n    \n    try {\n      await supabase\n        .from('vendor_contacts')\n        .delete()\n        .eq('id', contactId);\n      \n      // 담당자 목록 새로고침\n      const { data } = await supabase\n        .from('vendor_contacts')\n        .select('id, contact_name, contact_email, contact_phone, position')\n        .eq('vendor_id', selectedVendor);\n      \n      if (data) setContacts(data);\n      toast.success('담당자가 삭제되었습니다.');\n    } catch (error) {\n      toast.error('담당자 삭제에 실패했습니다.');\n    }\n  };\n\n  const paymentCategory = watch('payment_category');\n\n  return (\n    <form \n      onSubmit={(e) => {\n        e.preventDefault();\n        rhHandleSubmit(handleSubmit)(e);\n      }}\n      onKeyDown={e => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          e.preventDefault();\n        }\n      }}\n    >\n      <div className=\"flex gap-6\">\n        {/* 발주 기본 정보 - 좌측 1/4 폭 */}\n        <div className=\"w-1/4 relative bg-muted/20 border border-border rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 p-5 space-y-4\">\n          <div className=\"flex flex-row items-start justify-between w-full mb-4\">\n            <div className=\"flex flex-col\">\n              <h4 className=\"font-semibold text-foreground\">발주 기본 정보</h4>\n              <p className=\"text-xs text-muted-foreground mt-0.5\">Basic Information</p>\n            </div>\n            <div className=\"flex flex-col items-start\">\n              <Label className=\"mb-1 block text-xs\">발주서 종류<span className=\"text-red-500 ml-1\">*</span></Label>\n              <Select value={watch('po_template_type')} onValueChange={value => setValue('po_template_type', value)}>\n                <SelectTrigger className=\"h-9 w-28 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md transition-shadow duration-200\">\n                  <SelectValue placeholder=\"종류 선택\" />\n                </SelectTrigger>\n                <SelectContent position=\"popper\" className=\"z-[9999]\">\n                  <SelectItem value=\"일반\">일반</SelectItem>\n                  <SelectItem value=\"PCB\">PCB</SelectItem>\n                  <SelectItem value=\"소모품\">소모품</SelectItem>\n                  <SelectItem value=\"기타\">기타</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          {watch('po_template_type') === '일반' && (\n            <div className=\"space-y-4\">\n              {/* 요청 설정 */}\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div>\n                  <Label className=\"mb-1 block text-xs\">요청 유형<span className=\"text-red-500 ml-1\">*</span></Label>\n                  <Select value={watch('request_type')} onValueChange={(value) => setValue('request_type', value)}>\n                    <SelectTrigger className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md transition-shadow duration-200\">\n                      <SelectValue placeholder=\"선택\" />\n                    </SelectTrigger>\n                    <SelectContent position=\"popper\" className=\"z-[9999]\">\n                      <SelectItem value=\"원자재\">원자재</SelectItem>\n                      <SelectItem value=\"소모품\">소모품</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"mb-1 block text-xs\">진행 종류<span className=\"text-red-500 ml-1\">*</span></Label>\n                  <Select value={watch('progress_type')} onValueChange={(value) => setValue('progress_type', value)}>\n                    <SelectTrigger className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md transition-shadow duration-200\">\n                      <SelectValue placeholder=\"선택\" />\n                    </SelectTrigger>\n                    <SelectContent position=\"popper\" className=\"z-[9999]\">\n                      <SelectItem value=\"일반\">일반</SelectItem>\n                      <SelectItem value=\"선진행\">선진행</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label className=\"mb-1 block text-xs\">결제 종류<span className=\"text-red-500 ml-1\">*</span></Label>\n                  <Select value={watch('payment_category')} onValueChange={(value) => setValue('payment_category', value)}>\n                    <SelectTrigger className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md transition-shadow duration-200\">\n                      <SelectValue placeholder=\"선택\" />\n                    </SelectTrigger>\n                    <SelectContent position=\"popper\" className=\"z-[9999]\">\n                      <SelectItem value=\"발주\">발주</SelectItem>\n                      <SelectItem value=\"구매 요청\">구매 요청</SelectItem>\n                      <SelectItem value=\"현장 결제\">현장 결제</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* 업체 정보 */}\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label className=\"mb-1 block text-xs\">업체명<span className=\"text-red-500 ml-1\">*</span></Label>\n                  <Suspense fallback={<div className=\"h-9 bg-gray-100 animate-pulse rounded-md\" />}>\n                    <ReactSelect\n                      options={vendors.map(v => ({ value: v.id.toString(), label: v.vendor_name }))}\n                      value={vendors.find(v => v.id.toString() === vendor) ? { value: vendor, label: vendors.find(v => v.id.toString() === vendor)?.vendor_name } : null}\n                      onChange={(option) => {\n                        const opt = option as { value: string; label: string } | null;\n                        if (opt) {\n                          setVendor(opt.value);\n                          setValue('vendor_id', Number(opt.value));\n                        } else {\n                          setVendor('');\n                          setValue('vendor_id', 0);\n                        }\n                      }}\n                      placeholder=\"업체 선택\"\n                      isClearable\n                      isSearchable\n                      closeMenuOnSelect={false}\n                      classNamePrefix=\"vendor-select\"\n                      blurInputOnSelect={false}\n                      openMenuOnFocus={false}\n                      openMenuOnClick={true}\n                      tabSelectsValue={false}\n                      captureMenuScroll={false}\n                      pageSize={20}\n                      styles={{\n                        container: base => ({ ...base, width: '100%', fontSize: '12px' }),\n                        control: base => ({ ...base, height: 36, minHeight: 36, background: '#fff', border: '1px solid #d2d2d7', borderRadius: 6, fontSize: '12px', boxShadow: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)', '&:hover': { boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)' } }),\n                        valueContainer: base => ({ ...base, height: 36, padding: '0 8px', fontSize: '12px' }),\n                        input: base => ({ ...base, margin: 0, padding: 0, fontSize: '12px' }),\n                        indicatorsContainer: base => ({ ...base, height: 36 }),\n                        menuPortal: base => ({ ...base, zIndex: 1400 })\n                      }}\n                    />\n                  </Suspense>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <Label className=\"text-xs\">업체 담당자</Label>\n                    <span\n                      className=\"text-primary text-[10px] cursor-pointer hover:underline select-none flex items-center\"\n                      onClick={openContactsManager}\n                    >\n                      <span className=\"-translate-y-px\">+</span><span className=\"ml-1\">추가/수정</span>\n                    </span>\n                  </div>\n                  <Select\n                    value={watch('contacts')[0] || ''}\n                    onValueChange={val => {\n                      setValue('contacts', [val]);\n                      setValue('contact_id', val ? Number(val) : undefined);\n                    }}\n                  >\n                    <SelectTrigger className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md transition-shadow duration-200\">\n                      <SelectValue placeholder=\"담당자 선택\" />\n                    </SelectTrigger>\n                    <SelectContent position=\"popper\" className=\"z-[9999]\">\n                      {contacts.map(c => (\n                        <SelectItem key={c.id} value={c.id.toString()}>\n                          {c.contact_name || c.contact_email || c.contact_phone || c.position || ''}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* 구매요구자 및 일정 정보 */}\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div>\n                  <Label className=\"mb-1 block text-xs\">구매요구자</Label>\n                  <Suspense fallback={<div className=\"h-9 bg-gray-100 animate-pulse rounded-md\" />}>\n                    <ReactSelect\n                      key={`employee-select-${employeeName}`}\n                      value={employeeName ? { value: employeeName, label: employeeName } : null}\n                      defaultValue={employeeName ? { value: employeeName, label: employeeName } : null}\n                      onChange={(selectedOption) => {\n                        const value = (selectedOption as EmployeeOption)?.value || \"\";\n                        setValue('requester_name', value);\n                        setEmployeeName(value);\n                      }}\n                      options={employees.map(employee => ({\n                        value: employee.name,\n                        label: employee.name\n                      }))}\n                      placeholder=\"선택\"\n                      isSearchable\n                      isClearable={false}\n                      noOptionsMessage={() => \"일치하는 직원이 없습니다\"}\n                      filterOption={(option, inputValue) => {\n                        const employee = employees.find(emp => emp.name === option.value);\n                        const searchText = `${employee?.name || ''} ${employee?.position || ''} ${employee?.email || ''}`.toLowerCase();\n                        return searchText.includes(inputValue.toLowerCase());\n                      }}\n                      styles={{\n                        control: (base) => ({\n                          ...base,\n                          minHeight: '36px',\n                          height: '36px',\n                          fontSize: '12px',\n                          borderColor: '#d2d2d7',\n                          borderRadius: '6px',\n                          boxShadow: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',\n                          '&:hover': {\n                            borderColor: '#d2d2d7',\n                            boxShadow: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)'\n                          }\n                        }),\n                        valueContainer: (base) => ({\n                          ...base,\n                          height: '34px',\n                          padding: '0 8px'\n                        }),\n                        input: (base) => ({ ...base, margin: '0px', padding: '0px' }),\n                        indicatorSeparator: () => ({ display: 'none' }),\n                        indicatorsContainer: (base) => ({ ...base, height: '36px' }),\n                        menu: (base) => ({ ...base, fontSize: '12px', zIndex: 9999 }),\n                        option: (base) => ({ ...base, fontSize: '12px', padding: '8px 12px' })\n                      }}\n                    />\n                  </Suspense>\n                </div>\n                <div>\n                  <Label className=\"mb-1 block text-xs\">청구일</Label>\n                  <Input\n                    type=\"date\"\n                    value={watch('request_date')}\n                    onChange={e => setValue('request_date', e.target.value)}\n                    className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md transition-shadow duration-200\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"mb-1 block text-xs\">입고 요청일</Label>\n                  <Input\n                    type=\"date\"\n                    value={watch('delivery_request_date')}\n                    onChange={e => setValue('delivery_request_date', e.target.value)}\n                    className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md transition-shadow duration-200\"\n                  />\n                </div>\n              </div>\n\n              {/* 프로젝트 정보 */}\n              <div className=\"grid grid-cols-3 gap-2\">\n                <div>\n                  <Label className=\"mb-1 block text-xs\">PJ업체</Label>\n                  <Input \n                    type=\"text\" \n                    value={watch('project_vendor')} \n                    onChange={(e) => setValue('project_vendor', e.target.value)} \n                    placeholder=\"입력\"\n                    className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md focus:shadow-md transition-shadow duration-200\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"mb-1 block text-xs\">수주번호</Label>\n                  <Input \n                    type=\"text\" \n                    value={watch('sales_order_number')} \n                    onChange={(e) => setValue('sales_order_number', e.target.value)} \n                    placeholder=\"입력\"\n                    className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md focus:shadow-md transition-shadow duration-200\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"mb-1 block text-xs\">Item</Label>\n                  <Input \n                    type=\"text\" \n                    value={watch('project_item')} \n                    onChange={(e) => setValue('project_item', e.target.value)} \n                    placeholder=\"입력\"\n                    className=\"h-9 bg-white border border-[#d2d2d7] rounded-md text-xs shadow-sm hover:shadow-md focus:shadow-md transition-shadow duration-200\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Professional Items Section - 우측 3/4 폭 */}\n        <div className=\"w-3/4 space-y-4\">\n          <div className=\"flex items-center mb-2\">\n            <div className=\"flex flex-col justify-center\">\n              <h4 className=\"font-semibold text-foreground\">품목 목록</h4>\n              <p className=\"text-xs text-muted-foreground mt-0.5\">Purchase Items</p>\n            </div>\n            <div className=\"ml-[15px]\">\n              <Select value={currency} onValueChange={setCurrency}>\n                <SelectTrigger className=\"w-20 h-8 text-xs border-border rounded-md shadow-sm hover:shadow-md transition-shadow duration-200 bg-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"rounded-md\">\n                  <SelectItem value=\"KRW\">KRW</SelectItem>\n                  <SelectItem value=\"USD\">USD</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h4 className=\"text-base font-semibold text-gray-900\">품목 정보</h4>\n              <p className=\"text-xs text-gray-500 mt-1\">최대 100개 품목 입력 가능</p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"secondary\" className=\"text-hansl-500\">\n                총 금액: {totalAmount.toLocaleString('ko-KR')} {currency}\n              </Badge>\n              <Button \n                type=\"button\" \n                size=\"sm\" \n                variant=\"outline\" \n                className=\"bg-white text-gray-600 hover:text-red-600 hover:bg-red-50\" \n                onClick={() => { \n                  if (confirm('모든 품목을 삭제하시겠습니까?')) {\n                    fields.forEach((_idx, index) => remove(fields.length - 1 - index)); \n                    append({ \n                      line_number: 1, \n                      item_name: '', \n                      specification: '', \n                      quantity: 1, \n                      unit_price_value: 0, \n                      unit_price_currency: currency, \n                      amount_value: 0, \n                      amount_currency: currency, \n                      remark: '', \n                      link: '' \n                    });\n                  }\n                }}\n              >\n                전체삭제\n              </Button>\n              <Input\n                type=\"number\"\n                min={1}\n                value={addCount}\n                onChange={e => setAddCount(Math.max(1, Number(e.target.value.replace(/[^0-9]/g, ''))))}\n                className=\"w-16 h-8 text-xs\"\n              />\n              <Button\n                type=\"button\"\n                onClick={() => {\n                  const remainingSlots = 100 - fields.length;\n                  if (remainingSlots <= 0) {\n                    alert('최대 100개까지만 추가할 수 있습니다.');\n                    return;\n                  }\n                  const itemsToAdd = Math.min(addCount, remainingSlots);\n                  for (let i = 0; i < itemsToAdd; i++) {\n                    append({\n                      line_number: fields.length + 1 + i,\n                      item_name: '',\n                      specification: '',\n                      quantity: 1,\n                      unit_price_value: 0,\n                      unit_price_currency: currency,\n                      amount_value: 0,\n                      amount_currency: currency,\n                      remark: '',\n                      link: ''\n                    });\n                  }\n                  if (itemsToAdd < addCount) {\n                    alert(`최대 한도로 ${itemsToAdd}개만 추가되었습니다.`);\n                  }\n                }}\n                size=\"sm\"\n                className=\"bg-hansl-500 hover:bg-hansl-600 text-white\"\n              >\n                <Plus className=\"w-4 h-4 mr-1\" />\n                품목 추가\n              </Button>\n            </div>\n          </div>\n\n          {/* 테이블 형태의 품목 리스트 */}\n          <div className=\"relative border border-gray-200 rounded-lg overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <div className=\"max-h-[500px] overflow-y-auto\">\n                <table className=\"w-full text-xs\">\n                  <thead className=\"bg-gray-50 sticky top-0 z-10\">\n                    <tr className=\"border-b border-gray-200\">\n                      <th className=\"px-2 py-2 text-left font-medium text-gray-700 w-10\">#</th>\n                      <th className=\"px-2 py-2 text-left font-medium text-gray-700 sm:min-w-[150px]\">\n                        품목<span className=\"text-red-500\">*</span>\n                      </th>\n                      <th className=\"px-2 py-2 text-left font-medium text-gray-700 sm:min-w-[120px]\">규격</th>\n                      <th className=\"px-2 py-2 text-center font-medium text-gray-700 w-20\">\n                        수량<span className=\"text-red-500\">*</span>\n                      </th>\n                      <th className=\"px-2 py-2 text-right font-medium text-gray-700 sm:min-w-[100px]\">\n                        단가 ({currency})\n                      </th>\n                      <th className=\"px-2 py-2 text-right font-medium text-gray-700 sm:min-w-[120px]\">\n                        합계 ({currency})\n                      </th>\n                      {paymentCategory === \"구매요청\" && (\n                        <th className=\"px-2 py-2 text-left font-medium text-gray-700 sm:min-w-[150px]\">링크</th>\n                      )}\n                      <th className=\"px-2 py-2 text-left font-medium text-gray-700 sm:min-w-[150px]\">비고</th>\n                      <th className=\"px-2 py-2 text-center font-medium text-gray-700 w-10\"></th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white\">\n                    {fields.map((item, idx) => (\n                      <tr key={idx} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                        <td className=\"px-2 py-1 text-center text-gray-500\">{idx + 1}</td>\n                        {/* 품목 */}\n                        <td className=\"px-2 py-1\">\n                          <Input\n                            value={item.item_name}\n                            onChange={(e) => update(idx, { ...item, item_name: e.target.value })}\n                            className=\"h-7 w-full bg-white border border-gray-200 text-xs\"\n                            placeholder=\"품목명 입력\"\n                          />\n                        </td>\n\n                        {/* 규격 */}\n                        <td className=\"px-2 py-1\">\n                          <Input\n                            value={item.specification}\n                            onChange={(e) => update(idx, { ...item, specification: e.target.value })}\n                            className=\"h-7 w-full bg-white border border-gray-200 text-xs\"\n                            placeholder=\"규격 입력\"\n                          />\n                        </td>\n\n                        {/* 수량 */}\n                        <td className=\"px-2 py-1\">\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            value={item.quantity || ''}\n                            className=\"h-7 w-full bg-white border border-gray-200 text-xs text-center\"\n                            placeholder=\"0\"\n                            onChange={(e) => {\n                              const newQuantity = parseInt(e.target.value) || 0;\n                              update(idx, { ...item, quantity: newQuantity });\n                            }}\n                          />\n                        </td>\n\n                        {/* 단가 */}\n                        <td className=\"px-2 py-1\">\n                          <div className=\"flex items-center\">\n                            <Input\n                              type=\"text\"\n                              inputMode=\"decimal\"\n                              value={inputValues[`${idx}_unit_price_value`] ?? (item.unit_price_value === 0 ? \"\" : item.unit_price_value?.toLocaleString('ko-KR') || \"\")}\n                              onChange={(e) => {\n                                const raw = e.target.value.replace(/,/g, \"\");\n                                // 숫자와 소수점만 허용\n                                const cleanValue = raw.replace(/[^0-9.]/g, '');\n                                // 소수점 중복 방지\n                                const parts = cleanValue.split('.');\n                                const finalValue = parts.length > 2 ? parts[0] + '.' + parts.slice(1).join('') : cleanValue;\n                                \n                                // 입력 중인 값 저장 (소수점 유지)\n                                setInputValues(prev => ({...prev, [`${idx}_unit_price_value`]: finalValue}));\n                                \n                                // 계산용 숫자 값 저장\n                                const numVal = finalValue === '' ? 0 : parseFloat(finalValue) || 0;\n                                update(idx, { ...item, unit_price_value: numVal });\n                              }}\n                              onBlur={() => {\n                                // 포커스 벗어날 때 입력값 정리\n                                setInputValues(prev => {\n                                  const newState = {...prev};\n                                  delete newState[`${idx}_unit_price_value`];\n                                  return newState;\n                                });\n                              }}\n                              className=\"h-7 w-full bg-white border border-gray-200 text-xs text-right\"\n                              placeholder=\"0\"\n                            />\n                            <span className=\"ml-1 text-xs text-gray-500\">{currency === \"KRW\" ? \"₩\" : \"$\"}</span>\n                          </div>\n                        </td>\n\n                        {/* 합계 */}\n                        <td className=\"px-2 py-1\">\n                          <div className=\"flex items-center justify-end\">\n                            <span className=\"text-xs text-right font-medium\">\n                              {(item.amount_value || 0).toLocaleString('ko-KR')}\n                            </span>\n                            <span className=\"ml-1 text-xs text-gray-500\">{currency === \"KRW\" ? \"₩\" : \"$\"}</span>\n                          </div>\n                        </td>\n\n                        {/* 링크 (구매요청일 때만) */}\n                        {paymentCategory === \"구매요청\" && (\n                          <td className=\"px-2 py-1\">\n                            <Input\n                              value={item.link || ''}\n                              onChange={(e) => update(idx, { ...item, link: e.target.value })}\n                              type=\"url\"\n                              className=\"h-7 w-full bg-white border border-gray-200 text-xs\"\n                              placeholder=\"https://...\"\n                            />\n                          </td>\n                        )}\n\n                        {/* 비고 */}\n                        <td className=\"px-2 py-1\">\n                          <Input\n                            value={item.remark || ''}\n                            onChange={(e) => update(idx, { ...item, remark: e.target.value })}\n                            className=\"h-7 w-full bg-white border border-gray-200 text-xs\"\n                            placeholder=\"비고\"\n                          />\n                        </td>\n                        {/* 삭제 버튼 */}\n                        <td className=\"px-2 py-1 text-center\">\n                          {fields.length > 1 && (\n                            <Button\n                              type=\"button\"\n                              onClick={() => remove(idx)}\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-6 w-6 p-0 hover:bg-red-50\"\n                            >\n                              <X className=\"w-3 h-3 text-red-600\" />\n                            </Button>\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n          {/* 품목 수 표시 */}\n          <div className=\"mt-2 text-xs text-gray-500 text-right\">\n            총 {fields.length}개 품목 / 최대 100개\n          </div>\n        </div>\n      </div>\n\n      {/* 에러 메시지 */}\n      {error && (\n        <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm\">\n          {error}\n        </div>\n      )}\n\n      {/* 제출 버튼 */}\n      <div className=\"flex justify-end gap-3 mt-6\">\n        <Button \n          type=\"button\" \n          variant=\"outline\"\n          onClick={() => navigate(-1)}\n        >\n          취소\n        </Button>\n        <Button \n          type=\"submit\"\n          disabled={loading || !isFormValid}\n          className=\"bg-hansl-600 hover:bg-hansl-700 text-white\"\n        >\n          {loading ? (\n            <>\n              <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n              처리 중...\n            </>\n          ) : (\n            <>\n              <Save className=\"w-4 h-4 mr-2\" />\n              발주요청\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* 담당자 관리 모달 */}\n      <Dialog open={isContactDialogOpen} onOpenChange={setIsContactDialogOpen}>\n        <DialogContent className=\"w-full max-w-[95vw] sm:max-w-3xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>담당자 관리</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {contactsForEdit.map((contact, index) => (\n              <div key={index} className=\"flex gap-2 items-end\">\n                <div className=\"flex-1\">\n                  <Label className=\"text-xs\">이름</Label>\n                  <Input\n                    value={contact.contact_name}\n                    onChange={(e) => handleContactChange(index, 'contact_name', e.target.value)}\n                    placeholder=\"담당자 이름\"\n                    className=\"h-9\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <Label className=\"text-xs\">이메일</Label>\n                  <Input\n                    value={contact.contact_email}\n                    onChange={(e) => handleContactChange(index, 'contact_email', e.target.value)}\n                    placeholder=\"이메일\"\n                    className=\"h-9\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <Label className=\"text-xs\">전화번호</Label>\n                  <Input\n                    value={contact.contact_phone}\n                    onChange={(e) => handleContactChange(index, 'contact_phone', e.target.value)}\n                    placeholder=\"전화번호\"\n                    className=\"h-9\"\n                  />\n                </div>\n                <div className=\"flex-1\">\n                  <Label className=\"text-xs\">직책</Label>\n                  <Input\n                    value={contact.position}\n                    onChange={(e) => handleContactChange(index, 'position', e.target.value)}\n                    placeholder=\"직책\"\n                    className=\"h-9\"\n                  />\n                </div>\n                <Button\n                  type=\"button\"\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => removeContactSlot(index)}\n                  className=\"h-9 px-2\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n          <DialogFooter className=\"gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={addNewContactSlot}\n              size=\"sm\"\n            >\n              <Plus className=\"h-4 w-4 mr-1\" />\n              담당자 추가\n            </Button>\n            <DialogClose asChild>\n              <Button type=\"button\" variant=\"outline\" size=\"sm\">\n                취소\n              </Button>\n            </DialogClose>\n            <Button\n              type=\"button\"\n              onClick={handleSaveAllContacts}\n              disabled={!hasChanges}\n              size=\"sm\"\n            >\n              저장\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </form>\n  );\n}"],"file":"assets/PurchaseNewMain-DPFOPAOl.js"}