{"version":3,"mappings":"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","names":["employeeService","constructor","this","supabase","createClient","getEmployees","filters","query","from","select","order","search","or","department","eq","position","purchase_role","is_active","data","error","success","logger","Error","message","getEmployee","id","single","createEmployee","employeeData","email","existingEmployee","slack_id","existingSlackEmployee","employeeId","crypto","randomUUID","insert","join","updateEmployee","neq","updateData","update","deleteEmployee","purchaseRequests","limit","length","delete","toggleEmployeeStatus","currentEmployee","selectError","updateEmployeeRole","role","getDepartments","not","Set","map","emp","sort","getPositions","getEmployeesForExport","employee","name","phone","adress","getRoleDisplayName","created_at","Date","toLocaleDateString","app_admin","ceo","final_approver","middle_manager","buyer","checkPermission","userId","requiredRoles","hasPermission","includes","PURCHASE_ROLES","value","label","EmployeeFilters","onFiltersChange","onExport","onCreateNew","onAttendanceDownload","localSearch","setLocalSearch","useState","departments","setDepartments","positions","setPositions","useEffect","async","deptResult","posResult","Promise","all","loadOptions","hasFilters","jsxs","className","children","jsx","Button","variant","onClick","Calendar","Download","Plus","onSubmit","e","preventDefault","trim","Search","Input","type","placeholder","onChange","target","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","dept","pos","X","EmployeeTable","employees","onEdit","onView","onRefresh","loadingId","setLoadingId","currentUserRole","setCurrentUserRole","sortedData","sortConfig","handleSort","useTableSort","user","auth","getUser","checkUserRole","isHRorAdmin","canViewSensitive","canEdit","handleToggleStatus","result","toast","handleDelete","confirm","getRoleBadgeColor","Fragment","Table","TableHeader","TableRow","TableHead","SortableHeader","sortKey","currentSortKey","key","sortDirection","direction","onSort","TableBody","TableCell","colSpan","employeeID","employee_number","slice","annual_leave_granted_current_year","used_annual_leave","remaining_annual_leave","formatDate","join_date","birthday","bank","bank_account","Badge","DropdownMenu","DropdownMenuTrigger","asChild","disabled","MoreHorizontal","DropdownMenuContent","align","DropdownMenuItem","Eye","Edit","ToggleLeft","ToggleRight","Trash2","size","MobileCard","MobileCardHeader","MobileCardItem","MobileCardActions","EmployeeModal","isOpen","onClose","onSave","mode","isSubmitting","setIsSubmitting","form","useForm","defaultValues","reset","split","isReadOnly","Dialog","open","onOpenChange","DialogContent","DialogHeader","DialogTitle","getTitle","Form","handleSubmit","FormField","control","rules","required","render","field","FormItem","FormLabel","FormControl","FormMessage","pattern","defaultValue","DialogFooter","generateAttendanceExcel","workbook","ExcelJS","Workbook","worksheet","addWorksheet","pageSetup","paperSize","orientation","margins","left","right","top","bottom","header","footer","columns","width","addRow","height","mergeCells","titleCell","getCell","font","bold","alignment","horizontal","vertical","employeeName","employeeCell","startDate","endDate","periodCell","headerRow","eachCell","cell","_colNumber","border","style","fill","fgColor","argb","records","forEach","record","workStatus","remarks","isWeekendOrHoliday","dateString","date","dayOfWeek","getDay","year","getFullYear","month","getMonth","day","getDate","holidays","dateStr","toString","padStart","isWeekendOrHolidayFunc","dataRow","workType","clockIn","clockOut","status","isSpecialDay","isLeaveDay","colNumber","buffer","xlsx","writeBuffer","Blob","formatDateWithDay","getDayOfWeek","AttendanceDownload","selectedEmployee","setSelectedEmployee","setStartDate","setEndDate","isDownloading","setIsDownloading","handleClose","User","Combobox","options","filter","a","b","localeCompare","searchPlaceholder","emptyText","now","start","end","toISOString","selectedEmp","find","attendanceRecords","gte","lte","ascending","allDates","setDate","push","recordMap","Map","set","excelRecords","get","dateWithDay","dateObj","isWeekend","clock_in","clock_out","excelData","blob","url","window","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","EmployeeMain","setEmployees","filteredEmployees","setFilteredEmployees","loading","setLoading","setFilters","isModalOpen","setIsModalOpen","modalMode","setModalMode","isAttendanceModalOpen","setIsAttendanceModalOpen","loadEmployees","XLSX","__vitePreload","import","__VITE_PRELOAD__","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","filename","writeFile"],"ignoreList":[],"sources":["../../src/services/employeeService.ts","../../src/components/employee/EmployeeFilters.tsx","../../src/components/employee/EmployeeTable.tsx","../../src/components/employee/EmployeeModal.tsx","../../src/utils/exceljs/generateAttendanceExcel.ts","../../src/components/employee/AttendanceDownload.tsx","../../src/components/employee/EmployeeMain.tsx"],"sourcesContent":["import { createClient } from \"@/lib/supabase/client\";\nimport { Employee, EmployeeFormData, EmployeeFilters, PurchaseRole } from \"@/types/purchase\";\nimport { logger } from \"@/lib/logger\";\n\nclass EmployeeService {\n  private supabase;\n\n  constructor() {\n    this.supabase = createClient();\n  }\n\n  // 직원 목록 조회\n  async getEmployees(filters?: EmployeeFilters): Promise<{ success: boolean; data?: Employee[]; error?: string }> {\n    try {\n      let query = this.supabase\n        .from('employees')\n        .select('*')\n        .order('name');\n\n      // 검색 필터 적용\n      if (filters?.search) {\n        query = query.or(`\n          name.ilike.%${filters.search}%,\n          email.ilike.%${filters.search}%,\n          phone.ilike.%${filters.search}%,\n          position.ilike.%${filters.search}%,\n          department.ilike.%${filters.search}%,\n          slack_id.ilike.%${filters.search}%\n        `);\n      }\n\n      // 부서 필터 적용\n      if (filters?.department) {\n        query = query.eq('department', filters.department);\n      }\n\n      // 직급 필터 적용\n      if (filters?.position) {\n        query = query.eq('position', filters.position);\n      }\n\n      // 권한 필터 적용\n      if (filters?.purchase_role) {\n        query = query.eq('purchase_role', filters.purchase_role);\n      }\n\n      // 활성 상태 필터 적용\n      if (filters?.is_active !== undefined) {\n        query = query.eq('is_active', filters.is_active);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      return { success: true, data: data || [] };\n    } catch (error) {\n      logger.error('직원 목록 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 상세 조회\n  async getEmployee(id: string): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 생성\n  async createEmployee(employeeData: EmployeeFormData): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      // 이메일 중복 체크\n      if (employeeData.email) {\n        const { data: existingEmployee } = await this.supabase\n          .from('employees')\n          .select('id')\n          .eq('email', employeeData.email)\n          .single();\n\n        if (existingEmployee) {\n          return { success: false, error: '이미 등록된 이메일입니다.' };\n        }\n      }\n\n      // Slack ID 중복 체크\n      if (employeeData.slack_id) {\n        const { data: existingSlackEmployee } = await this.supabase\n          .from('employees')\n          .select('id')\n          .eq('slack_id', employeeData.slack_id)\n          .single();\n\n        if (existingSlackEmployee) {\n          return { success: false, error: '이미 등록된 Slack ID입니다.' };\n        }\n      }\n\n      // ID 생성 (UUID 형태)\n      const employeeId = crypto.randomUUID();\n\n      const { data, error } = await this.supabase\n        .from('employees')\n        .insert({\n          id: employeeId,\n          ...employeeData,\n          purchase_role: employeeData.purchase_role?.join(',') || null,\n          is_active: true\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 생성 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 수정\n  async updateEmployee(id: string, employeeData: Partial<EmployeeFormData>): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      // 이메일 중복 체크 (자신 제외)\n      if (employeeData.email) {\n        const { data: existingEmployee } = await this.supabase\n          .from('employees')\n          .select('id')\n          .eq('email', employeeData.email)\n          .neq('id', id)\n          .single();\n\n        if (existingEmployee) {\n          return { success: false, error: '이미 등록된 이메일입니다.' };\n        }\n      }\n\n      // Slack ID 중복 체크 (자신 제외)\n      if (employeeData.slack_id) {\n        const { data: existingSlackEmployee } = await this.supabase\n          .from('employees')\n          .select('id')\n          .eq('slack_id', employeeData.slack_id)\n          .neq('id', id)\n          .single();\n\n        if (existingSlackEmployee) {\n          return { success: false, error: '이미 등록된 Slack ID입니다.' };\n        }\n      }\n\n      const updateData = {\n        ...employeeData,\n        purchase_role: employeeData.purchase_role ? employeeData.purchase_role.join(',') : undefined\n      };\n      \n      // undefined 값 제거\n      if (updateData.purchase_role === undefined) {\n        delete updateData.purchase_role;\n      }\n      \n      const { data, error } = await this.supabase\n        .from('employees')\n        .update(updateData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 수정 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 삭제 (소프트 삭제)\n  async deleteEmployee(id: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      // 발주 요청과 연결된 직원인지 확인\n      const { data: purchaseRequests } = await this.supabase\n        .from('purchase_requests')\n        .select('id')\n        .eq('requester_id', id)\n        .limit(1);\n\n      if (purchaseRequests && purchaseRequests.length > 0) {\n        // 발주 요청과 연결된 직원은 비활성화만 가능\n        const { error } = await this.supabase\n          .from('employees')\n          .update({ is_active: false })\n          .eq('id', id);\n\n        if (error) throw error;\n\n        return { success: true };\n      } else {\n        // 연결된 데이터가 없으면 완전 삭제\n        const { error } = await this.supabase\n          .from('employees')\n          .delete()\n          .eq('id', id);\n\n        if (error) throw error;\n\n        return { success: true };\n      }\n    } catch (error) {\n      logger.error('직원 삭제 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직원 활성화/비활성화 토글\n  async toggleEmployeeStatus(id: string): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      // 현재 상태 조회\n      const { data: currentEmployee, error: selectError } = await this.supabase\n        .from('employees')\n        .select('is_active')\n        .eq('id', id)\n        .single();\n\n      if (selectError) throw selectError;\n\n      // 상태 토글\n      const { data, error } = await this.supabase\n        .from('employees')\n        .update({ is_active: !currentEmployee.is_active })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 상태 변경 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n\n\n  // 권한 변경\n  async updateEmployeeRole(id: string, role: PurchaseRole | null): Promise<{ success: boolean; data?: Employee; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .update({ purchase_role: role })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      return { success: true, data };\n    } catch (error) {\n      logger.error('직원 권한 변경 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 부서 목록 조회\n  async getDepartments(): Promise<{ success: boolean; data?: string[]; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .select('department')\n        .not('department', 'is', null)\n        .not('department', 'eq', '');\n\n      if (error) throw error;\n\n      // 중복 제거하고 정렬\n      const departments = [...new Set((data || []).map(emp => emp.department))].sort();\n\n      return { success: true, data: departments };\n    } catch (error) {\n      logger.error('부서 목록 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 직급 목록 조회\n  async getPositions(): Promise<{ success: boolean; data?: string[]; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .select('position')\n        .not('position', 'is', null)\n        .not('position', 'eq', '');\n\n      if (error) throw error;\n\n      // 중복 제거하고 정렬\n      const positions = [...new Set((data || []).map(emp => emp.position))].sort();\n\n      return { success: true, data: positions };\n    } catch (error) {\n      logger.error('직급 목록 조회 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // Excel 내보내기용 데이터 준비\n  async getEmployeesForExport(): Promise<{ success: boolean; data?: Array<Record<string, string>>; error?: string }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('employees')\n        .select('*')\n        .order('name');\n\n      if (error) throw error;\n\n      // Excel 형식에 맞게 데이터 변환\n      const exportData = (data || []).map(employee => ({\n        '이름': employee.name,\n        '이메일': employee.email || '',\n        '전화번호': employee.phone || '',\n        '주소': employee.adress || '',\n        '부서': employee.department || '',\n        '직급': employee.position || '',\n        '권한': this.getRoleDisplayName(employee.purchase_role),\n        'Slack ID': employee.slack_id || '',\n        '상태': employee.is_active ? '활성' : '비활성',\n        '등록일': employee.created_at ? new Date(employee.created_at).toLocaleDateString('ko-KR') : ''\n      }));\n\n      return { success: true, data: exportData };\n    } catch (error) {\n      logger.error('직원 Excel 내보내기 실패', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n\n  // 권한명 표시용 변환\n  private getRoleDisplayName(role?: string): string {\n    const roleNames: Record<string, string> = {\n      'app_admin': '앱 관리자',\n      'ceo': 'CEO',\n      'final_approver': '최종 승인자',\n      'middle_manager': '중간 관리자',\n      'lead buyer': '수석 구매자',\n      'buyer': '구매자'\n    };\n    \n    return roleNames[role || ''] || role || '권한 없음';\n  }\n\n  // 권한 체크 함수\n  async checkPermission(userId: string, requiredRoles: string[]): Promise<{ success: boolean; hasPermission?: boolean; error?: string }> {\n    try {\n      const { data: employee } = await this.supabase\n        .from('employees')\n        .select('purchase_role, is_active')\n        .eq('id', userId)\n        .single();\n\n      if (!employee || !employee.is_active) {\n        return { success: true, hasPermission: false };\n      }\n\n      const hasPermission = requiredRoles.includes(employee.purchase_role);\n      return { success: true, hasPermission };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.' \n      };\n    }\n  }\n}\n\nexport const employeeService = new EmployeeService();","\nimport { useState, useEffect } from 'react'\nimport { EmployeeFilters as EmployeeFiltersType, PurchaseRole } from '@/types/purchase'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Search, X, Download, Plus, Calendar } from 'lucide-react'\nimport { employeeService } from '@/services/employeeService'\n\ninterface EmployeeFiltersProps {\n  filters: EmployeeFiltersType\n  onFiltersChange: (filters: EmployeeFiltersType) => void\n  onExport: () => void\n  onCreateNew: () => void\n  onAttendanceDownload: () => void\n}\n\nconst PURCHASE_ROLES: { value: PurchaseRole; label: string }[] = [\n  { value: 'app_admin', label: '앱 관리자' },\n  { value: 'ceo', label: 'CEO' },\n  { value: 'final_approver', label: '최종 승인자' },\n  { value: 'middle_manager', label: '중간 관리자' },\n  { value: 'lead buyer', label: '수석 구매자' },\n  { value: 'buyer', label: '구매자' },\n]\n\nexport default function EmployeeFilters({ \n  filters, \n  onFiltersChange, \n  onExport,\n  onCreateNew,\n  onAttendanceDownload\n}: EmployeeFiltersProps) {\n  const [localSearch, setLocalSearch] = useState(filters.search || '')\n  const [departments, setDepartments] = useState<string[]>([])\n  const [positions, setPositions] = useState<string[]>([])\n\n  useEffect(() => {\n    // 부서와 직급 목록 로드\n    const loadOptions = async () => {\n      const [deptResult, posResult] = await Promise.all([\n        employeeService.getDepartments(),\n        employeeService.getPositions()\n      ])\n      \n      if (deptResult.success) {\n        setDepartments(deptResult.data || [])\n      }\n      \n      if (posResult.success) {\n        setPositions(posResult.data || [])\n      }\n    }\n    \n    loadOptions()\n  }, [])\n\n  const handleSearchSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    onFiltersChange({\n      ...filters,\n      search: localSearch.trim() || undefined\n    })\n  }\n\n  const handleDepartmentChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      department: value === 'all' ? undefined : value\n    })\n  }\n\n  const handlePositionChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      position: value === 'all' ? undefined : value\n    })\n  }\n\n  const handleRoleChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      purchase_role: value === 'all' ? undefined : value === 'none' ? '' : value\n    })\n  }\n\n  const handleStatusChange = (value: string) => {\n    onFiltersChange({\n      ...filters,\n      is_active: value === 'all' ? undefined : value === 'active'\n    })\n  }\n\n  const clearFilters = () => {\n    setLocalSearch('')\n    onFiltersChange({})\n  }\n\n  const hasFilters = filters.search || \n                     filters.department || \n                     filters.position || \n                     filters.purchase_role || \n                     filters.is_active !== undefined\n\n  return (\n    <div className=\"space-y-4\">\n      {/* 상단 액션 버튼 */}\n      <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4\">\n        <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">직원 관리</h2>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={onAttendanceDownload}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Calendar className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            <span className=\"hidden sm:inline\">출근현황표</span>\n            <span className=\"sm:hidden\">출근</span>\n          </Button>\n          <Button\n            variant=\"outline\"\n            onClick={onExport}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Download className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            <span className=\"hidden sm:inline\">Excel 내보내기</span>\n            <span className=\"sm:hidden\">Excel</span>\n          </Button>\n          <Button \n            onClick={onCreateNew}\n            className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm\"\n          >\n            <Plus className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n            직원 등록\n          </Button>\n        </div>\n      </div>\n\n      {/* 필터 섹션 */}\n      <div className=\"bg-white p-3 sm:p-4 rounded-lg border space-y-4\">\n        <form onSubmit={handleSearchSubmit} className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 sm:items-end sm:flex-wrap\">\n          {/* 검색 */}\n          <div className=\"flex-1 sm:min-w-[250px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              검색\n            </label>\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 sm:left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-3 h-3 sm:w-4 sm:h-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"이름, 이메일, 전화번호로 검색\"\n                value={localSearch}\n                onChange={(e) => setLocalSearch(e.target.value)}\n                className=\"pl-8 sm:pl-10 text-sm h-9\"\n              />\n            </div>\n          </div>\n\n          {/* 부서 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[120px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              부서\n            </label>\n            <Select\n              value={filters.department || 'all'}\n              onValueChange={handleDepartmentChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 부서</SelectItem>\n                {departments.map((dept) => (\n                  <SelectItem key={dept} value={dept}>\n                    {dept}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 직급 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[120px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              직급\n            </label>\n            <Select\n              value={filters.position || 'all'}\n              onValueChange={handlePositionChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 직급</SelectItem>\n                {positions.map((pos) => (\n                  <SelectItem key={pos} value={pos}>\n                    {pos}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 권한 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[140px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              권한\n            </label>\n            <Select\n              value={filters.purchase_role || 'all'}\n              onValueChange={handleRoleChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체 권한</SelectItem>\n                <SelectItem value=\"none\">권한 없음</SelectItem>\n                {PURCHASE_ROLES.map((role) => (\n                  <SelectItem key={role.value} value={role.value}>\n                    {role.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 상태 필터 */}\n          <div className=\"w-full sm:w-auto sm:min-w-[100px]\">\n            <label className=\"block text-xs sm:text-sm font-medium text-gray-700 mb-1\">\n              상태\n            </label>\n            <Select\n              value={\n                filters.is_active === undefined \n                  ? 'all' \n                  : filters.is_active \n                    ? 'active' \n                    : 'inactive'\n              }\n              onValueChange={handleStatusChange}\n            >\n              <SelectTrigger className=\"h-9\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">전체</SelectItem>\n                <SelectItem value=\"active\">활성</SelectItem>\n                <SelectItem value=\"inactive\">비활성</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* 검색 및 초기화 버튼 */}\n          <div className=\"flex gap-2 w-full sm:w-auto\">\n            <Button type=\"submit\" className=\"flex-1 sm:flex-none h-9 text-sm\">\n              검색\n            </Button>\n            {hasFilters && (\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={clearFilters}\n                className=\"flex items-center gap-1 h-9 text-sm\"\n              >\n                <X className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                <span className=\"hidden sm:inline\">초기화</span>\n                <span className=\"sm:hidden\">초기</span>\n              </Button>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Employee, PurchaseRole } from '@/types/purchase'\nimport { formatDate } from '@/utils/helpers'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { \n  MoreHorizontal, \n  Edit, \n  Trash2, \n  Eye, \n  ToggleLeft, \n  ToggleRight,\n  Shield\n} from 'lucide-react'\nimport { employeeService } from '@/services/employeeService'\nimport { toast } from 'sonner'\nimport { useTableSort } from '@/hooks/useTableSort'\nimport { SortableHeader } from '@/components/ui/sortable-header'\nimport { MobileCard, MobileCardItem, MobileCardHeader, MobileCardActions } from '@/components/ui/mobile-card'\n\ninterface EmployeeTableProps {\n  employees: Employee[]\n  onEdit: (employee: Employee) => void\n  onView: (employee: Employee) => void\n  onRefresh: () => void\n}\n\nexport default function EmployeeTable({ employees, onEdit, onView, onRefresh }: EmployeeTableProps) {\n  const [loadingId, setLoadingId] = useState<string | null>(null)\n  const [currentUserRole, setCurrentUserRole] = useState<string | null>(null)\n  const supabase = createClient()\n  const { sortedData, sortConfig, handleSort } = useTableSort(employees, 'name', 'asc')\n\n  // 현재 사용자 권한 확인\n  useEffect(() => {\n    const checkUserRole = async () => {\n      const { data: { user } } = await supabase.auth.getUser()\n      if (user) {\n        const { data: employee } = await supabase\n          .from('employees')\n          .select('role, purchase_role')  // role 필드도 가져오기\n          .eq('id', user.id)\n          .single()\n        \n        if (employee) {\n          setCurrentUserRole(employee.role || '')  // role 필드 사용 (hr, admin)\n        }\n      }\n    }\n    checkUserRole()\n  }, [])\n\n  // 민감한 정보 볼 수 있는 권한 체크 (hr, admin만) - hanslwebapp과 동일\n  const isHRorAdmin = currentUserRole === 'hr' || currentUserRole === 'admin'\n  const canViewSensitive = isHRorAdmin\n  const canEdit = isHRorAdmin\n\n  const handleToggleStatus = async (employee: Employee) => {\n    setLoadingId(employee.id)\n    try {\n      const result = await employeeService.toggleEmployeeStatus(employee.id)\n      \n      if (result.success) {\n        toast.success(`직원이 ${employee.is_active ? '비활성화' : '활성화'}되었습니다.`)\n        onRefresh()\n      } else {\n        toast.error(result.error || '상태 변경에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('상태 변경 중 오류가 발생했습니다.')\n    } finally {\n      setLoadingId(null)\n    }\n  }\n\n  const handleDelete = async (employee: Employee) => {\n    if (!confirm(`정말로 '${employee.name}' 직원을 삭제하시겠습니까?`)) {\n      return\n    }\n\n    setLoadingId(employee.id)\n    try {\n      const result = await employeeService.deleteEmployee(employee.id)\n      \n      if (result.success) {\n        toast.success('직원이 삭제되었습니다.')\n        onRefresh()\n      } else {\n        toast.error(result.error || '삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('삭제 중 오류가 발생했습니다.')\n    } finally {\n      setLoadingId(null)\n    }\n  }\n\n  const getRoleDisplayName = (role?: string) => {\n    const roleNames: Record<string, string> = {\n      'app_admin': '앱 관리자',\n      'ceo': 'CEO',\n      'final_approver': '최종 승인자',\n      'middle_manager': '중간 관리자',\n      'lead buyer': '수석 구매자',\n      'buyer': '구매자'\n    }\n    \n    return roleNames[role || ''] || '권한 없음'\n  }\n\n  const getRoleBadgeColor = (role?: string) => {\n    const colorMap: Record<string, string> = {\n      'app_admin': 'bg-purple-100 text-purple-800',\n      'ceo': 'bg-red-100 text-red-800',\n      'final_approver': 'bg-hansl-100 text-hansl-800',\n      'middle_manager': 'bg-green-100 text-green-800',\n      'lead buyer': 'bg-yellow-100 text-yellow-800',\n      'buyer': 'bg-gray-100 text-gray-800'\n    }\n    \n    return colorMap[role || ''] || 'bg-gray-100 text-gray-600'\n  }\n\n  // formatDate는 utils/helpers.ts에서 import\n\n  return (\n    <>\n      {/* Desktop Table View */}\n      <div className=\"hidden lg:block border rounded-lg overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-16 min-w-[50px]\">\n              <SortableHeader\n                sortKey=\"employeeID\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('employeeID' as keyof Employee)}\n              >\n                사번\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-14 min-w-[45px]\">\n              <SortableHeader\n                sortKey=\"name\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('name' as keyof Employee)}\n              >\n                이름\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-12 min-w-[40px]\">\n              <SortableHeader\n                sortKey=\"position\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('position' as keyof Employee)}\n              >\n                직급\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-16 min-w-[50px]\">\n              <SortableHeader\n                sortKey=\"department\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('department' as keyof Employee)}\n              >\n                부서\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-20 min-w-[70px]\">\n              <SortableHeader\n                sortKey=\"phone\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('phone' as keyof Employee)}\n              >\n                연락처\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"w-32 min-w-[100px]\">\n              <SortableHeader\n                sortKey=\"email\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('email' as keyof Employee)}\n              >\n                이메일\n              </SortableHeader>\n            </TableHead>\n            {/* 연차 정보는 모든 사용자에게 표시 */}\n            <TableHead className=\"w-11 min-w-[40px] text-center\">생성</TableHead>\n            <TableHead className=\"w-11 min-w-[40px] text-center\">사용</TableHead>\n            <TableHead className=\"w-11 min-w-[40px] text-center\">남은</TableHead>\n            {/* lg 이상에서만 표시되는 칼럼들 */}\n            <TableHead className=\"hidden lg:table-cell w-18 min-w-[60px]\">\n              <SortableHeader\n                sortKey=\"join_date\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('join_date' as keyof Employee)}\n              >\n                입사일\n              </SortableHeader>\n            </TableHead>\n            <TableHead className=\"hidden lg:table-cell w-20 min-w-[70px]\">\n              <SortableHeader\n                sortKey=\"birthday\"\n                currentSortKey={sortConfig.key as string | null}\n                sortDirection={sortConfig.direction}\n                onSort={() => handleSort('birthday' as keyof Employee)}\n              >\n                생년월일\n              </SortableHeader>\n            </TableHead>\n            {/* HR/Admin만 볼 수 있는 민감한 정보 */}\n            {isHRorAdmin && (\n              <>\n                <TableHead className=\"hidden xl:table-cell w-14 min-w-[45px]\">은행</TableHead>\n                <TableHead className=\"hidden xl:table-cell w-24 min-w-[80px]\">계좌번호</TableHead>\n                <TableHead className=\"hidden 2xl:table-cell min-w-[120px]\">주소</TableHead>\n                <TableHead>\n                  <SortableHeader\n                    sortKey=\"purchase_role\"\n                    currentSortKey={sortConfig.key as string | null}\n                    sortDirection={sortConfig.direction}\n                    onSort={() => handleSort('purchase_role' as keyof Employee)}\n                  >\n                    권한\n                  </SortableHeader>\n                </TableHead>\n                <TableHead>\n                  <SortableHeader\n                    sortKey=\"slack_id\"\n                    currentSortKey={sortConfig.key as string | null}\n                    sortDirection={sortConfig.direction}\n                    onSort={() => handleSort('slack_id' as keyof Employee)}\n                  >\n                    Slack ID\n                  </SortableHeader>\n                </TableHead>\n                <TableHead>\n                  <SortableHeader\n                    sortKey=\"is_active\"\n                    currentSortKey={sortConfig.key as string | null}\n                    sortDirection={sortConfig.direction}\n                    onSort={() => handleSort('is_active' as keyof Employee)}\n                  >\n                    상태\n                  </SortableHeader>\n                </TableHead>\n              </>\n            )}\n                <TableHead className=\"w-16 min-w-[50px]\">작업</TableHead>\n              </TableRow>\n            </TableHeader>\n        <TableBody>\n          {employees.length === 0 ? (\n            <TableRow>\n              <TableCell colSpan={canViewSensitive ? 14 : 7} className=\"text-center py-8 text-gray-500\">\n                등록된 직원이 없습니다.\n              </TableCell>\n            </TableRow>\n          ) : (\n            sortedData.map((employee) => (\n              <TableRow key={employee.id}>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">\n                  {employee.employeeID || employee.employee_number || employee.id.slice(0, 8)}\n                </TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">\n                  {employee.name}\n                </TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.position || '-'}</TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.department || '-'}</TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.phone || '-'}</TableCell>\n                <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.email || '-'}</TableCell>\n                {/* 연차 정보는 모든 사용자에게 표시 */}\n                <TableCell className=\"text-center text-[11px] px-1 py-1.5\">\n                  {employee.annual_leave_granted_current_year || 0}\n                </TableCell>\n                <TableCell className=\"text-center text-[11px] px-1 py-1.5\">\n                  {employee.used_annual_leave || 0}\n                </TableCell>\n                <TableCell className=\"text-center text-[11px] px-1 py-1.5\">\n                  {employee.remaining_annual_leave !== undefined \n                    ? employee.remaining_annual_leave\n                    : '-'}\n                </TableCell>\n                {/* lg 이상에서만 표시되는 칼럼들 */}\n                <TableCell className=\"hidden lg:table-cell text-[11px] px-2 py-1.5\">\n                  {formatDate(employee.join_date)}\n                </TableCell>\n                <TableCell className=\"hidden lg:table-cell text-[11px] px-2 py-1.5\">\n                  {formatDate(employee.birthday)}\n                </TableCell>\n                {/* HR/Admin만 볼 수 있는 민감한 정보 */}\n                {isHRorAdmin && (\n                  <>\n                    <TableCell className=\"hidden xl:table-cell text-[11px] px-2 py-1.5\">{employee.bank || '-'}</TableCell>\n                    <TableCell className=\"hidden xl:table-cell text-[11px] px-2 py-1.5\">{employee.bank_account || '-'}</TableCell>\n                    <TableCell className=\"hidden 2xl:table-cell text-[11px] px-2 py-1.5\">{employee.adress || '-'}</TableCell>\n                    <TableCell className=\"px-2 py-1.5\">\n                      <Badge\n                        className={`text-[10px] px-1.5 py-0.5 ${getRoleBadgeColor(employee.purchase_role)}`}\n                      >\n                        {getRoleDisplayName(employee.purchase_role)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-[11px] px-2 py-1.5\">{employee.slack_id || '-'}</TableCell>\n                    <TableCell className=\"px-2 py-1.5\">\n                      <Badge\n                        variant={employee.is_active ? 'default' : 'secondary'}\n                        className={`text-[10px] px-1.5 py-0.5 ${employee.is_active ? 'bg-green-100 text-green-800' : ''}`}\n                      >\n                        {employee.is_active ? '활성' : '비활성'}\n                      </Badge>\n                    </TableCell>\n                  </>\n                )}\n                <TableCell className=\"px-1 py-1.5\">\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"h-7 w-7 p-0\"\n                        disabled={loadingId === employee.id}\n                      >\n                        <MoreHorizontal className=\"h-3 w-3\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem onClick={() => onView(employee)}>\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        상세 보기\n                      </DropdownMenuItem>\n                      {canEdit && (\n                        <>\n                          <DropdownMenuItem onClick={() => onEdit(employee)}>\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            수정\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => handleToggleStatus(employee)}>\n                            {employee.is_active ? (\n                              <>\n                                <ToggleLeft className=\"mr-2 h-4 w-4\" />\n                                비활성화\n                              </>\n                            ) : (\n                              <>\n                                <ToggleRight className=\"mr-2 h-4 w-4\" />\n                                활성화\n                              </>\n                            )}\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            onClick={() => handleDelete(employee)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            삭제\n                          </DropdownMenuItem>\n                        </>\n                      )}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n          </Table>\n        </div>\n      </div>\n\n      {/* Tablet View */}\n      <div className=\"hidden md:block lg:hidden\">\n        <div className=\"overflow-x-auto border rounded-lg\">\n          <table className=\"w-full min-w-[700px]\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-16\">사번</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-20\">이름</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-20\">직급</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-24\">부서</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm\">연락처</th>\n                <th className=\"text-left p-3 font-medium text-gray-900 text-sm\">이메일</th>\n                {isHRorAdmin && (\n                  <>\n                    <th className=\"text-left p-3 font-medium text-gray-900 text-sm w-24\">권한</th>\n                    <th className=\"text-center p-3 font-medium text-gray-900 text-sm w-16\">상태</th>\n                  </>\n                )}\n                <th className=\"text-center p-3 font-medium text-gray-900 text-sm w-16\">작업</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {sortedData.length === 0 ? (\n                <tr>\n                  <td colSpan={isHRorAdmin ? 9 : 7} className=\"text-center py-8 text-gray-500\">\n                    등록된 직원이 없습니다.\n                  </td>\n                </tr>\n              ) : (\n                sortedData.map((employee) => (\n                  <tr key={employee.id} className=\"hover:bg-gray-50\">\n                    <td className=\"p-3 text-sm\">\n                      {employee.employeeID || employee.employee_number || employee.id.slice(0, 8)}\n                    </td>\n                    <td className=\"p-3 text-sm font-medium\">{employee.name}</td>\n                    <td className=\"p-3 text-sm\">{employee.position || '-'}</td>\n                    <td className=\"p-3 text-sm\">{employee.department || '-'}</td>\n                    <td className=\"p-3 text-sm\">{employee.phone || '-'}</td>\n                    <td className=\"p-3 text-sm\">{employee.email || '-'}</td>\n                    {isHRorAdmin && (\n                      <>\n                        <td className=\"p-3\">\n                          <Badge className={`text-xs ${getRoleBadgeColor(employee.purchase_role)}`}>\n                            {getRoleDisplayName(employee.purchase_role)}\n                          </Badge>\n                        </td>\n                        <td className=\"p-3 text-center\">\n                          <Badge\n                            variant={employee.is_active ? 'default' : 'secondary'}\n                            className={`text-xs ${employee.is_active ? 'bg-green-100 text-green-800' : ''}`}\n                          >\n                            {employee.is_active ? '활성' : '비활성'}\n                          </Badge>\n                        </td>\n                      </>\n                    )}\n                    <td className=\"p-3 text-center\">\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => onView(employee)}>\n                            <Eye className=\"mr-2 h-4 w-4\" />\n                            상세 보기\n                          </DropdownMenuItem>\n                          {canEdit && (\n                            <>\n                              <DropdownMenuItem onClick={() => onEdit(employee)}>\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                수정\n                              </DropdownMenuItem>\n                              <DropdownMenuItem onClick={() => handleToggleStatus(employee)}>\n                                {employee.is_active ? (\n                                  <>\n                                    <ToggleLeft className=\"mr-2 h-4 w-4\" />\n                                    비활성화\n                                  </>\n                                ) : (\n                                  <>\n                                    <ToggleRight className=\"mr-2 h-4 w-4\" />\n                                    활성화\n                                  </>\n                                )}\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleDelete(employee)}\n                                className=\"text-red-600\"\n                              >\n                                <Trash2 className=\"mr-2 h-4 w-4\" />\n                                삭제\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Mobile Card View */}\n      <div className=\"block md:hidden space-y-3\">\n        {sortedData.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            등록된 직원이 없습니다.\n          </div>\n        ) : (\n          sortedData.map((employee) => (\n            <MobileCard key={employee.id}>\n              <MobileCardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <span>{employee.name}</span>\n                  <Badge\n                    variant={employee.is_active ? 'default' : 'secondary'}\n                    className={employee.is_active ? 'bg-green-100 text-green-800' : ''}\n                  >\n                    {employee.is_active ? '활성' : '비활성'}\n                  </Badge>\n                </div>\n              </MobileCardHeader>\n              \n              <MobileCardItem label=\"사번\" value={employee.employeeID || employee.employee_number || employee.id.slice(0, 8)} />\n              <MobileCardItem label=\"직급\" value={employee.position || '-'} />\n              <MobileCardItem label=\"부서\" value={employee.department || '-'} />\n              <MobileCardItem label=\"연락처\" value={employee.phone || '-'} />\n              <MobileCardItem label=\"이메일\" value={employee.email || '-'} />\n              \n              {canViewSensitive && (\n                <>\n                  <MobileCardItem \n                    label=\"권한\" \n                    value={\n                      <Badge className={getRoleBadgeColor(employee.purchase_role)}>\n                        {getRoleDisplayName(employee.purchase_role)}\n                      </Badge>\n                    } \n                  />\n                  <MobileCardItem label=\"Slack ID\" value={employee.slack_id || '-'} />\n                  <MobileCardItem label=\"주소\" value={employee.adress || '-'} />\n                  <MobileCardItem label=\"은행\" value={employee.bank || '-'} />\n                  <MobileCardItem label=\"계좌번호\" value={employee.bank_account || '-'} />\n                  <MobileCardItem \n                    label=\"연차\" \n                    value={employee.remaining_annual_leave !== undefined ? `${employee.remaining_annual_leave}일` : '-'} \n                  />\n                </>\n              )}\n              \n              <MobileCardActions>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => onView(employee)}\n                >\n                  <Eye className=\"w-4 h-4\" />\n                </Button>\n                {canEdit && (\n                  <>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => onEdit(employee)}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleToggleStatus(employee)}\n                      disabled={loadingId === employee.id}\n                    >\n                      {employee.is_active ? (\n                        <ToggleLeft className=\"w-4 h-4\" />\n                      ) : (\n                        <ToggleRight className=\"w-4 h-4\" />\n                      )}\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"text-red-600\"\n                      onClick={() => handleDelete(employee)}\n                      disabled={loadingId === employee.id}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </>\n                )}\n              </MobileCardActions>\n            </MobileCard>\n          ))\n        )}\n      </div>\n    </>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Employee, EmployeeFormData, PurchaseRole } from '@/types/purchase'\nimport { Button } from '@/components/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useForm } from 'react-hook-form'\nimport { employeeService } from '@/services/employeeService'\nimport { toast } from 'sonner'\n\ninterface EmployeeModalProps {\n  isOpen: boolean\n  onClose: () => void\n  employee?: Employee | null\n  onSave: () => void\n  mode: 'create' | 'edit' | 'view'\n}\n\nconst PURCHASE_ROLES: { value: PurchaseRole; label: string }[] = [\n  { value: 'app_admin', label: '앱 관리자' },\n  { value: 'ceo', label: 'CEO' },\n  { value: 'final_approver', label: '최종 승인자' },\n  { value: 'middle_manager', label: '중간 관리자' },\n  { value: 'lead buyer', label: '수석 구매자' },\n  { value: 'buyer', label: '구매자' },\n]\n\nexport default function EmployeeModal({ isOpen, onClose, employee, onSave, mode }: EmployeeModalProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [departments, setDepartments] = useState<string[]>([])\n  const [positions, setPositions] = useState<string[]>([])\n\n  const form = useForm<EmployeeFormData>({\n    defaultValues: {\n      name: '',\n      email: '',\n      phone: '',\n      position: '',\n      department: '',\n      purchase_role: [],\n      slack_id: '',\n    }\n  })\n\n  useEffect(() => {\n    // 부서와 직급 목록 로드\n    const loadOptions = async () => {\n      const [deptResult, posResult] = await Promise.all([\n        employeeService.getDepartments(),\n        employeeService.getPositions()\n      ])\n      \n      if (deptResult.success) {\n        setDepartments(deptResult.data || [])\n      }\n      \n      if (posResult.success) {\n        setPositions(posResult.data || [])\n      }\n    }\n    \n    loadOptions()\n  }, [])\n\n  useEffect(() => {\n    if (employee && isOpen) {\n      form.reset({\n        name: employee.name || '',\n        email: employee.email || '',\n        phone: employee.phone || '',\n        position: employee.position || '',\n        department: employee.department || '',\n        purchase_role: employee.purchase_role ? employee.purchase_role.split(',') : [],\n        slack_id: employee.slack_id || '',\n      })\n    } else if (!employee && isOpen) {\n      form.reset({\n        name: '',\n        email: '',\n        phone: '',\n        position: '',\n        department: '',\n        purchase_role: [],\n        slack_id: '',\n      })\n    }\n  }, [employee, isOpen, form])\n\n  const onSubmit = async (data: EmployeeFormData) => {\n    setIsSubmitting(true)\n    \n    try {\n      let result\n      \n      if (mode === 'create') {\n        result = await employeeService.createEmployee(data)\n      } else if (mode === 'edit' && employee) {\n        result = await employeeService.updateEmployee(employee.id, data)\n      }\n\n      if (result?.success) {\n        toast.success(mode === 'create' ? '직원이 등록되었습니다.' : '직원 정보가 수정되었습니다.')\n        onSave()\n        onClose()\n      } else {\n        toast.error(result?.error || '처리 중 오류가 발생했습니다.')\n      }\n    } catch (error) {\n      toast.error('처리 중 오류가 발생했습니다.')\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const getTitle = () => {\n    switch (mode) {\n      case 'create': return '직원 등록'\n      case 'edit': return '직원 수정'\n      case 'view': return '직원 상세'\n      default: return '직원'\n    }\n  }\n\n  const isReadOnly = mode === 'view'\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-[95vw] sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{getTitle()}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                rules={{\n                  required: '이름을 입력해주세요.'\n                }}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>이름 *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"이름을 입력하세요\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                rules={{\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: \"올바른 이메일 형식을 입력해주세요.\"\n                  }\n                }}\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>이메일</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"email\"\n                        placeholder=\"user@example.com\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>전화번호</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"010-0000-0000\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"slack_id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Slack ID</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"U01234567890\"\n                        disabled={isReadOnly}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"department\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>부서</FormLabel>\n                    <FormControl>\n                      {isReadOnly ? (\n                        <Input {...field} disabled />\n                      ) : (\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"부서를 선택하세요\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {departments.map((dept) => (\n                              <SelectItem key={dept} value={dept}>\n                                {dept}\n                              </SelectItem>\n                            ))}\n                            <SelectItem value=\"custom\">직접 입력</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      )}\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"position\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>직급</FormLabel>\n                    <FormControl>\n                      {isReadOnly ? (\n                        <Input {...field} disabled />\n                      ) : (\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"직급을 선택하세요\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {positions.map((pos) => (\n                              <SelectItem key={pos} value={pos}>\n                                {pos}\n                              </SelectItem>\n                            ))}\n                            <SelectItem value=\"custom\">직접 입력</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      )}\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"purchase_role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>권한</FormLabel>\n                    <FormControl>\n                      <Select \n                        onValueChange={(value) => field.onChange(value === 'none' ? [] : [value])} \n                        defaultValue={field.value?.[0] || 'none'}\n                        disabled={isReadOnly}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"권한을 선택하세요\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">권한 없음</SelectItem>\n                          {PURCHASE_ROLES.map((role) => (\n                            <SelectItem key={role.value} value={role.value}>\n                              {role.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {mode === 'view' && employee && (\n              <div className=\"pt-4 border-t\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-500\">상태:</span>\n                    <span className={`ml-2 px-2 py-1 rounded text-xs ${\n                      employee.is_active \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-gray-100 text-gray-600'\n                    }`}>\n                      {employee.is_active ? '활성' : '비활성'}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">등록일:</span>\n                    <span className=\"ml-2\">\n                      {employee.created_at ? new Date(employee.created_at).toLocaleDateString('ko-KR') : '-'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <DialogFooter className=\"gap-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                {mode === 'view' ? '닫기' : '취소'}\n              </Button>\n              {!isReadOnly && (\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting \n                    ? (mode === 'create' ? '등록 중...' : '수정 중...')\n                    : (mode === 'create' ? '등록' : '수정')\n                  }\n                </Button>\n              )}\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  )\n}","import ExcelJS from 'exceljs';\n\nexport interface AttendanceData {\n  employeeName: string;\n  employeeId: string;\n  department: string;\n  startDate: string;\n  endDate: string;\n  records: AttendanceRecord[];\n}\n\nexport interface AttendanceRecord {\n  date: string;\n  dayOfWeek: string;\n  employeeName: string;\n  employeeId: string;\n  department: string;\n  position: string;\n  workType: string;\n  clockIn?: string;\n  clockOut?: string;\n  status: string;\n  remarks?: string;\n}\n\nexport async function generateAttendanceExcel(data: AttendanceData): Promise<Blob> {\n  const workbook = new ExcelJS.Workbook();\n  const worksheet = workbook.addWorksheet('출근현황표');\n\n  // 엑셀 페이지 설정\n  worksheet.pageSetup = {\n    paperSize: 9, // A4\n    orientation: 'portrait',\n    margins: {\n      left: 0.7,\n      right: 0.7,\n      top: 0.75,\n      bottom: 0.75,\n      header: 0.3,\n      footer: 0.3,\n    },\n  };\n\n  // 컬럼 너비 설정 (이미지에서 본 레이아웃에 맞춤)\n  worksheet.columns = [\n    { width: 12 }, // 날짜\n    { width: 8 },  // 이름\n    { width: 12 }, // 사번\n    { width: 8 },  // 부서\n    { width: 6 },  // 직급\n    { width: 8 },  // 근무형태\n    { width: 12 }, // 출근시간\n    { width: 12 }, // 퇴근시간\n    { width: 8 },  // 출퇴근상태\n    { width: 8 },  // 근무상태\n  ];\n\n  // 제목 헤더 (1페이지 표시)\n  const titleRow = worksheet.addRow(['1']);\n  titleRow.height = 25;\n  worksheet.mergeCells('A1:J1');\n  const titleCell = worksheet.getCell('A1');\n  titleCell.value = '1';\n  titleCell.font = { name: '맑은 고딕', size: 14, bold: true };\n  titleCell.alignment = { horizontal: 'center', vertical: 'middle' };\n\n  // 공백 행\n  worksheet.addRow([]);\n\n  // 직원명과 조회기간 헤더\n  const employeeRow = worksheet.addRow([`${data.employeeName} 내역 (21)`]);\n  employeeRow.height = 20;\n  worksheet.mergeCells('A3:J3');\n  const employeeCell = worksheet.getCell('A3');\n  employeeCell.font = { name: '맑은 고딕', size: 12, bold: true };\n  employeeCell.alignment = { horizontal: 'left', vertical: 'middle' };\n\n  const periodRow = worksheet.addRow([`조회기간: ${data.startDate} ~ ${data.endDate}`]);\n  periodRow.height = 20;\n  worksheet.mergeCells('A4:J4');\n  const periodCell = worksheet.getCell('A4');\n  periodCell.font = { name: '맑은 고딕', size: 10 };\n  periodCell.alignment = { horizontal: 'left', vertical: 'middle' };\n\n  // 테이블 헤더\n  const headerRow = worksheet.addRow([\n    '날짜',\n    '이름', \n    '사번',\n    '부서',\n    '직급',\n    '근무형태',\n    '출근시간',\n    '퇴근시간',\n    '출퇴근상태',\n    '근무상태'\n  ]);\n  \n  headerRow.height = 25;\n  \n  // 헤더 스타일링\n  headerRow.eachCell((cell, _colNumber) => {\n    cell.font = { name: '맑은 고딕', size: 10, bold: true };\n    cell.alignment = { horizontal: 'center', vertical: 'middle' };\n    cell.border = {\n      top: { style: 'thin' },\n      left: { style: 'thin' },\n      bottom: { style: 'thin' },\n      right: { style: 'thin' }\n    };\n    cell.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: 'FFE0E0E0' }\n    };\n  });\n\n  // 주말/공휴일 확인 함수\n  const isWeekendOrHolidayFunc = (dateString: string): boolean => {\n    const date = new Date(dateString.split('(')[0]); // 날짜 부분만 추출\n    const dayOfWeek = date.getDay();\n    \n    // 주말 (토요일: 6, 일요일: 0)\n    if (dayOfWeek === 0 || dayOfWeek === 6) {\n      return true;\n    }\n    \n    // 공휴일 (간단한 공휴일 목록 - 확장 가능)\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    \n    // 기본 공휴일 (추가 필요시 확장)\n    const holidays = [\n      `${year}-01-01`, // 신정\n      `${year}-03-01`, // 삼일절\n      `${year}-05-05`, // 어린이날\n      `${year}-06-06`, // 현충일\n      `${year}-08-15`, // 광복절\n      `${year}-10-03`, // 개천절\n      `${year}-10-09`, // 한글날\n      `${year}-12-25`, // 크리스마스\n    ];\n    \n    const dateStr = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    return holidays.includes(dateStr);\n  };\n\n  // 데이터 행 추가\n  data.records.forEach(record => {\n    // 연차/공휴일 판단을 위한 근무상태 결정\n    let workStatus = record.remarks || '-';\n    const isWeekendOrHoliday = isWeekendOrHolidayFunc(record.date);\n    \n    // 연차나 공휴일인 경우 근무상태에 표시\n    if (record.remarks && record.remarks.includes('연차')) {\n      workStatus = '연차';\n    } else if (isWeekendOrHoliday) {\n      const date = new Date(record.date.split('(')[0]);\n      const dayOfWeek = date.getDay();\n      \n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        workStatus = '주말';\n      } else {\n        workStatus = '공휴일';\n      }\n    }\n\n    const dataRow = worksheet.addRow([\n      record.date,\n      record.employeeName,\n      record.employeeId,\n      record.department,\n      record.position,\n      record.workType,\n      record.clockIn || '-',\n      record.clockOut || '-',\n      record.status,\n      workStatus\n    ]);\n\n    dataRow.height = 20;\n    \n    const isSpecialDay = isWeekendOrHoliday;\n    const isLeaveDay = record.remarks && record.remarks.includes('연차');\n    \n    // 데이터 행 스타일링\n    dataRow.eachCell((cell, colNumber) => {\n      cell.font = { name: '맑은 고딕', size: 9 };\n      cell.alignment = { \n        horizontal: colNumber === 1 ? 'center' : 'left', // 날짜는 가운데, 나머지는 왼쪽\n        vertical: 'middle' \n      };\n      cell.border = {\n        top: { style: 'thin' },\n        left: { style: 'thin' },\n        bottom: { style: 'thin' },\n        right: { style: 'thin' }\n      };\n      \n      // 출근시간과 퇴근시간은 가운데 정렬\n      if (colNumber === 7 || colNumber === 8) {\n        cell.alignment = { horizontal: 'center', vertical: 'middle' };\n      }\n      \n      // 색상 우선순위: 연차 > 주말/공휴일 > 일반 상태\n      if (isLeaveDay) {\n        // 연차는 연녹색으로 표기\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFE8F5E8' } // 연녹색\n        };\n      } else if (isSpecialDay) {\n        // 주말/공휴일은 연붉은색으로 표기\n        cell.fill = {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFFFE8E8' } // 연붉은색\n        };\n      }\n    });\n  });\n\n  // 엑셀 파일을 Blob으로 변환\n  const buffer = await workbook.xlsx.writeBuffer();\n  return new Blob([buffer], { \n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n  });\n}\n\n// 요일 계산 함수\nexport function getDayOfWeek(dateString: string): string {\n  const date = new Date(dateString);\n  const days = ['일', '월', '화', '수', '목', '금', '토'];\n  return days[date.getDay()];\n}\n\n// 날짜 포맷팅 함수 (YYYY-MM-DD를 YYYY-MM-DD(요일)로 변환)\nexport function formatDateWithDay(dateString: string): string {\n  const dayOfWeek = getDayOfWeek(dateString);\n  return `${dateString}(${dayOfWeek})`;\n}","import { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Combobox, ComboboxOption } from '@/components/ui/combobox'\nimport { Download, Calendar, User, X } from 'lucide-react'\nimport { Employee } from '@/types/purchase'\nimport { toast } from 'sonner'\nimport { createClient } from '@/lib/supabase/client'\nimport { generateAttendanceExcel, formatDateWithDay } from '@/utils/exceljs/generateAttendanceExcel'\n\ninterface AttendanceDownloadProps {\n  employees: Employee[]\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport default function AttendanceDownload({ employees, isOpen, onClose }: AttendanceDownloadProps) {\n  const [selectedEmployee, setSelectedEmployee] = useState<string>('')\n  const [startDate, setStartDate] = useState<string>('')\n  const [endDate, setEndDate] = useState<string>('')\n  const [isDownloading, setIsDownloading] = useState(false)\n  \n  const supabase = createClient()\n\n  // 기본 날짜 설정 (이번 달)\n  const setCurrentMonth = () => {\n    const now = new Date()\n    const start = new Date(now.getFullYear(), now.getMonth(), 1)\n    const end = new Date(now.getFullYear(), now.getMonth() + 1, 0)\n    \n    setStartDate(start.toISOString().split('T')[0])\n    setEndDate(end.toISOString().split('T')[0])\n  }\n\n  // 지난 달 설정\n  const setLastMonth = () => {\n    const now = new Date()\n    const start = new Date(now.getFullYear(), now.getMonth() - 1, 1)\n    const end = new Date(now.getFullYear(), now.getMonth(), 0)\n    \n    setStartDate(start.toISOString().split('T')[0])\n    setEndDate(end.toISOString().split('T')[0])\n  }\n\n  const handleDownload = async () => {\n    if (!selectedEmployee) {\n      toast.error('직원을 선택해주세요.')\n      return\n    }\n    \n    if (!startDate || !endDate) {\n      toast.error('조회 기간을 설정해주세요.')\n      return\n    }\n    \n    if (new Date(startDate) > new Date(endDate)) {\n      toast.error('시작일이 종료일보다 늦을 수 없습니다.')\n      return\n    }\n\n    setIsDownloading(true)\n    \n    try {\n      // 선택된 직원 정보 가져오기\n      const selectedEmp = employees.find(emp => emp.id === selectedEmployee)\n      if (!selectedEmp) {\n        throw new Error('선택된 직원 정보를 찾을 수 없습니다.')\n      }\n\n      // 출근 기록 조회\n      const { data: attendanceRecords, error } = await supabase\n        .from('attendance_records')\n        .select('*')\n        .eq('employee_id', selectedEmployee)\n        .gte('date', startDate)\n        .lte('date', endDate)\n        .order('date', { ascending: true })\n\n      if (error) {\n        throw new Error('출근 기록을 조회하는데 실패했습니다.')\n      }\n\n      // 날짜 범위 내의 모든 날짜 생성 (출근 기록이 없는 날도 포함)\n      const allDates: string[] = []\n      const start = new Date(startDate)\n      const end = new Date(endDate)\n      \n      for (let date = new Date(start); date <= end; date.setDate(date.getDate() + 1)) {\n        allDates.push(date.toISOString().split('T')[0])\n      }\n\n      // 출근 기록을 날짜별로 매핑\n      const recordMap = new Map()\n      attendanceRecords?.forEach(record => {\n        recordMap.set(record.date, record)\n      })\n\n      // 엑셀 데이터 구성\n      const excelRecords = allDates.map(date => {\n        const record = recordMap.get(date)\n        const dateWithDay = formatDateWithDay(date)\n        const dayOfWeek = dateWithDay.split('(')[1]?.split(')')[0] || ''\n        \n        // 주말인지 확인 (토요일: 6, 일요일: 0)\n        const dateObj = new Date(date)\n        const isWeekend = dateObj.getDay() === 0 || dateObj.getDay() === 6\n        \n        return {\n          date: dateWithDay,\n          dayOfWeek,\n          employeeName: selectedEmp.name || '',\n          employeeId: selectedEmp.employeeID || selectedEmp.employee_number || '',\n          department: selectedEmp.department || '',\n          position: selectedEmp.position || '',\n          workType: '사원', // 기본값, 필요시 데이터베이스에서 가져올 수 있음\n          clockIn: record?.clock_in || (isWeekend ? '-' : ''),\n          clockOut: record?.clock_out || (isWeekend ? '-' : ''),\n          status: record?.status === '정상 출근' ? '정상 출근' : (record?.status || (isWeekend ? '' : '')),\n          remarks: record?.remarks || ''\n        }\n      })\n\n      // 엑셀 파일 생성\n      const excelData = {\n        employeeName: selectedEmp.name || '',\n        employeeId: selectedEmp.employeeID || '',\n        department: selectedEmp.department || '',\n        startDate,\n        endDate,\n        records: excelRecords\n      }\n\n      const blob = await generateAttendanceExcel(excelData)\n      \n      // 파일 다운로드\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = `출근현황표_${selectedEmp.name}_${startDate}_${endDate}.xlsx`\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      window.URL.revokeObjectURL(url)\n      \n      toast.success('출근현황표가 다운로드되었습니다.')\n      \n      // 다운로드 성공 후 모달 닫기\n      onClose()\n      \n    } catch (error) {\n      toast.error(error instanceof Error ? error.message : '다운로드 중 오류가 발생했습니다.')\n    } finally {\n      setIsDownloading(false)\n    }\n  }\n\n  // 모달이 닫힐 때 상태 초기화\n  const handleClose = () => {\n    setSelectedEmployee('')\n    setStartDate('')\n    setEndDate('')\n    setIsDownloading(false)\n    onClose()\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-[520px] max-h-[85vh] overflow-y-auto\">\n        {/* 헤더 */}\n        <DialogHeader className=\"pb-6 space-y-3\">\n          <DialogTitle className=\"flex items-center text-2xl font-bold text-gray-900\">\n            <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-hansl-400 to-hansl-600 flex items-center justify-center mr-4 shadow-sm\">\n              <Calendar className=\"w-6 h-6 text-white\" />\n            </div>\n            출근현황표 다운로드\n          </DialogTitle>\n          <p className=\"text-gray-600 leading-relaxed pl-16\">\n            직원과 조회 기간을 선택하여 출근현황을<br />\n            엑셀 파일로 간편하게 다운로드하세요\n          </p>\n        </DialogHeader>\n        \n        {/* 콘텐츠 */}\n        <div className=\"space-y-8 py-2\">\n          {/* 직원 선택 섹션 */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-blue-50 flex items-center justify-center\">\n                <User className=\"w-4 h-4 text-blue-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">직원 선택</h3>\n            </div>\n            <div className=\"pl-11\">\n              <Combobox\n                value={selectedEmployee}\n                onValueChange={setSelectedEmployee}\n                options={employees\n                  .filter(emp => emp.name && emp.name.trim() !== '')\n                  .sort((a, b) => (a.name || '').localeCompare(b.name || ''))\n                  .map((employee): ComboboxOption => ({\n                    value: employee.id,\n                    label: `${employee.name} (${employee.department || '부서없음'})`\n                  }))}\n                placeholder=\"직원명 검색...\"\n                searchPlaceholder=\"직원 이름 검색...\"\n                emptyText=\"검색 결과가 없습니다\"\n                className=\"h-10 text-sm border-gray-200 focus:border-hansl-400 focus:ring-1 focus:ring-hansl-100\"\n              />\n            </div>\n          </div>\n\n          {/* 기간 선택 섹션 */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-green-50 flex items-center justify-center\">\n                <Calendar className=\"w-4 h-4 text-green-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900\">조회 기간</h3>\n            </div>\n            <div className=\"pl-11 space-y-4\">\n              {/* 날짜 입력 */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-gray-700\">시작일</label>\n                  <Input\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => setStartDate(e.target.value)}\n                    className=\"h-9 text-sm border-gray-200 focus:border-hansl-400 focus:ring-1 focus:ring-hansl-100\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-gray-700\">종료일</label>\n                  <Input\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => setEndDate(e.target.value)}\n                    className=\"h-9 text-sm border-gray-200 focus:border-hansl-400 focus:ring-1 focus:ring-hansl-100\"\n                  />\n                </div>\n              </div>\n              \n              {/* 빠른 선택 */}\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-gray-700\">빠른 선택</p>\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={setCurrentMonth}\n                    className=\"h-8 px-4 text-sm border-gray-200 hover:bg-hansl-50 hover:border-hansl-300 hover:text-hansl-700 transition-colors\"\n                  >\n                    이번 달\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={setLastMonth}\n                    className=\"h-8 px-4 text-sm border-gray-200 hover:bg-hansl-50 hover:border-hansl-300 hover:text-hansl-700 transition-colors\"\n                  >\n                    지난 달\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 하단 액션 버튼 */}\n        <div className=\"flex gap-3 pt-6 mt-2 border-t border-gray-100\">\n          <Button\n            variant=\"outline\"\n            onClick={handleClose}\n            className=\"flex-1 h-10 text-sm font-medium border-gray-200 hover:bg-gray-50 transition-colors\"\n            disabled={isDownloading}\n          >\n            취소\n          </Button>\n          <Button\n            onClick={handleDownload}\n            disabled={isDownloading || !selectedEmployee || !startDate || !endDate}\n            className=\"flex-1 h-10 text-sm bg-gradient-to-r from-hansl-500 to-hansl-600 hover:from-hansl-600 hover:to-hansl-700 text-white font-medium shadow-sm transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            {isDownloading ? '다운로드 중...' : '엑셀 다운로드'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}","\nimport { useState, useEffect } from 'react'\nimport { Employee, EmployeeFilters as EmployeeFiltersType } from '@/types/purchase'\nimport { employeeService } from '@/services/employeeService'\nimport EmployeeFilters from '@/components/employee/EmployeeFilters'\nimport EmployeeTable from '@/components/employee/EmployeeTable'\nimport EmployeeModal from '@/components/employee/EmployeeModal'\nimport AttendanceDownload from '@/components/employee/AttendanceDownload'\nimport { toast } from 'sonner'\n// XLSX는 사용할 때만 동적으로 import (성능 최적화)\n\ntype ModalMode = 'create' | 'edit' | 'view'\n\nexport default function EmployeeMain() {\n  const [employees, setEmployees] = useState<Employee[]>([])\n  const [filteredEmployees, setFilteredEmployees] = useState<Employee[]>([])\n  const [loading, setLoading] = useState(true)\n  const [filters, setFilters] = useState<EmployeeFiltersType>({})\n  \n  // 모달 상태\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null)\n  const [modalMode, setModalMode] = useState<ModalMode>('create')\n  \n  // 출근현황표 모달 상태\n  const [isAttendanceModalOpen, setIsAttendanceModalOpen] = useState(false)\n\n  // 직원 목록 로드\n  const loadEmployees = async () => {\n    setLoading(true)\n    try {\n      const result = await employeeService.getEmployees(filters)\n      \n      if (result.success && result.data) {\n        setEmployees(result.data)\n        setFilteredEmployees(result.data)\n      } else {\n        toast.error(result.error || '직원 목록을 불러오는데 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('직원 목록을 불러오는 중 오류가 발생했습니다.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // 초기 로드\n  useEffect(() => {\n    loadEmployees()\n  }, [])\n\n  // 필터 변경 시 직원 목록 다시 로드\n  useEffect(() => {\n    loadEmployees()\n  }, [filters])\n\n  // 모달 핸들러\n  const handleCreateNew = () => {\n    setSelectedEmployee(null)\n    setModalMode('create')\n    setIsModalOpen(true)\n  }\n\n  const handleEdit = (employee: Employee) => {\n    setSelectedEmployee(employee)\n    setModalMode('edit')\n    setIsModalOpen(true)\n  }\n\n  const handleView = (employee: Employee) => {\n    setSelectedEmployee(employee)\n    setModalMode('view')\n    setIsModalOpen(true)\n  }\n\n  const handleModalClose = () => {\n    setIsModalOpen(false)\n    setSelectedEmployee(null)\n  }\n\n  const handleSave = () => {\n    loadEmployees()\n  }\n\n  // Excel 내보내기 (동적 import로 성능 최적화)\n  const handleExport = async () => {\n    try {\n      const result = await employeeService.getEmployeesForExport()\n      \n      if (result.success && result.data) {\n        // XLSX를 사용할 때만 동적으로 import\n        const XLSX = await import('xlsx')\n        \n        const ws = XLSX.utils.json_to_sheet(result.data)\n        const wb = XLSX.utils.book_new()\n        XLSX.utils.book_append_sheet(wb, ws, '직원 목록')\n        \n        // 파일명에 현재 날짜 추가\n        const today = new Date().toISOString().slice(0, 10)\n        const filename = `직원_목록_${today}.xlsx`\n        \n        XLSX.writeFile(wb, filename)\n        toast.success('Excel 파일이 다운로드되었습니다.')\n      } else {\n        toast.error(result.error || 'Excel 내보내기에 실패했습니다.')\n      }\n    } catch (error) {\n      toast.error('Excel 내보내기 중 오류가 발생했습니다.')\n    }\n  }\n\n  if (loading && employees.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">직원 목록을 불러오는 중...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n      {/* 필터 섹션 */}\n      <EmployeeFilters\n        filters={filters}\n        onFiltersChange={setFilters}\n        onExport={handleExport}\n        onCreateNew={handleCreateNew}\n        onAttendanceDownload={() => setIsAttendanceModalOpen(true)}\n      />\n\n      {/* 테이블 섹션 */}\n      <div className=\"bg-white rounded-lg border\">\n        <div className=\"p-4 border-b\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium\">직원 목록</h3>\n            <div className=\"text-sm text-gray-600\">\n              {loading ? '로딩 중...' : `총 ${filteredEmployees.length}명의 직원`}\n            </div>\n          </div>\n        </div>\n        \n        <EmployeeTable\n          employees={filteredEmployees}\n          onEdit={handleEdit}\n          onView={handleView}\n          onRefresh={loadEmployees}\n        />\n      </div>\n\n      {/* 직원 모달 */}\n      <EmployeeModal\n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n        employee={selectedEmployee}\n        onSave={handleSave}\n        mode={modalMode}\n      />\n\n      {/* 출근현황표 다운로드 모달 */}\n      <AttendanceDownload\n        employees={employees}\n        isOpen={isAttendanceModalOpen}\n        onClose={() => setIsAttendanceModalOpen(false)}\n      />\n      </div>\n    </>\n  )\n}"],"file":"assets/EmployeeMain-uu1U3zoR.js"}