{"version":3,"mappings":"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","names":["globalCache","usePurchaseData","purchases","setPurchases","useState","vendors","setVendors","employees","setEmployees","loading","setLoading","currentUserRoles","setCurrentUserRoles","currentUserName","setCurrentUserName","currentUserEmail","setCurrentUserEmail","currentUserId","setCurrentUserId","supabase","createClient","initializationRef","useRef","useEffect","now","cacheValid","employeeData","roles","r","error","logger","vendorResult","employeeResult","userResult","vendorData","loadPurchases","useCallback","forceRefresh","employeeList","empData","user","authError","toast","sixMonthsAgo","data","d","processedData","request","firstItem","requesterEmployee","emp","sum","item","p","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","HIDDEN_EMPLOYEES","filterCache","CACHE_SIZE_LIMIT","useFastPurchaseFilters","activeTab","setActiveTab","searchTerm","setSearchTerm","vendorFilter","setVendorFilter","selectedEmployee","setSelectedEmployee","purchaseNumberFilter","setPurchaseNumberFilter","itemNameFilter","setItemNameFilter","specificationFilter","setSpecificationFilter","approvalStatusFilter","setApprovalStatusFilter","remarkFilter","setRemarkFilter","thisYear","defaultStart","defaultEnd","dateFromFilter","setDateFromFilter","dateToFilter","setDateToFilter","debouncedSearchTerm","isAdmin","isPurchaseManager","isLeadBuyer","roleCase","useMemo","computeDefaultEmployee","tabKey","defaultEmployee","visiblePurchases","cacheKey","result","firstKey","dateFilteredPurchases","purchase","requestDate","matchesDateFrom","matchesDateTo","tabFilteredPurchases","allStatuses","uniqueMiddleStatuses","s","uniqueFinalStatuses","matches","middlePending","finalPending","middleRejected","finalRejected","isRequest","notPaid","isSeonJin","isIlban","finalApproved","notReceived","employeeFilteredPurchases","vendorFilteredPurchases","additionalFilteredPurchases","filtered","term","searchFilteredPurchases","filteredPurchases","b","dateA","tabCounts","dateFilteredForCount","getUniqueOrderCount","getFilteredDataForTab","pendingData","purchaseData","receiptData","doneData","pendingFiltered","purchaseFiltered","receiptFiltered","loadedPreferencesRef","ps","pe","saveTimeoutRef","FastPurchaseTable","lazy","__vitePreload","TableSkeleton","memo","jsx","_","i","jsxs","LazyPurchaseTable","onRefresh","onPaymentComplete","onReceiptComplete","Suspense","PurchaseItemsModal","NAV_TABS","PurchaseListMain","onEmailToggle","showEmailButton","navigate","useNavigate","location","useLocation","editingId","setEditingId","editingData","setEditingData","selectedPurchase","setSelectedPurchase","isModalOpen","setIsModalOpen","handleReceiptComplete","purchaseId","handlePaymentComplete","Button","Plus","Card","CardHeader","CardTitle","Filter","CardContent","Input","e","Combobox","a","employee","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","vendor","Search","tab","Badge","Package"],"ignoreList":[],"sources":["../../src/hooks/usePurchaseData.ts","../../src/hooks/useDebounce.ts","../../src/hooks/useFastPurchaseFilters.ts","../../src/components/purchase/LazyPurchaseTable.tsx","../../src/components/purchase/PurchaseListMain.tsx"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport { createClient } from '@/lib/supabase/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\nexport interface Purchase {\n  id: number;\n  purchase_order_number?: string;\n  request_date: string;\n  delivery_request_date?: string;\n  progress_type: string;\n  is_payment_completed: boolean;\n  payment_category: string;\n  payment_completed_at?: string;\n  currency: string;\n  request_type: string;\n  vendor?: {\n    vendor_name: string;\n    vendor_payment_schedule?: string;\n  };\n  vendor_name: string;\n  vendor_payment_schedule?: string;\n  vendor_id?: number;\n  contact_id?: number;\n  vendor_contacts?: {\n    contact_name: string;\n  } | Array<{\n    contact_name: string;\n  }>;\n  contact_name?: string;\n  requester_id: string;\n  requester_name: string;\n  requester_full_name: string;\n  project_vendor: string;\n  sales_order_number: string;\n  project_item: string;\n  middle_manager_status?: string;\n  final_manager_status?: string;\n  total_amount: number;\n  is_received: boolean;\n  received_at?: string;\n\n  is_po_download?: boolean;\n  items?: any[];\n  purchase_request_items?: any[];\n  item_name?: string;\n  specification?: string;\n  quantity?: number;\n  unit_price_value?: number;\n  amount_value?: number;\n  remark?: string;\n  line_number?: number;\n  link?: string;\n  purchase_status?: string;\n}\n\nexport interface Vendor {\n  id: number;\n  vendor_name: string;\n  vendor_contacts?: any[];\n}\n\nexport interface Employee {\n  id: string;\n  name: string;\n  email: string;\n  full_name?: string;\n}\n\n// 캐시 관리\nconst globalCache = {\n  purchases: null as Purchase[] | null,\n  vendors: null as Vendor[] | null,\n  employees: null as Employee[] | null,\n  lastFetch: 0,\n  userInfo: null as any,\n  CACHE_DURATION: 2 * 60 * 1000 // 2분 캐싱으로 성능 향상\n};\n\n// 캐시 강제 초기화 함수 (디버깅용)\nexport const clearPurchaseCache = () => {\n  console.log('🔄 캐시 강제 초기화');\n  globalCache.purchases = null;\n  globalCache.vendors = null;\n  globalCache.employees = null;\n  globalCache.userInfo = null;\n  globalCache.lastFetch = 0;\n};\n\nexport const usePurchaseData = () => {\n  const [purchases, setPurchases] = useState<Purchase[]>([]);\n  const [vendors, setVendors] = useState<Vendor[]>([]);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentUserRoles, setCurrentUserRoles] = useState<string[]>([]);\n  const [currentUserName, setCurrentUserName] = useState<string>('');\n  const [currentUserEmail, setCurrentUserEmail] = useState<string>('');\n  const [currentUserId, setCurrentUserId] = useState<string>('');\n  \n  const supabase = createClient();\n  const initializationRef = useRef(false);\n\n  // 초기 데이터 로드 (업체 목록, 사용자 권한) - 캐싱 적용\n  useEffect(() => {\n    const loadInitialData = async () => {\n      if (initializationRef.current) return;\n      initializationRef.current = true;\n      \n      console.log('🚀 [DEBUG] loadInitialData 시작');\n      const now = Date.now();\n      const cacheValid = globalCache.lastFetch && (now - globalCache.lastFetch) < globalCache.CACHE_DURATION;\n      console.log('📊 [DEBUG] 캐시 상태:', {\n        cacheValid,\n        lastFetch: globalCache.lastFetch,\n        timeSinceLastFetch: now - globalCache.lastFetch,\n        cacheHasData: !!(globalCache.vendors && globalCache.employees && globalCache.userInfo)\n      });\n      \n      try {\n        // 캐시된 데이터가 유효한 경우 사용\n        if (cacheValid && globalCache.vendors && globalCache.employees && globalCache.userInfo) {\n          try {\n            console.log('✅ [DEBUG] 캐시 데이터 사용');\n            setVendors(globalCache.vendors);\n            setEmployees(globalCache.employees);\n            \n            const employeeData = globalCache.userInfo;\n            if (employeeData) {\n              let roles: string[] = [];\n              if (employeeData.purchase_role) {\n                if (Array.isArray(employeeData.purchase_role)) {\n                  roles = employeeData.purchase_role.map((r: any) => String(r).trim());\n                } else {\n                  const roleString = String(employeeData.purchase_role);\n                  roles = roleString\n                    .split(',')\n                    .map((r: string) => r.trim())\n                    .filter((r: string) => r.length > 0);\n                }\n              }\n              \n              setCurrentUserRoles(roles);\n              setCurrentUserName(employeeData.name || employeeData.full_name || '');\n              setCurrentUserEmail(employeeData.email || '');\n              setCurrentUserId(employeeData.id || '');\n            }\n            return;\n          } catch (error) {\n            logger.error('캐시 데이터 사용 중 오류', error);\n            console.error('❌ [DEBUG] 캐시 오류:', error);\n            // 캐시 초기화\n            globalCache.purchases = null;\n            globalCache.vendors = null;\n            globalCache.employees = null;\n            globalCache.userInfo = null;\n            globalCache.lastFetch = 0;\n          }\n        }\n        \n        // 캐시가 없거나 만료된 경우 새로 로드\n        console.log('🔄 [DEBUG] 데이터 새로 로드');\n        const [vendorResult, employeeResult, userResult] = await Promise.all([\n          supabase.from('vendors').select('*'),\n          supabase.from('employees').select('*'),\n          supabase.auth.getUser()\n        ]);\n\n        if (vendorResult.error) {\n          console.error('❌ [DEBUG] 업체 로드 실패:', vendorResult.error);\n          throw vendorResult.error;\n        }\n        const vendorData = vendorResult.data || [];\n        setVendors(vendorData);\n        globalCache.vendors = vendorData;\n        console.log('✅ [DEBUG] 업체 로드 완료:', vendorData.length, '개');\n        \n        if (employeeResult.error) {\n          console.error('❌ [DEBUG] 직원 로드 실패:', employeeResult.error);\n          throw employeeResult.error;\n        }\n        const employeeData = employeeResult.data || [];\n        setEmployees(employeeData);\n        globalCache.employees = employeeData;\n        console.log('✅ [DEBUG] 직원 로드 완료:', employeeData.length, '개');\n\n        // 사용자 권한 및 이름 로드\n        if (userResult.data.user && !userResult.error) {\n          console.log('👤 [DEBUG] 사용자 정보:', userResult.data.user.email);\n          // email로 직원 정보 찾기 (올바른 방법)\n          let employeeData = null;\n          if (userResult.data.user.email) {\n            const emailResult = await supabase\n              .from('employees')\n              .select('*')\n              .eq('email', userResult.data.user.email)\n              .maybeSingle();\n            \n            employeeData = emailResult.data;\n          }\n          \n          if (employeeData) {\n            globalCache.userInfo = employeeData;\n            \n            let roles: string[] = [];\n            if (employeeData.purchase_role) {\n              if (Array.isArray(employeeData.purchase_role)) {\n                roles = employeeData.purchase_role.map((r: any) => String(r).trim());\n              } else {\n                const roleString = String(employeeData.purchase_role);\n                roles = roleString\n                  .split(',')\n                  .map((r: string) => r.trim())\n                  .filter((r: string) => r.length > 0);\n              }\n            }\n            \n            console.log('👤 [DEBUG] 사용자 권한:', {\n              name: employeeData.name,\n              email: employeeData.email,\n              roles\n            });\n            \n            setCurrentUserRoles(roles);\n            setCurrentUserName(employeeData.name || employeeData.full_name || '');\n            setCurrentUserEmail(employeeData.email || '');\n            setCurrentUserId(employeeData.id || '');\n          }\n          \n          globalCache.lastFetch = now;\n        }\n      } catch (error) {\n        logger.error('초기 데이터 로드 실패', error);\n        console.error('❌ [DEBUG] 초기 데이터 로드 실패:', error);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // 발주 목록 로드 - 캐싱 및 최적화 적용\n  const loadPurchases = useCallback(async (forceRefresh?: boolean) => {\n    console.log('🔄 [DEBUG] loadPurchases 시작 - forceRefresh:', forceRefresh);\n    setLoading(true);\n    \n    try {\n      // 캐시 확인\n      const now = Date.now();\n      const cacheValid = globalCache.lastFetch && (now - globalCache.lastFetch) < globalCache.CACHE_DURATION;\n      \n      console.log('📊 [DEBUG] 캐시 확인:', {\n        forceRefresh,\n        cacheValid,\n        hasCachedData: !!globalCache.purchases,\n        cacheAge: now - globalCache.lastFetch\n      });\n      \n      if (!forceRefresh && cacheValid && globalCache.purchases) {\n        try {\n          console.log('✅ [DEBUG] 캐시된 발주 데이터 사용:', globalCache.purchases.length, '건');\n          setPurchases(globalCache.purchases);\n          setLoading(false);\n          return;\n        } catch (error) {\n          logger.error('발주 데이터 캐시 사용 중 오류', error);\n          console.error('❌ [DEBUG] 캐시 오류:', error);\n          // 캐시 초기화\n          globalCache.purchases = null;\n          globalCache.lastFetch = 0;\n        }\n      }\n      \n      // employees 데이터 준비\n      let employeeList = employees;\n      if (employeeList.length === 0) {\n        employeeList = globalCache.employees || [];\n        if (employeeList.length === 0) {\n          const { data: empData } = await supabase\n            .from('employees')\n            .select('*');\n          employeeList = empData || [];\n        }\n      }\n      \n      const { data: { user }, error: authError } = await supabase.auth.getUser();\n      \n      if (authError || !user) {\n        logger.error('사용자 인증 실패', authError);\n        toast.error('로그인이 필요합니다.');\n        setLoading(false);\n        return;\n      }\n\n      // 최근 6개월 발주 데이터 조회 (성능 최적화)\n      const sixMonthsAgo = new Date();\n      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n      sixMonthsAgo.setHours(0, 0, 0, 0);\n      \n      console.log('📅 [DEBUG] 최근 6개월 데이터 조회:', {\n        sixMonthsAgo: sixMonthsAgo.toISOString(),\n        today: new Date().toISOString()\n      });\n      \n      const { data, error } = await supabase\n        .from('purchase_requests')\n        .select('*,vendors(vendor_name,vendor_payment_schedule),vendor_contacts(contact_name),purchase_request_items(*).order(line_number)')\n        .gte('request_date', sixMonthsAgo.toISOString())\n        .order('request_date', { ascending: false })\n        .limit(500); // 성능 최적화: 최대 500건\n\n      if (error) {\n        console.error('❌ [DEBUG] 발주 데이터 조회 실패:', error);\n        throw error;\n      }\n\n      console.log('📊 [DEBUG] 발주 데이터 조회 결과:', {\n        dataCount: Array.isArray(data) ? data.length : 0,\n        firstFewIds: Array.isArray(data) ? data.slice(0, 5).map(d => ({\n          id: d.id,\n          po_number: d.purchase_order_number,\n          date: d.request_date\n        })) : []\n      });\n\n      // 데이터 변환 (hanslwebapp과 동일)\n      const processedData = (data || []).map((request: any) => {\n        // 첫 번째 품목 정보 (기존 방식과 호환성 유지)\n        const firstItem = request.purchase_request_items?.[0] || {};\n        \n        // requester_id로 employee 찾기\n        const requesterEmployee = employeeList.find(emp => emp.id === request.requester_id);\n        \n        return {\n          id: Number(request.id),\n          purchase_order_number: request.purchase_order_number as string,\n          request_date: request.request_date as string,\n          delivery_request_date: request.delivery_request_date as string,\n          progress_type: request.progress_type as string,\n          payment_completed_at: request.payment_completed_at as string,\n          payment_category: request.payment_category as string,\n          currency: request.currency as string,\n          request_type: request.request_type as string,\n          vendor: request.vendors || null,\n          vendor_name: request.vendors?.vendor_name || '',\n          vendor_payment_schedule: request.vendors?.vendor_payment_schedule || '',\n          vendor_contacts: request.vendor_contacts || [],\n          requester_id: request.requester_id as string,\n          requester_name: request.requester_name as string,\n          requester_full_name: requesterEmployee?.full_name || requesterEmployee?.name || request.requester_name || '',\n          item_name: firstItem.item_name as string || '',\n          specification: firstItem.specification as string || '',\n          quantity: Number(firstItem.quantity) || 0,\n          unit_price_value: Number(firstItem.unit_price_value) || 0,\n          amount_value: Number(firstItem.amount_value) || 0,\n          remark: firstItem.remark as string || '',\n          project_vendor: request.project_vendor as string,\n          sales_order_number: request.sales_order_number as string,\n          project_item: request.project_item as string,\n          line_number: Number(firstItem.line_number) || 1,\n          contact_name: request.vendor_contacts?.contact_name || '',\n          middle_manager_status: request.middle_manager_status as string,\n          final_manager_status: request.final_manager_status as string,\n          is_received: !!request.is_received,\n          received_at: request.received_at as string,\n          is_payment_completed: !!request.is_payment_completed,\n          is_po_download: !!request.is_po_download,\n          link: firstItem.link as string | undefined,\n          // 전체 품목 리스트 추가 (hanslwebapp과 동일하게 items로 통일)\n          items: request.purchase_request_items || [],\n          // 총 금액 계산\n          total_amount: request.purchase_request_items?.reduce((sum: number, item: any) => \n            sum + (Number(item.amount_value) || 0), 0) || 0,\n          purchase_status: request.purchase_status || 'pending'\n        };\n      });\n\n      console.log('✅ [DEBUG] 발주 데이터 처리 완료:', {\n        processedCount: processedData.length,\n        sampleData: processedData.slice(0, 3).map(p => ({\n          id: p.id,\n          po: p.purchase_order_number,\n          requester: p.requester_name,\n          date: p.request_date\n        }))\n      });\n\n      // 데이터 로드 완료 및 캐싱\n      setPurchases(processedData);\n      globalCache.purchases = processedData;\n      globalCache.lastFetch = now;\n      console.log('✅ [DEBUG] 캐시 업데이트 완료');\n    } catch (error) {\n      logger.error('발주 목록 로드 실패', error);\n      console.error('❌ [DEBUG] 발주 목록 로드 실패:', error);\n      toast.error('발주 목록을 불러올 수 없습니다.');\n    } finally {\n      setLoading(false);\n    }\n  }, [employees]);\n\n  useEffect(() => {\n    console.log('🚀 [DEBUG] usePurchaseData 첫 로드');\n    loadPurchases();\n  }, [loadPurchases]);\n\n  return {\n    purchases,\n    vendors,\n    employees,\n    loading,\n    currentUserRoles,\n    currentUserName,\n    currentUserEmail,\n    currentUserId,\n    refreshPurchases: loadPurchases\n  };\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook to debounce a value\n * Useful for search inputs and other expensive operations\n */\nexport function useDebounce<T>(value: T, delay: number = 500): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    // Set up the timeout\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Clean up the timeout if value changes\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}","import { useState, useMemo, useEffect, useCallback, useRef } from 'react';\nimport { useDebounce } from '@/hooks/useDebounce';\nimport { Purchase } from './usePurchaseData';\nimport { createClient } from '@/lib/supabase/client';\n\n// 상수 정의 - 특정 직원의 발주요청 숨김 (본인이 아닌 경우에만)\nconst HIDDEN_EMPLOYEES = ['정희웅'];  // 정현웅 제거\n\n// 메모이제이션 캐시\nconst filterCache = new Map();\nconst CACHE_SIZE_LIMIT = 100;\n\nexport const useFastPurchaseFilters = (purchases: Purchase[], currentUserRoles: string[], currentUserName: string, currentUserId?: string, currentUserEmail?: string) => {\n  const supabase = createClient();\n  const [activeTab, setActiveTab] = useState('pending');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [vendorFilter, setVendorFilter] = useState('');\n  // 초기값 설정 - hanslwebapp과 동일하게 빈 문자열로 시작\n  const [selectedEmployee, setSelectedEmployee] = useState<string>('');\n  const [purchaseNumberFilter, setPurchaseNumberFilter] = useState('');\n  const [itemNameFilter, setItemNameFilter] = useState('');\n  const [specificationFilter, setSpecificationFilter] = useState('');\n  const [approvalStatusFilter, setApprovalStatusFilter] = useState('');\n  const [remarkFilter, setRemarkFilter] = useState('');\n  \n  // 기간 필터 초기값 설정 (올해 1월 1일 ~ 오늘)\n  const thisYear = new Date().getFullYear();\n  const defaultStart = new Date(thisYear, 0, 1).toISOString().split('T')[0];\n  const defaultEnd = new Date().toISOString().split('T')[0];\n  const [dateFromFilter, setDateFromFilter] = useState(defaultStart);\n  const [dateToFilter, setDateToFilter] = useState(defaultEnd);\n  \n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n  \n  // 권한별 로직 계산\n  const isAdmin = currentUserRoles?.includes('app_admin');\n  const isFinalApprover = currentUserRoles?.includes('final_approver');\n  const isMiddleManager = currentUserRoles?.includes('middle_manager');\n  const isPurchaseManager = currentUserRoles?.includes('purchase_manager');\n  const hasApprovalRole = isAdmin || isFinalApprover || isMiddleManager;\n  \n  // lead buyer 권한 체크 추가\n  const isLeadBuyer = currentUserRoles?.includes('raw_material_manager') || \n                      currentUserRoles?.includes('consumable_manager') || \n                      currentUserRoles?.includes('purchase_manager');\n\n  // hanslwebapp과 동일한 로직 - roleCase 계산 (lead buyer 추가)\n  const roleCase = useMemo(() => {\n    if (!currentUserRoles || currentUserRoles.length === 0) return 1; // null\n    if (isPurchaseManager) return 2; // purchase_manager\n    if (currentUserRoles.some(r => ['middle_manager', 'final_approver', 'app_admin', 'ceo'].includes(r))) return 3;\n    return 1;\n  }, [currentUserRoles, isPurchaseManager]);\n  \n  // 탭별 기본 직원 필터 계산 (구매현황은 lead buyer와 app_admin만 전체 보기)\n  const computeDefaultEmployee = useCallback(\n    (tabKey: string): string => {\n      if (!currentUserName) return 'all';\n      \n      // 구매현황 탭은 lead buyer와 app_admin만 전체 보기\n      if (tabKey === 'purchase') {\n        if (isLeadBuyer || isAdmin) {\n          return 'all';\n        }\n        return currentUserName;\n      }\n      \n      switch (roleCase) {\n        case 1: // role null\n          if (tabKey === 'done') return 'all';\n          return currentUserName;\n        case 2: // purchase_manager\n          if (tabKey === 'done') return 'all';\n          return currentUserName; // pending & receipt\n        case 3: // 관리자 권한\n          return 'all';\n        default:\n          return currentUserName;\n      }\n    },\n    [currentUserName, roleCase, isLeadBuyer, isAdmin]\n  );\n  \n  // 탭 변경 또는 사용자/역할 로딩 시 기본값 설정 (hanslwebapp과 동일)\n  useEffect(() => {\n    if (!currentUserName) return;\n    const defaultEmployee = computeDefaultEmployee(activeTab);\n    setSelectedEmployee(defaultEmployee);\n  }, [activeTab, currentUserName, roleCase, computeDefaultEmployee]);\n  \n  // 1단계: 권한별 필터링 (캐싱 적용)\n  const visiblePurchases = useMemo(() => {\n    console.log('🔍 [Filter] 1단계 권한별 필터링 시작:', {\n      purchasesCount: purchases.length,\n      currentUserRoles,\n      currentUserName\n    });\n    \n    try {\n      const cacheKey = `visible_${purchases.length}_${currentUserRoles.join(',')}`;\n      if (filterCache.has(cacheKey)) {\n        console.log('📦 [Filter] 캐시에서 가져옴');\n        return filterCache.get(cacheKey);\n      }\n      \n      let result;\n      if (currentUserRoles.includes('purchase_manager') || currentUserRoles.includes('app_admin')) {\n        result = purchases;\n      } else {\n        result = purchases.filter(p => !HIDDEN_EMPLOYEES.includes(p.requester_name));\n      }\n      \n      console.log('✅ [Filter] 권한별 필터링 완료:', {\n        originalCount: purchases.length,\n        filteredCount: result.length\n      });\n      \n      // 캐시 크기 제한\n      if (filterCache.size >= CACHE_SIZE_LIMIT) {\n        const firstKey = filterCache.keys().next().value;\n        filterCache.delete(firstKey);\n      }\n      filterCache.set(cacheKey, result);\n      return result;\n    } catch (error) {\n      console.error('필터링 중 오류:', error);\n      // 캐시 초기화 후 직접 계산\n      filterCache.clear();\n      if (currentUserRoles.includes('purchase_manager') || currentUserRoles.includes('app_admin')) {\n        return purchases;\n      } else {\n        return purchases.filter(p => !HIDDEN_EMPLOYEES.includes(p.requester_name));\n      }\n    }\n  }, [purchases, currentUserRoles]);\n\n  // 2단계: 날짜 필터링 (캐싱 적용)\n  const dateFilteredPurchases = useMemo(() => {\n    const cacheKey = `date_${visiblePurchases.length}_${dateFromFilter}_${dateToFilter}`;\n    if (filterCache.has(cacheKey)) {\n      return filterCache.get(cacheKey);\n    }\n    \n    const result = visiblePurchases.filter((purchase: Purchase) => {\n      const requestDate = purchase.request_date ? purchase.request_date.split('T')[0] : '';\n      const matchesDateFrom = !dateFromFilter || requestDate >= dateFromFilter;\n      const matchesDateTo = !dateToFilter || requestDate <= dateToFilter;\n      return matchesDateFrom && matchesDateTo;\n    });\n    \n    if (filterCache.size >= CACHE_SIZE_LIMIT) {\n      const firstKey = filterCache.keys().next().value;\n      filterCache.delete(firstKey);\n    }\n    filterCache.set(cacheKey, result);\n    return result;\n  }, [visiblePurchases, dateFromFilter, dateToFilter]);\n\n  // 3단계: 탭별 필터링 (최적화 적용)\n  const tabFilteredPurchases = useMemo(() => {\n    const cacheKey = `tab_${dateFilteredPurchases.length}_${activeTab}`;\n    if (filterCache.has(cacheKey)) {\n      return filterCache.get(cacheKey);\n    }\n    \n      // 디버깅: pending 탭일 때 전체 데이터 상태 로그\n      if (activeTab === 'pending') {\n        console.log('🔍 [PENDING TAB DEBUG] 전체 데이터 상태:', {\n          totalCount: dateFilteredPurchases.length,\n          sampleData: dateFilteredPurchases.slice(0, 5).map(p => ({\n            id: p.id,\n            po_number: p.purchase_order_number,\n            middle_status: p.middle_manager_status,\n            final_status: p.final_manager_status,\n            requester: p.requester_name,\n            middle_type: typeof p.middle_manager_status,\n            final_type: typeof p.final_manager_status\n          }))\n        });\n        \n        // 모든 상태값 확인\n        const allStatuses = dateFilteredPurchases.map(p => ({\n          middle: p.middle_manager_status,\n          final: p.final_manager_status\n        }));\n        const uniqueMiddleStatuses = [...new Set(allStatuses.map(s => s.middle))];\n        const uniqueFinalStatuses = [...new Set(allStatuses.map(s => s.final))];\n        \n        console.log('🔍 [PENDING TAB DEBUG] 고유 상태값들:', {\n          uniqueMiddleStatuses,\n          uniqueFinalStatuses\n        });\n      }\n    \n    const result = dateFilteredPurchases.filter((purchase: Purchase) => {\n      let matches = false;\n      \n      switch (activeTab) {\n        case 'pending':\n          // 중간승인자나 최종승인자 중 하나라도 pending이면 승인대기\n          const middlePending = ['pending', '대기', '', null, undefined].includes(purchase.middle_manager_status as any);\n          const finalPending = ['pending', '대기', '', null, undefined].includes(purchase.final_manager_status as any);\n          \n          // 반려된 경우는 제외\n          const middleRejected = purchase.middle_manager_status === 'rejected';\n          const finalRejected = purchase.final_manager_status === 'rejected';\n          \n          if (middleRejected || finalRejected) return false;\n          \n          // 중간승인 대기 또는 최종승인 대기\n          matches = middlePending || finalPending;\n          \n          // 디버깅 로그 추가\n          if (matches) {\n            console.log('🔍 [PENDING DEBUG] 승인대기 항목 발견:', {\n              id: purchase.id,\n              po_number: purchase.purchase_order_number,\n              middle_status: purchase.middle_manager_status,\n              final_status: purchase.final_manager_status,\n              middlePending,\n              finalPending,\n              matches\n            });\n          }\n          \n          return matches;\n          \n        case 'purchase': {\n          // DB 확인 결과: '구매 요청' (띄어쓰기 있음) 또는 '발주'\n          const isRequest = purchase.payment_category === '구매 요청';\n          const notPaid = !purchase.is_payment_completed;\n          const isSeonJin = (purchase.progress_type || '').includes('선진행');\n          const isIlban = (purchase.progress_type || '').includes('일반');\n          const finalApproved = purchase.final_manager_status === 'approved';\n          \n          if (!isRequest || !notPaid) {\n            matches = false;\n          } else {\n            matches = (isSeonJin) || (isIlban && finalApproved);\n          }\n          \n          return matches;\n        }\n        \n        case 'receipt': {\n          // 입고현황: 미입고 & (선진행 or 최종승인)\n          const notReceived = !purchase.is_received;\n          const isSeonJin = (purchase.progress_type || '').includes('선진행');\n          const finalApproved = purchase.final_manager_status === 'approved';\n          matches = notReceived && (isSeonJin || finalApproved);\n          return matches;\n        }\n        \n        case 'done':\n          matches = true;\n          return matches;\n          \n        default:\n          return true;\n      }\n    });\n    \n    if (filterCache.size >= CACHE_SIZE_LIMIT) {\n      const firstKey = filterCache.keys().next().value;\n      filterCache.delete(firstKey);\n    }\n    filterCache.set(cacheKey, result);\n    return result;\n  }, [dateFilteredPurchases, activeTab]);\n\n  // 4단계: 직원 필터링 (최적화 적용)\n  const employeeFilteredPurchases = useMemo(() => {\n    const cacheKey = `employee_${tabFilteredPurchases.length}_${selectedEmployee}`;\n    if (filterCache.has(cacheKey)) {\n      return filterCache.get(cacheKey);\n    }\n    \n    let result;\n    if (selectedEmployee && selectedEmployee !== 'all' && selectedEmployee !== '전체') {\n      result = tabFilteredPurchases.filter((purchase: Purchase) => purchase.requester_name === selectedEmployee);\n    } else {\n      result = tabFilteredPurchases;\n    }\n    \n    if (filterCache.size >= CACHE_SIZE_LIMIT) {\n      const firstKey = filterCache.keys().next().value;\n      filterCache.delete(firstKey);\n    }\n    filterCache.set(cacheKey, result);\n    return result;\n  }, [tabFilteredPurchases, selectedEmployee]);\n\n  // 5단계: 업체 필터링 (업체 선택시만 실행)\n  const vendorFilteredPurchases = useMemo(() => {\n    if (!vendorFilter) {\n      return employeeFilteredPurchases;\n    }\n    return employeeFilteredPurchases.filter((purchase: Purchase) => purchase.vendor_name === vendorFilter);\n  }, [employeeFilteredPurchases, vendorFilter]);\n\n  // 6단계: 추가 필터 적용\n  const additionalFilteredPurchases = useMemo(() => {\n    let filtered = vendorFilteredPurchases;\n    \n    // 발주요청번호 필터\n    if (purchaseNumberFilter) {\n      const term = purchaseNumberFilter.trim().toLowerCase();\n      filtered = filtered.filter((p: Purchase) => p.purchase_order_number?.toLowerCase().includes(term));\n    }\n    \n    // 품명 필터\n    if (itemNameFilter) {\n      const term = itemNameFilter.trim().toLowerCase();\n      filtered = filtered.filter((p: Purchase) => {\n        if (p.items && p.items.length > 0) {\n          return p.items.some((item: any) => item.item_name?.toLowerCase().includes(term));\n        }\n        return false;\n      });\n    }\n    \n    // 규격 필터\n    if (specificationFilter) {\n      const term = specificationFilter.trim().toLowerCase();\n      filtered = filtered.filter((p: Purchase) => {\n        if (p.items && p.items.length > 0) {\n          return p.items.some((item: any) => item.specification?.toLowerCase().includes(term));\n        }\n        return false;\n      });\n    }\n    \n    // 승인상태 필터\n    if (approvalStatusFilter && approvalStatusFilter !== 'all') {\n      filtered = filtered.filter((p: Purchase) => {\n        switch (approvalStatusFilter) {\n          case 'pending':\n            return !p.final_manager_status || p.final_manager_status === 'pending' || p.final_manager_status === '대기';\n          case 'approved':\n            return p.final_manager_status === 'approved';\n          case 'rejected':\n            return p.final_manager_status === 'rejected' || p.middle_manager_status === 'rejected';\n          default:\n            return true;\n        }\n      });\n    }\n    \n    // 비고 필터\n    if (remarkFilter) {\n      const term = remarkFilter.trim().toLowerCase();\n      filtered = filtered.filter((p: Purchase) => {\n        if (p.items && p.items.length > 0) {\n          return p.items.some((item: any) => item.remark?.toLowerCase().includes(term));\n        }\n        return false;\n      });\n    }\n    \n    return filtered;\n  }, [vendorFilteredPurchases, purchaseNumberFilter, itemNameFilter, specificationFilter, approvalStatusFilter, remarkFilter]);\n\n  // 7단계: 검색 필터링 (검색어 변경시만 실행)\n  const searchFilteredPurchases = useMemo(() => {\n    if (!debouncedSearchTerm) {\n      return additionalFilteredPurchases;\n    }\n    \n    const term = debouncedSearchTerm.trim().toLowerCase();\n    \n    return additionalFilteredPurchases.filter((purchase: Purchase) => {\n      // 빠른 검색 (기본 필드만)\n      if (purchase.purchase_order_number?.toLowerCase().includes(term) ||\n          purchase.vendor_name?.toLowerCase().includes(term) ||\n          purchase.requester_name?.toLowerCase().includes(term) ||\n          purchase.project_vendor?.toLowerCase().includes(term)) {\n        return true;\n      }\n      \n      // 품목 검색 (필요할 때만)\n      if (purchase.items && purchase.items.length > 0) {\n        return purchase.items.some((item: any) => \n          (item.item_name && item.item_name.toLowerCase().includes(term)) ||\n          (item.specification && item.specification.toLowerCase().includes(term))\n        );\n      }\n      \n      return false;\n    });\n  }, [additionalFilteredPurchases, debouncedSearchTerm]);\n\n  // 8단계: 최종 정렬 - 최신순 (내림차순)\n  const filteredPurchases = useMemo(() => {\n    const result = [...searchFilteredPurchases].sort((a, b) => {\n      // request_date를 기준으로 내림차순 정렬 (최신이 위로)\n      const dateA = a.request_date ? new Date(a.request_date).getTime() : 0;\n      const dateB = b.request_date ? new Date(b.request_date).getTime() : 0;\n      return dateB - dateA;\n    });\n    \n    console.log('✅ [Filter] 최종 필터링 완료:', {\n      activeTab,\n      searchFilteredCount: searchFilteredPurchases.length,\n      finalCount: result.length,\n      firstFewResults: result.slice(0, 3).map(p => ({\n        id: p.id,\n        po: p.purchase_order_number,\n        requester: p.requester_name,\n        date: p.request_date\n      }))\n    });\n    \n    return result;\n  }, [searchFilteredPurchases, activeTab]);\n\n  // 탭 카운트 (hanslwebapp과 동일한 조건)\n  const tabCounts = useMemo(() => {\n    // 특정 직원 발주요청 숨김 처리\n    const countPurchases = visiblePurchases;\n    \n    // 기간 필터 적용\n    const dateFilteredForCount = countPurchases.filter((purchase: Purchase) => {\n      const requestDate = purchase.request_date ? purchase.request_date.split('T')[0] : '';\n      const matchesDateFrom = !dateFromFilter || requestDate >= dateFromFilter;\n      const matchesDateTo = !dateToFilter || requestDate <= dateToFilter;\n      return matchesDateFrom && matchesDateTo;\n    });\n    \n    // 각 탭의 고유 발주요청번호 카운트 (중복 제거)\n    const getUniqueOrderCount = (filtered: Purchase[]) => {\n      return new Set(filtered.map(p => p.purchase_order_number)).size;\n    };\n    \n    // 각 탭별로 기본 직원 필터 계산 (카운트용)\n    const getFilteredDataForTab = (tabKey: string) => {\n      // 구매현황 탭은 특별 처리\n      if (tabKey === 'purchase') {\n        if (isLeadBuyer || isAdmin) {\n          return dateFilteredForCount;\n        } else {\n          return dateFilteredForCount.filter((p: Purchase) => p.requester_name === currentUserName);\n        }\n      }\n      \n      const defaultEmployee = computeDefaultEmployee(tabKey);\n      \n      if (defaultEmployee === 'all' || defaultEmployee === '전체') {\n        return dateFilteredForCount;\n      } else {\n        return dateFilteredForCount.filter((p: Purchase) => p.requester_name === defaultEmployee);\n      }\n    };\n    \n    // 각 탭별 데이터 필터링\n    const pendingData = getFilteredDataForTab('pending');\n    const purchaseData = getFilteredDataForTab('purchase');\n    const receiptData = getFilteredDataForTab('receipt');\n    const doneData = getFilteredDataForTab('done');\n    \n    const pendingFiltered = pendingData.filter((p: Purchase) => {\n      // 중간승인자나 최종승인자 중 하나라도 pending이면 승인대기\n      const middlePending = ['pending', '대기', '', null, undefined].includes(p.middle_manager_status as any);\n      const finalPending = ['pending', '대기', '', null, undefined].includes(p.final_manager_status as any);\n      \n      // 반려된 경우는 제외\n      const middleRejected = p.middle_manager_status === 'rejected';\n      const finalRejected = p.final_manager_status === 'rejected';\n      \n      if (middleRejected || finalRejected) return false;\n      \n      // 중간승인 대기 또는 최종승인 대기\n      return middlePending || finalPending;\n    });\n    \n    const purchaseFiltered = purchaseData.filter((p: Purchase) => {\n      const isRequest = p.payment_category === '구매 요청';\n      const notPaid = !p.is_payment_completed;\n      if (!isRequest || !notPaid) return false;\n      const isSeonJin = (p.progress_type || '').includes('선진행');\n      const isIlban = (p.progress_type || '').includes('일반');\n      const finalApproved = p.final_manager_status === 'approved';\n      return (isSeonJin) || (isIlban && finalApproved);\n    });\n    \n    const receiptFiltered = receiptData.filter((p: Purchase) => {\n      const notReceived = !p.is_received;\n      const isSeonJin = (p.progress_type || '').includes('선진행');\n      const finalApproved = p.final_manager_status === 'approved';\n      return notReceived && (isSeonJin || finalApproved);\n    });\n    \n    const counts = {\n      pending: getUniqueOrderCount(pendingFiltered),\n      purchase: getUniqueOrderCount(purchaseFiltered),\n      receipt: getUniqueOrderCount(receiptFiltered),\n      done: getUniqueOrderCount(doneData)  // 전체 항목\n    };\n    \n    return counts;\n  }, [visiblePurchases, dateFromFilter, dateToFilter, roleCase, currentUserName, computeDefaultEmployee, isLeadBuyer, isAdmin]);\n\n  // 사용자별 저장된 기간 불러오기 (로딩 최적화)\n  const loadedPreferencesRef = useRef(false);\n  useEffect(() => {\n    if (loadedPreferencesRef.current) return;\n    loadedPreferencesRef.current = true;\n    \n    (async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n      \n      const { data } = await supabase\n        .from('user_preferences')\n        .select('period_start, period_end')\n        .eq('user_id', user.id)\n        .single();\n        \n      if (data) {\n        const ps = data.period_start ? new Date(data.period_start).toISOString().split('T')[0] : defaultStart;\n        const pe = data.period_end ? new Date(data.period_end).toISOString().split('T')[0] : defaultEnd;\n        setDateFromFilter(ps);\n        setDateToFilter(pe);\n      }\n    })();\n  }, []);\n  \n  // 기간 변경 시 디바운스 저장 (사용자별)\n  const saveTimeoutRef = useRef<ReturnType<typeof setTimeout> | undefined>(undefined);\n  useEffect(() => {\n    if (!loadedPreferencesRef.current) return;\n    \n    if (saveTimeoutRef.current) {\n      clearTimeout(saveTimeoutRef.current);\n    }\n    \n    saveTimeoutRef.current = setTimeout(async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n      if (!dateFromFilter || !dateToFilter) return;\n      \n      await supabase.from('user_preferences').upsert({\n        user_id: user.id,\n        period_start: dateFromFilter,\n        period_end: dateToFilter,\n        updated_at: new Date().toISOString()\n      });\n    }, 1000);\n    \n    return () => {\n      if (saveTimeoutRef.current) {\n        clearTimeout(saveTimeoutRef.current);\n      }\n    };\n  }, [dateFromFilter, dateToFilter]);\n\n  return {\n    // States\n    activeTab,\n    searchTerm,\n    vendorFilter,\n    dateFromFilter,\n    dateToFilter,\n    selectedEmployee,\n    purchaseNumberFilter,\n    itemNameFilter,\n    specificationFilter,\n    approvalStatusFilter,\n    remarkFilter,\n    \n    // Setters\n    setActiveTab,\n    setSearchTerm,\n    setVendorFilter,\n    setDateFromFilter,\n    setDateToFilter,\n    setSelectedEmployee,\n    setPurchaseNumberFilter,\n    setItemNameFilter,\n    setSpecificationFilter,\n    setApprovalStatusFilter,\n    setRemarkFilter,\n    \n    // Computed values\n    filteredPurchases,\n    tabCounts\n  };\n};","import { memo, lazy, Suspense } from 'react';\nimport { Purchase } from '@/hooks/usePurchaseData';\n\n// Lazy load the heavy table component\nconst FastPurchaseTable = lazy(() => import('./FastPurchaseTable'));\n\ninterface LazyPurchaseTableProps {\n  purchases: Purchase[];\n  activeTab: string;\n  currentUserRoles: string[];\n  onRefresh: () => Promise<void>;\n  onPaymentComplete: (id: number) => Promise<void>;\n  onReceiptComplete: (id: number) => Promise<void>;\n}\n\n// Memoized loading component\nconst TableSkeleton = memo(() => (\n  <div className=\"p-4 space-y-4\">\n    {[...Array(5)].map((_, i) => (\n      <div key={i} className=\"flex space-x-4 animate-pulse\">\n        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n      </div>\n    ))}\n  </div>\n));\nTableSkeleton.displayName = 'TableSkeleton';\n\n// Main component with memoization\nconst LazyPurchaseTable = memo<LazyPurchaseTableProps>(({\n  purchases,\n  activeTab,\n  currentUserRoles,\n  onRefresh,\n  onPaymentComplete,\n  onReceiptComplete\n}) => (\n  <Suspense fallback={<TableSkeleton />}>\n    <FastPurchaseTable\n      purchases={purchases}\n      activeTab={activeTab}\n      currentUserRoles={currentUserRoles}\n      onRefresh={onRefresh}\n      onPaymentComplete={onPaymentComplete}\n      onReceiptComplete={onReceiptComplete}\n    />\n  </Suspense>\n));\n\nLazyPurchaseTable.displayName = 'LazyPurchaseTable';\n\nexport default LazyPurchaseTable;","\nimport { useState, lazy, Suspense, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { usePurchaseData, clearPurchaseCache } from \"@/hooks/usePurchaseData\";\nimport { useFastPurchaseFilters } from \"@/hooks/useFastPurchaseFilters\";\nimport LazyPurchaseTable from \"@/components/purchase/LazyPurchaseTable\";\n\nimport { Search, Filter, Plus, Package } from \"lucide-react\";\nimport { generatePurchaseOrderExcelJS, PurchaseOrderData } from \"@/utils/exceljs/generatePurchaseOrderExcel\";\nimport { Input } from \"@/components/ui/input\";\n\n// Lazy load modal for better performance\nconst PurchaseItemsModal = lazy(() => import(\"@/components/purchase/PurchaseItemsModal\"));\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Combobox, ComboboxOption } from \"@/components/ui/combobox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// Tabs 컴포넌트를 제거하고 직접 구현 (hanslwebapp 방식)\nimport { Button } from \"@/components/ui/button\";\nimport { createClient } from \"@/lib/supabase/client\";\nimport { format } from \"date-fns\";\nimport { toast } from \"sonner\";\nimport { Purchase } from \"@/types/purchase\";\n\ninterface PurchaseListMainProps {\n  onEmailToggle?: () => void;\n  showEmailButton?: boolean;\n}\n\n// 화면 상단의 탭(진행상태별) 목록\nconst NAV_TABS: { key: string; label: string }[] = [\n  { key: 'pending', label: '승인대기' },\n  { key: 'purchase', label: '구매 현황' },\n  { key: 'receipt', label: '입고 현황' },\n  { key: 'done', label: '전체 항목' },\n];\n\n// 발주 목록 메인 컴포넌트\nexport default function PurchaseListMain({ onEmailToggle, showEmailButton = true }: PurchaseListMainProps) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const supabase = createClient();\n  const [editingId, setEditingId] = useState<number | null>(null);\n  const [editingData, setEditingData] = useState<any>({});\n  const [selectedPurchase, setSelectedPurchase] = useState<Purchase | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  \n  // 발주 데이터 및 사용자 정보\n  const {\n    purchases,\n    vendors,\n    employees,\n    loading,\n    currentUserRoles,\n    currentUserName,\n    currentUserEmail,\n    currentUserId,\n    refreshPurchases: loadPurchases\n  } = usePurchaseData();\n  \n  const isAdmin = currentUserRoles?.includes('app_admin');\n  \n  // 디버깅 로그 추가\n  useEffect(() => {\n    console.log('📊 [PurchaseListMain] 발주 데이터 상태:', {\n      purchasesCount: purchases.length,\n      loading,\n      currentUserName,\n      currentUserRoles,\n      firstFewPurchases: purchases.slice(0, 3).map(p => ({\n        id: p.id,\n        po: p.purchase_order_number,\n        requester: p.requester_name,\n        date: p.request_date\n      }))\n    });\n  }, [purchases, loading, currentUserName, currentUserRoles]);\n\n  // 필터링 및 탭 관리\n  const {\n    activeTab,\n    searchTerm,\n    vendorFilter,\n    dateFromFilter,\n    dateToFilter,\n    selectedEmployee,\n    purchaseNumberFilter,\n    itemNameFilter,\n    specificationFilter,\n    approvalStatusFilter,\n    remarkFilter,\n    setActiveTab,\n    setSearchTerm,\n    setVendorFilter,\n    setDateFromFilter,\n    setDateToFilter,\n    setSelectedEmployee,\n    setPurchaseNumberFilter,\n    setItemNameFilter,\n    setSpecificationFilter,\n    setApprovalStatusFilter,\n    setRemarkFilter,\n    filteredPurchases,\n    tabCounts\n  } = useFastPurchaseFilters(purchases, currentUserRoles, currentUserName, currentUserId, currentUserEmail);\n  \n  // URL 쿼리 파라미터에서 탭 설정\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const tab = searchParams.get('tab');\n    if (tab === 'purchase') {\n      setActiveTab('purchase');\n    }\n  }, [location.search, setActiveTab]);\n  \n\n  // 상태에 따른 배지 생성\n  const getStatusBadge = (purchase: Purchase) => {\n    if (purchase.is_received) {\n      return <Badge className=\"bg-green-50 text-green-700\">입고완료</Badge>;\n    } else if (purchase.middle_manager_status === 'approved' && purchase.final_manager_status === 'approved') {\n      return <Badge className=\"bg-hansl-50 text-hansl-700\">구매진행</Badge>;\n    } else if (purchase.middle_manager_status === 'rejected' || purchase.final_manager_status === 'rejected') {\n      return <Badge className=\"bg-red-50 text-red-700\">반려</Badge>;\n    } else {\n      return <Badge className=\"bg-yellow-50 text-yellow-700\">승인대기</Badge>;\n    }\n  };\n\n  // 입고 현황 계산\n  const getReceiptProgress = (purchase: Purchase) => {\n    if (!purchase.items || purchase.items.length === 0) return { received: 0, total: 0, percentage: 0 };\n    \n    const total = purchase.items.length;\n    const received = purchase.items.filter(item => item.is_received || item.delivery_status === 'received').length;\n    const percentage = total > 0 ? Math.round((received / total) * 100) : 0;\n    \n    return { received, total, percentage };\n  };\n\n  // 선진행 체크 함수\n  const isAdvancePayment = (progress_type?: string) => {\n    return progress_type === '선진행' || progress_type?.trim() === '선진행' || progress_type?.includes('선진행');\n  };\n\n  // 편집 시작\n  const handleEditStart = (purchase: Purchase) => {\n    if (!currentUserRoles || !currentUserRoles.includes('app_admin')) return;\n    setEditingId(purchase.id);\n    setEditingData({\n      vendor_name: purchase.vendor_name,\n      project_vendor: purchase.project_vendor,\n      sales_order_number: purchase.sales_order_number,\n      project_item: purchase.project_item,\n      delivery_request_date: purchase.delivery_request_date ? \n        purchase.delivery_request_date.split('T')[0] : '',\n      total_amount: purchase.total_amount,\n    });\n  };\n\n  // 편집 저장\n  const handleEditSave = async () => {\n    if (!currentUserRoles || !currentUserRoles.includes('app_admin') || !editingId) return;\n    \n    try {\n      const { error } = await supabase\n        .from('purchase_requests')\n        .update(editingData)\n        .eq('id', editingId);\n\n      if (error) throw error;\n\n      toast.success('수정이 완료되었습니다.');\n      setEditingId(null);\n      setEditingData({});\n      await loadPurchases();\n    } catch (error) {\n      toast.error('수정 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 편집 취소\n  const handleEditCancel = () => {\n    setEditingId(null);\n    setEditingData({});\n  };\n\n  // 엑셀 다운로드\n  const handleExcelDownload = async (purchase: Purchase) => {\n    try {\n      // DB에서 직접 모든 품목 조회\n      const { data: purchaseRequest, error: requestError } = await supabase\n        .from('purchase_requests')\n        .select('*')\n        .eq('purchase_order_number', purchase.purchase_order_number)\n        .single();\n\n      if (requestError || !purchaseRequest) {\n        toast.error('해당 발주요청번호의 데이터를 찾을 수 없습니다.');\n        return;\n      }\n\n      // 품목 데이터 조회\n      const { data: orderItems, error: itemsError } = await supabase\n        .from('purchase_request_items')\n        .select('*')\n        .eq('purchase_order_number', purchase.purchase_order_number)\n        .order('line_number');\n\n      if (itemsError || !orderItems || orderItems.length === 0) {\n        toast.error('해당 발주요청번호의 품목 데이터를 찾을 수 없습니다.');\n        return;\n      }\n\n      // 업체 상세 정보 및 담당자 정보 조회\n      const vendorInfo = {\n        vendor_name: purchase.vendor_name,\n        vendor_phone: '',\n        vendor_fax: '',\n        vendor_contact_name: ''\n      };\n\n      try {\n        const vendorId = purchaseRequest.vendor_id || purchase.vendor_id;\n        const contactId = purchaseRequest.contact_id || purchase.contact_id;\n        \n        // vendor 정보 조회\n        if (vendorId) {\n          const { data: vendorData, error: vendorError } = await supabase\n            .from('vendors')\n            .select('vendor_phone, vendor_fax')\n            .eq('id', vendorId)\n            .single();\n\n          if (vendorData && !vendorError) {\n            vendorInfo.vendor_phone = vendorData.vendor_phone || '';\n            vendorInfo.vendor_fax = vendorData.vendor_fax || '';\n          }\n        }\n\n        // vendor_contacts에서 contact_id로 담당자 정보 조회\n        if (contactId) {\n          const { data: contactData, error: contactError } = await supabase\n            .from('vendor_contacts')\n            .select('contact_name, contact_phone, contact_email')\n            .eq('id', contactId)\n            .single();\n          if (contactData && !contactError) {\n            vendorInfo.vendor_contact_name = contactData.contact_name || '';\n          }\n        }\n      } catch (error) {\n      }\n\n      const excelData: PurchaseOrderData = {\n        purchase_order_number: purchaseRequest.purchase_order_number || '',\n        request_date: purchaseRequest.request_date,\n        delivery_request_date: purchaseRequest.delivery_request_date,\n        requester_name: purchaseRequest.requester_name,\n        vendor_name: vendorInfo.vendor_name || '',\n        vendor_contact_name: vendorInfo.vendor_contact_name,\n        vendor_phone: vendorInfo.vendor_phone,\n        vendor_fax: vendorInfo.vendor_fax,\n        project_vendor: purchaseRequest.project_vendor,\n        sales_order_number: purchaseRequest.sales_order_number,\n        project_item: purchaseRequest.project_item,\n        items: orderItems.map((item: any) => ({\n          line_number: item.line_number,\n          item_name: item.item_name,\n          specification: item.specification,\n          quantity: item.quantity,\n          unit_price_value: item.unit_price_value,\n          amount_value: item.amount_value,\n          remark: item.remark,\n          currency: purchaseRequest.currency || 'KRW'\n        }))\n      };\n\n      // 코드 기반 ExcelJS 생성 (템플릿 없이 서식 직접 정의)\n      const blob = await generatePurchaseOrderExcelJS(excelData);\n      \n      // 다운로드용 파일명: 발주서_{업체명}_발주요청번호\n      const downloadFilename = `발주서_${excelData.vendor_name}_${excelData.purchase_order_number}.xlsx`;\n\n      // 사용자에게 즉시 다운로드 제공\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = downloadFilename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n      toast.success('엑셀 파일이 다운로드되었습니다.');\n      \n      // DB에 다운로드 완료 플래그(is_po_download) 업데이트 - lead buyer만 해당\n      try {\n        const isLeadBuyer = currentUserRoles && currentUserRoles.includes('lead buyer');\n\n        if (isLeadBuyer) {\n          const { error: downloadFlagErr } = await supabase\n            .from('purchase_requests')\n            .update({ is_po_download: true })\n            .eq('purchase_order_number', purchase.purchase_order_number);\n          if (downloadFlagErr) {\n          } else {\n            // 화면 업데이트\n            await loadPurchases();\n          }\n        }\n      } catch (flagErr) {\n      }\n    } catch (error) {\n      toast.error('엑셀 다운로드에 실패했습니다.');\n    }\n  };\n\n  // 최적화된 핸들러들\n  const handleReceiptComplete = async (purchaseId: number) => {\n    try {\n      const { error } = await supabase\n        .from('purchase_requests')\n        .update({ \n          is_received: true,\n          received_at: new Date().toISOString()\n        })\n        .eq('id', purchaseId);\n\n      if (error) throw error;\n      \n      // 개별 품목도 모두 입고완료 처리\n      await supabase\n        .from('purchase_request_items')\n        .update({ \n          is_received: true,\n          delivery_status: 'received'\n        })\n        .eq('purchase_request_id', purchaseId);\n      \n      toast.success('입고완료 처리되었습니다.');\n      await loadPurchases();\n    } catch (error) {\n      toast.error('처리 중 오류가 발생했습니다.');\n    }\n  };\n\n  const handlePaymentComplete = async (purchaseId: number) => {\n    try {\n      const { error } = await supabase\n        .from('purchase_requests')\n        .update({ \n          is_payment_completed: true,\n          payment_completed_at: new Date().toISOString()\n        })\n        .eq('id', purchaseId);\n\n      if (error) throw error;\n      \n      // 개별 품목도 모두 구매완료 처리\n      await supabase\n        .from('purchase_request_items')\n        .update({ \n          is_payment_completed: true\n        })\n        .eq('purchase_request_id', purchaseId);\n      \n      toast.success('구매완료 처리되었습니다.');\n      await loadPurchases();\n    } catch (error) {\n      toast.error('처리 중 오류가 발생했습니다.');\n    }\n  };\n\n  const handleItemsClick = (purchase: Purchase) => {\n    setSelectedPurchase(purchase);\n    setIsModalOpen(true);\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">발주요청 관리</h1>\n          <p className=\"text-sm text-gray-600 mt-1\">발주요청서를 관리하고 승인 처리를 할 수 있습니다</p>\n        </div>\n        <Button \n          onClick={() => navigate('/purchase/new')}\n          className=\"mt-4 sm:mt-0 bg-hansl-500 hover:bg-hansl-600\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          새 발주요청 작성\n        </Button>\n      </div>\n\n      {/* 필터 섹션 */}\n      <Card className=\"mb-4 border border-gray-200\">\n        <CardHeader className=\"bg-white border-b border-gray-200 py-3\">\n          <CardTitle className=\"flex items-center text-gray-900 text-sm font-medium\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            검색 필터\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"py-3\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-2\">\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">시작일</label>\n              <Input\n                type=\"date\"\n                value={dateFromFilter}\n                onChange={(e) => setDateFromFilter(e.target.value)}\n                className=\"text-sm h-9\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">종료일</label>\n              <Input\n                type=\"date\"\n                value={dateToFilter}\n                onChange={(e) => setDateToFilter(e.target.value)}\n                className=\"text-sm h-9\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">요청자</label>\n              <Combobox\n                value={selectedEmployee || \"all\"}\n                onValueChange={(value) => {\n                  setSelectedEmployee(value);\n                }}\n                options={[\n                  { value: \"all\", label: \"전체\" },\n                  ...employees\n                    .filter(emp => emp.name && emp.name.trim() !== '')\n                    .sort((a, b) => (a.name || '').localeCompare(b.name || ''))\n                    .map((employee): ComboboxOption => ({\n                      value: employee.name || '',\n                      label: `${employee.name}${employee.name === currentUserName ? \" (나)\" : \"\"}`\n                    }))\n                ]}\n                placeholder={selectedEmployee === \"all\" ? \"전체\" : selectedEmployee || \"선택\"}\n                searchPlaceholder=\"직원 이름 검색...\"\n                emptyText=\"일치하는 직원이 없습니다\"\n                className=\"text-sm\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">업체</label>\n              <Select value={vendorFilter || \"all\"} onValueChange={(value) => setVendorFilter(value === \"all\" ? \"\" : value)}>\n                <SelectTrigger className=\"h-9 text-sm\">\n                  <SelectValue placeholder=\"전체\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">전체</SelectItem>\n                  {vendors.map((vendor) => (\n                    <SelectItem key={vendor.id} value={vendor.vendor_name}>\n                      {vendor.vendor_name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">발주번호</label>\n              <Input\n                placeholder=\"번호\"\n                value={purchaseNumberFilter}\n                onChange={(e) => setPurchaseNumberFilter(e.target.value)}\n                className=\"text-sm h-9\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">품명</label>\n              <Input\n                placeholder=\"품명\"\n                value={itemNameFilter}\n                onChange={(e) => setItemNameFilter(e.target.value)}\n                className=\"text-sm h-9\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">승인상태</label>\n              <Select \n                value={approvalStatusFilter || \"all\"} \n                onValueChange={(value) => setApprovalStatusFilter(value === \"all\" ? \"\" : value)}\n              >\n                <SelectTrigger className=\"h-9 text-sm\">\n                  <SelectValue placeholder=\"전체\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">전체</SelectItem>\n                  <SelectItem value=\"pending\">대기</SelectItem>\n                  <SelectItem value=\"approved\">승인</SelectItem>\n                  <SelectItem value=\"rejected\">반려</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"col-span-2 sm:col-span-1\">\n              <label className=\"block text-xs font-medium text-gray-600 mb-1\">통합검색</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 w-3 h-3 text-gray-400\" />\n                <Input\n                  placeholder=\"검색...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-7 text-sm h-9\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 직접 구현한 탭 (hanslwebapp 방식) - 빠른 성능 */}\n      <div className=\"space-y-3\">\n        {/* 탭 버튼들 - 모바일 반응형 개선 */}\n        <div className=\"flex flex-col sm:flex-row sm:space-x-1 space-y-1 sm:space-y-0 bg-gray-50 p-1 rounded-lg border border-gray-200\">\n          {NAV_TABS.map((tab) => (\n            <button\n              key={tab.key}\n              onClick={() => setActiveTab(tab.key)}\n              className={`flex-1 flex items-center justify-center space-x-2 py-2.5 px-3 sm:px-4 rounded-md text-xs sm:text-sm font-medium transition-colors ${\n                activeTab === tab.key\n                  ? 'text-hansl-600 bg-white shadow-sm border border-gray-200'\n                  : 'text-gray-600 bg-transparent hover:text-gray-900 hover:bg-white/50'\n              }`}\n            >\n              <span className=\"whitespace-nowrap\">{tab.label}</span>\n              <Badge \n                variant=\"secondary\" \n                className={`text-[10px] sm:text-xs ${\n                  activeTab === tab.key \n                    ? 'bg-hansl-50 text-hansl-700' \n                    : 'bg-gray-100 text-gray-600'\n                }`}\n              >\n                {tabCounts[tab.key as keyof typeof tabCounts]}\n              </Badge>\n            </button>\n          ))}\n        </div>\n\n        {/* 탭 콘텐츠 */}\n        <Card className=\"overflow-hidden border border-gray-200\">\n          <CardContent className=\"p-0\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"w-8 h-8 border-2 border-hansl-500 border-t-transparent rounded-full animate-spin\" />\n                <span className=\"ml-3 text-gray-600\">로딩 중...</span>\n              </div>\n            ) : filteredPurchases.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">발주요청서가 없습니다</h3>\n                <p className=\"text-gray-600\">새로운 발주요청서를 작성해보세요.</p>\n              </div>\n            ) : (\n              <LazyPurchaseTable \n                purchases={filteredPurchases} \n                activeTab={activeTab}\n                currentUserRoles={currentUserRoles}\n                onRefresh={loadPurchases}\n                onPaymentComplete={handlePaymentComplete}\n                onReceiptComplete={handleReceiptComplete}\n              />\n            )}\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* 세부항목 모달 */}\n      {selectedPurchase && (\n        <Suspense fallback={<div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\"><div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white\"></div></div>}>\n          <PurchaseItemsModal\n            isOpen={isModalOpen}\n            onClose={() => {\n              setIsModalOpen(false);\n              setSelectedPurchase(null);\n            }}\n            purchase={{\n              ...selectedPurchase,\n              vendor_name: selectedPurchase.vendor_name || '',\n              project_vendor: selectedPurchase.project_vendor || '',\n              sales_order_number: selectedPurchase.sales_order_number || '',\n              project_item: selectedPurchase.project_item || ''\n            }}\n            isAdmin={isAdmin || false}\n            onUpdate={loadPurchases}\n          />\n        </Suspense>\n      )}\n    </div>\n  );\n}"],"file":"assets/PurchaseListMain-1KfzgT_E.js"}